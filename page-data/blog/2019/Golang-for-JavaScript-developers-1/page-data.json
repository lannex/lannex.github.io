{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/Golang-for-JavaScript-developers-1/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"8d5c5025-53ce-55dd-a5a7-46e7424714cb","excerpt":"출처 Golang for JavaScript developers - Part 1 시작 만약 당신이 다른 프로그래밍 언어를 배우는 것에 대해 생각하고 있는 Javascript 개발자라면, Golang은 훌륭한 선택이다. 단순하며 많은 모멘텀과 좋은 성능 그리고 JavaScript…","html":"<h1>출처</h1>\n<p><a href=\"https://dev.to/deepu105/golang-for-javascript-developers-part-1-38je\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang for JavaScript developers - Part 1</a></p>\n<h1>시작</h1>\n<p>만약 당신이 다른 프로그래밍 언어를 배우는 것에 대해 생각하고 있는 Javascript 개발자라면, Golang은 훌륭한 선택이다. 단순하며 많은 모멘텀과 좋은 성능 그리고 JavaScript와 일부 유사하다.</p>\n<p class=\"empty\" />\n<p>Edit: 어떤 사람이 댓글에서 JS 개발자가 가능한 모든 옵션 중에서 왜 Go를 선택해야 하는지 물었다.\n<a href=\"https://dev.to/deepu105/my-love-hate-relationship-with-javascript-3p66\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">내 생각에</a>, JS는 완벽한 언어가 아니기 때문에 다른 언어를 배우면 JS 개발자가 JS를 더 실용적으로 사용할 수 있게 큰 도움이 될 것이고 기본적인 프로그래밍 개념에 대한 그녀/그의 지식을 강화하는 데도 도움이 될 것이다.\n물론 Rust, Go, Haskel, Kotlin 등과 같은 많은 옵션들이 있지만, 나는 Go가 사용 가능한 모든 옵션 중에서 가장 단순하고 널리 채택되어 시작하기에 좋은 것이라고 생각한다.\n나의 두번째 선택은 Kotlin이나 <a href=\"https://dev.to/deepu105/my-first-impressions-of-rust-1a8o\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rust</a>가 될 것이다.</p>\n<p class=\"empty\" />\n<p>이 포스트는 언어를 비교하는 것이 아니고 그들이 매우 유사하다고 말하고 있다.\n이것은 JavaScript 개발자가 Golang을 빨리 파악할 수 있는 가이드이다.\nGo에는 우리가 다룰 자바스크립트와 완전히 다른 많은 측면들이 있다.</p>\n<h1>더 유사한 것들</h1>\n<p>Go에는 JavaScript의 개념과 매우 유사한 것들이 많이 있다. 대부분은 같지 않으나 비슷하다. 먼저 우리는 그것들을 알아보는 것에 힘쓰자. 이 시리즈의 1부에선, 우리는 그것들이 어떻게 비슷한 지 살펴보고 주요 차이점도 주목할 것이다.</p>\n<h1>Functions</h1>\n<p>JS와 Go에서 가장 유사한 특징은 functions이다.</p>\n<h3>유사점</h3>\n<ul>\n<li>Functions는 일급 객체이다.</li>\n<li>Functions는 변수에 할당할 수 있다.</li>\n<li>Functions는 인수로 다른 functions을 전달할 수 있고, functions으로 반환할 수 있다.</li>\n<li>Functions는 중첩 될 수 있다.</li>\n<li>Functions는 커리 될 수 있다. (일부 기능)</li>\n<li>Functions는 주변 컨텍스트를 기억해서 클로저를 만들 수 있다.</li>\n<li>Functions는 이름을 지정하거나 익명으로 지정할 수 있다. 익명 functions를 즉시 호출 할 수 있다.(IIFE)</li>\n</ul>\n<h3>Javascript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//`this`에 접근 할 수 있는 보통 function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">standardFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arg1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arg2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 변수에 할당 된 function</span>\n<span class=\"token keyword\">const</span> assignedFunction1 <span class=\"token operator\">=</span> standardFunction<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 변수에 할당 된 화살표 function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">assignedArrowFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arg1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arg2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// function를 인수로 받아들이고 function를 반환하는 고차 function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">functionAsArgumentAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">addFn<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> out <span class=\"token operator\">=</span> <span class=\"token function\">addFn</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 클로저를 반환</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numArg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> out <span class=\"token operator\">+</span> numArg<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> out <span class=\"token operator\">=</span> <span class=\"token function\">functionAsArgumentAndReturn</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns 25</span>\n\n<span class=\"token comment\">// 중첩 functions</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer fn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">nested2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner fn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner arrow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">arrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">nested2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints:</span>\n<span class=\"token comment\">// outer fn</span>\n<span class=\"token comment\">// inner fn</span>\n<span class=\"token comment\">// inner arrow</span>\n\n<span class=\"token comment\">// 이것은 function을 반환하는 고차 function이다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// function은 클로저로 반환된다.</span>\n    <span class=\"token comment\">// 변수 x는 이 방법의 외부 스코프에서 얻어지고 클로저에 기억된다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">y</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 더 많은 커링을 만들기 위해 add 메소드를 사용하고 있다.</span>\n<span class=\"token keyword\">var</span> add10 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> add20 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> add30 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add10</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add20</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add30</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 35</span>\n\n<span class=\"token comment\">// 즉시 호출 된 익명 function (IIFE)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"anonymous fn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// prints: anonymous fn</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 보통 function, 이 function은 중첩 될 수 없다</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">standardFunction</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s:%s\"</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 변수에 할당 된 function</span>\n  <span class=\"token keyword\">var</span> assignedFunction1 <span class=\"token operator\">=</span> standardFunction\n\n  <span class=\"token comment\">// 변수에 할당되고 중첩 된 익명 function</span>\n  <span class=\"token keyword\">var</span> assignedFunction2 <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s:%s\"</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// function을 인수로 받아들이고 function를 반환하는 고차 function</span>\n  <span class=\"token keyword\">var</span> functionAsArgumentAndReturn <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>addFn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> arg1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> out <span class=\"token operator\">=</span> <span class=\"token function\">addFn</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 클로저를 반환</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>numArg <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> out <span class=\"token operator\">+</span> numArg\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> out <span class=\"token operator\">=</span> <span class=\"token function\">functionAsArgumentAndReturn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 25</span>\n\n  <span class=\"token comment\">// 중첩 된 익명 functions</span>\n  <span class=\"token keyword\">var</span> nested <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer fn\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">var</span> nested2 <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner fn\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">var</span> nested3 <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner arrow\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token function\">nested3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">nested2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">nested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints:</span>\n  <span class=\"token comment\">// outer fn</span>\n  <span class=\"token comment\">// inner fn</span>\n  <span class=\"token comment\">// inner arrow</span>\n\n  <span class=\"token comment\">// function를 반환하는 고차 function</span>\n  <span class=\"token keyword\">var</span> add <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// function은 클로저로 반환된다.</span>\n      <span class=\"token comment\">// 변수 x는 이 방법의 외부 스코프에서 얻어지고 클로저에 기억된다.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 더 많은 커링을 만들기 위해 add 메소드를 사용하고 있다.</span>\n  <span class=\"token keyword\">var</span> add10 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> add20 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> add30 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">add10</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">add20</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">add30</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 35</span>\n\n  <span class=\"token comment\">// 즉시 호출 된 익명 function (IIFE)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"anonymous fn\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// prints: anonymous fn</span>\n\n  <span class=\"token function\">assignedFunction1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">assignedFunction2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>차이점</h3>\n<ul>\n<li>JavaScript Functions에는 두가지 형태가 있다; 정규 functions, 그리고 화살표 functions 반면에 Go 에는 보통 functions 와 인터페이스 functions이 있다. 보통 Go functions는 <code class=\"language-text\">this</code>를 가지지 않는다. 따라서 화살표 functions과 더 유사한 반면에 인터페이스 functions는 <code class=\"language-text\">this</code>와 비슷한 것이 있다. 이런 이유로 JavaScript의 보통 functions에 가깝다. Go에는 글로벌 <code class=\"language-text\">this</code> 라는 개념이 없다.</li>\n</ul>\n<h3>Javascript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">normalFnOutsideClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">여전히 글로벌 this에 접근할 수 있다: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrowFnOutsideClass</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this를 가지고 있지 않다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">normalFnInsideClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this로 class에 접근할 수 있다: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">arrowFnInsideClass</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this로 class 참조에 접근할 수 있다: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalFnInsideClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">arrowFnInsideClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> SomeStruct <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>SomeStruct<span class=\"token punctuation\">)</span> <span class=\"token function\">normalFnInsideStruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 변수 이름을 this 또는 다른것으로 지정할 수 있다</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this로 struct 참조에 접근할 수 있다\\n: %s\"</span><span class=\"token punctuation\">,</span> this<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> normalFnOutsideStruct <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내 스코프의 변수에 접근할 수 있다\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">normalFnOutsideStruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> structVal <span class=\"token operator\">=</span> SomeStruct<span class=\"token punctuation\">{</span><span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">}</span>\n    structVal<span class=\"token punctuation\">.</span><span class=\"token function\">normalFnInsideStruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>JavaScript functions는 다른 값 유형과 동일하므로 Go에서 불가능한 추가 속성을 보유 할 수도 있다.</li>\n<li>Go functions는 암시적으로 명명된 반환값<small>(implicit named returns)</small>을 가질 수 있다.</li>\n<li>Go에는 익명 functions만 중첩 될 수 있다.</li>\n<li>Go functions는 여러 값을 반환할 수 있지만 JavaScript에서는 한 값만 반환할 수 있다. 그러나 JS에서 구조 분해<small>(destructuring)</small>를 사용해서 문제를 해결할 수 있으니 양쪽 모두에서 비슷한 모양의 functions를 만들 수 있다.</li>\n</ul>\n<h3>Javascript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">holdMyBeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">holdMyBeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hey </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, hold my </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> beer\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">holdMyBeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">:=</span> <span class=\"token function\">holdMyBeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey %s, hold my %d beer\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>스코프</h1>\n<p>스코프는 변수가 유효한 컨텍스트로 변수를 사용할 수 있는 위치를 결정하며 JS와 Go 둘 모두 많은 유사점을 가지고 있다.</p>\n<h3>유사점</h3>\n<ul>\n<li>둘 다 function 스코프를 가지며 Functions는 주변 스코프를 기억할 수 있다.</li>\n<li>둘 다 block 스코프를 가지고 있다.</li>\n<li>둘 다 글로벌 스코프를 가지고 있다.</li>\n</ul>\n<h3>차이점</h3>\n<ul>\n<li>Go에는 JavaScript에서 까다로운 개념인 <code class=\"language-text\">this</code>라는 개념이 없다. 내 생각에 이것은 Go에서 일을 훨씬 더 간단하게 만든다.</li>\n<li>Go에서 같은 스코프의 변수는 다시 선언할 수 없다. Go의 <code class=\"language-text\">var</code>는 JS에서 <code class=\"language-text\">let</code> 키워드에 더 가깝다.</li>\n</ul>\n<h1>흐름 제어<small>(Flow control)</small></h1>\n<p>Golang의 흐름 제어는 JavaScript와 매우 유사하지만 많은 면에서 더 단순하다.</p>\n<h3>유사점</h3>\n<ul>\n<li><code class=\"language-text\">for</code> 루프는 둘 다 매우 유사하다.</li>\n<li><code class=\"language-text\">while</code> 루프는 매우 유사하지만 Go는 동일한 <code class=\"language-text\">for</code> 키워드를 사용한다.</li>\n<li><code class=\"language-text\">forEach</code>도 기능면에서 비슷하지만 구문은 상당히 다르다.</li>\n<li>루프에서 break/continue를 할 수 있다. labels을 사용하여 그렇게 할 수도 있다.</li>\n<li><code class=\"language-text\">if/else</code> 문법은 상당히 비슷하고. Go 버전이 좀 더 강력하다.</li>\n</ul>\n<h3>JavaScript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// For loop</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// While loop</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Do while</span>\n\n<span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ForEach loop</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ram\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sabi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Deepu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> at index </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// for of loop</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ram\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sabi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Deepu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// For in loop</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token string\">\"aVal\"</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token string\">\"bVal\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// For loop</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// While loop</span>\n    i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Do while</span>\n    j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">==</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ForEach and for of loop</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ram\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sabi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Deepu\"</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v at index %d\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// For in loop</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"aVal\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bVal\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> obj <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v at index %s\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>차이점</h3>\n<ul>\n<li>Go에는 삼항 연산자<small>(ternary operator)</small>가 없다.</li>\n<li><code class=\"language-text\">switch</code> 구문은 비슷하지만 Go는 기본적으로 중단되고 JS는 기본적으로 통과한다.</li>\n<li>Go에서는 그 기능에 대해 <code class=\"language-text\">fallthrough</code> 키워드를 사용할 수 있고, JS에서는 <code class=\"language-text\">break</code> 키워드를 사용할 수 있다.</li>\n<li>JS에는 <code class=\"language-text\">while</code>, <code class=\"language-text\">forEach</code>, <code class=\"language-text\">for in</code> &#x26; <code class=\"language-text\">for of</code> 루프와 같은 더 많은 반복 방법이 있으며, Go에서는 사용할 수 없으나 대부분 for 구문을 사용하여 달성 할 수 있다.</li>\n<li><code class=\"language-text\">if/else</code>는 Go에서 초기화 할당을 가질 수 있다. 아래 코드에서 <code class=\"language-text\">val</code>에 대한 할당은 <code class=\"language-text\">if</code>와 <code class=\"language-text\">else</code>블록 내에서만 스코프를 가지며 그 외부에는 적용되지 않는다. JS에서는 불가능하다.</li>\n</ul>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> val <span class=\"token operator\">:=</span> <span class=\"token function\">getVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> val <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>메모리 관리</h1>\n<p>메모리 관리도 JS와 Go의 세부 사항을 제외하고는 매우 유사하다.</p>\n<h3>유사점</h3>\n<ul>\n<li>둘 다 런타임에 가비지 컬렉션이 된다.</li>\n<li>둘 다 힙 및 스택 메모리를 가지며 이는 둘 다 동일하다.</li>\n</ul>\n<h3>차이점</h3>\n<ul>\n<li>Go는 사용자의 메모리 관리를 추상화하는 동안 사용자에게 노출되는 포인터를 가지고 있는 반면에 JavaScript 포인터는 완전히 추상화되어있고 값과 참조로만 작업한다.</li>\n<li>Go는 대기시간에 초첨을 맞춘 concurrent tricolor mark-and-sweep 알고리즘을 사용하지만 JS 엔진은 일반적으로 Mark-Sweep이 널리 사용되는 다른 알고리즘을 구현한다. 예를 들어 V8 엔진은 Mark-Sweep과 Scavenge 알고리즘 둘다 사용한다.</li>\n</ul>\n<h3>Misc</h3>\n<ul>\n<li>주석은 <code class=\"language-text\">//</code> 및 <code class=\"language-text\">/ * * /</code>로 동일하다.</li>\n<li>JS와 Go 모두 다른 모듈 가져 오기를 지원하지만 동작은 같지 않다.</li>\n<li>SetTimeout은 둘 다 비슷하다. <code class=\"language-text\">setTimeout(somefunction, 3*1000)</code> vs <code class=\"language-text\">time.AfterFunc(3*time.Second, somefunction)</code>.</li>\n<li>둘 다 스프레드 연산자가 있다 <code class=\"language-text\">console.log (... array)</code> vs <code class=\"language-text\">fmt.Println (array ...)</code>. Go 스프레드는 인터페이스 arrays/slices에서만 작동한다.</li>\n<li>둘 다 메소드 인수에 나머지 연산자가 있다 <code class=\"language-text\">...nums</code> vs <code class=\"language-text\">nums ...int</code>.</li>\n</ul>\n<h1>결론</h1>\n<p>1부에서 우리는 두 언어에서 비슷한 개념을 살펴보았다.\n이 시리즈의 다음 편에는 JS와 Go의 더 다른 점을 알아볼 것이다.\n다음 편에는 이것보다 다른 것들이 더 있지만 몇 가지 차이점들은 미묘해서 JavaScript 개발자는 이해하기 쉬울 것이다.</p>\n<p class=\"empty\" />\n<p>다음 편에서 살펴볼 것:</p>\n<ul>\n<li>Types &#x26; Variables</li>\n<li>Error handling</li>\n<li>Mutability</li>\n<li>Composition instead of inheritance</li>\n<li>Concurrency</li>\n<li>Compilation</li>\n<li>Paradigm</li>\n</ul>\n<h1>참조:</h1>\n<ul>\n<li><a href=\"http://www.pazams.com/Go-for-Javascript-Developers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.pazams.com/Go-for-Javascript-Developers/</a></li>\n<li><a href=\"https://github.com/miguelmota/golang-for-nodejs-developers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/miguelmota/golang-for-nodejs-developers</a></li>\n</ul>\n<h1>마치며</h1>\n<p>부족한 영어 실력이나마 매끄럽게 번역을 하기 위해 직역 및 의역을 다수 사용했다.</p>\n<p><small>(문장의 해석이 오역이거나 수정이 필요한 점이 있다면 언제든 알려주시면 반영하겠습니다.)</small></p>\n<p class=\"empty\" />\n<ul>\n<li><strong>function</strong>은 함수라 표기하지 않고 영문 그대로 표기했다.</li>\n<li>같거나 비슷한 뜻으로 쓰인 것 같으나 구분을 위해 normal function은 <strong>보통 function</strong>, regular function은 <strong>정규 function</strong>으로 번역했다.</li>\n</ul>","frontmatter":{"title":"JavaScript 개발자를 위한 Golang - 1부(번역)","date":"December 11, 2019","description":"Golang for JavaScript developers - Part 1","tags":"javascript, go, translation"}}},"pageContext":{"slug":"/blog/2019/Golang-for-JavaScript-developers-1/","previous":{"fields":{"slug":"/blog/2019/TSLint-deprecated/"},"frontmatter":{"title":"TSLint에서 ESLint로"}},"next":{"fields":{"slug":"/blog/2019/Golang-for-JavaScript-developers-2/"},"frontmatter":{"title":"JavaScript 개발자를 위한 Golang - 2부(번역)"}}}},"staticQueryHashes":["3113963522","3980716358"]}