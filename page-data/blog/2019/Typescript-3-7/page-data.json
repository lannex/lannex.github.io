{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/Typescript-3-7/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"f3d954b4-79d4-5bcc-9e7c-1be558ce01ad","excerpt":"한 달 어느덧 Typescript 3.7이 배포된 지 한 달가량이 되었다. 여러 기능적인 면에서 많은 업데이트가 되었는데 그중 가장 많이 또 만족스럽게 사용 중인 Optional Chaining, Nullish Coalescing을 소개하고자 한다. Optional Chaining At…","html":"<h1 id=\"한-달\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EB%8B%AC\" aria-label=\"한 달 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 달</h1>\n<p>어느덧 Typescript 3.7이 배포된 지 한 달가량이 되었다. 여러 기능적인 면에서 많은 업데이트가 되었는데 그중 가장 많이 또 만족스럽게 사용 중인 Optional Chaining, Nullish Coalescing을 소개하고자 한다.</p>\n<h1 id=\"optional-chaining\" style=\"position:relative;\"><a href=\"#optional-chaining\" aria-label=\"optional chaining permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Chaining</h1>\n<blockquote>\n<p>At its core, optional chaining lets us write code where TypeScript can immediately stop running some expressions if we run into a null or undefined.</p>\n</blockquote>\n<p>3.7로 업데이트 이후 가장 많이, 그리고 유용하게 사용하는 문법이다. 간단하게 말하자면 코드가 길어지는 객체 체크를 짧게 표현할 수 있도록 만들었다.</p>\n<p>예를들어 하단과 같은 코드가 있을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Abc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  abcContent<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    abcList<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      abcItems<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> abc<span class=\"token operator\">:</span> Abc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하위에 있는 값에 접근하려면 기존에는 이렇게 체크를 해야 했었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Before</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>abcContent <span class=\"token operator\">&amp;&amp;</span> abcContent<span class=\"token punctuation\">.</span>abcList <span class=\"token operator\">&amp;&amp;</span> abcContent<span class=\"token punctuation\">.</span>abcList<span class=\"token punctuation\">.</span>abcItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>짧을 경우에는 상관이 없는데 보통은 그렇지가 않은 경우가 많다.\n이것을 Optional Chaining이 정말 간단하게 만들었다!</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// After - Optional Chaining</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>abcContent<span class=\"token operator\">?.</span>abcList<span class=\"token operator\">?.</span>abcItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또 이것을 실행에 대입하면</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> items<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b</span>\n<span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>이런 식으로도 사용할 수 있다.</p>\n<p>주의할 점이 있다면 기존 객체 체크에서는 <code class=\"language-text\">falsy</code>값이 <code class=\"language-text\">'', 0, NaN, false, null, undefined</code>인 데 반면  <code class=\"language-text\">?.</code>는 <code class=\"language-text\">null, undefined</code>라는 것이다.</p>\n<h1 id=\"nullish-coalescing\" style=\"position:relative;\"><a href=\"#nullish-coalescing\" aria-label=\"nullish coalescing permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nullish Coalescing</h1>\n<p>Optional Chaining 과 비슷하게 <code class=\"language-text\">??</code>를 사용해서 <code class=\"language-text\">null, undefined</code>를 확인하고 실행하는 문법이다.</p>\n<p><code class=\"language-text\">||</code> 연산자와의 차이점은 <code class=\"language-text\">falsy</code>체크에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ||</span>\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> foo <span class=\"token operator\">||</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// same</span>\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span>\n  foo <span class=\"token operator\">!==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&amp;&amp;</span>\n  foo <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n  foo <span class=\"token operator\">!==</span> <span class=\"token number\">NaN</span> <span class=\"token operator\">&amp;&amp;</span>\n  foo <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span>\n  foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n  foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">?</span> foo\n    <span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ??</span>\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> foo <span class=\"token operator\">??</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// same</span>\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> foo <span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>가끔은 <code class=\"language-text\">''</code>처럼 빈값도 체크해야되는 경우가 있는데 그럴때 매우 유용한 문법이다.</p>\n<h1 id=\"그밖에\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%B0%96%EC%97%90\" aria-label=\"그밖에 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그밖에</h1>\n<p>Node.js의 assert와 같은 Assertion Functions이나 Recursive Type Aliases 등이 추가되었으나 Optional Chaining, Nullish Coalescing 두 개만 해도 괄목할만한 업데이트라고 생각이 든다.\n<small>(정말 많이 사용하게 될 터)</small></p>\n<p>더욱 자세한 추가점은 릴리즈 노트를 참고하자.</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">3.7 Relese Note</a></p>\n<h1 id=\"vscode에서-typescript-37-인식이-안될-경우\" style=\"position:relative;\"><a href=\"#vscode%EC%97%90%EC%84%9C-typescript-37-%EC%9D%B8%EC%8B%9D%EC%9D%B4-%EC%95%88%EB%90%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"vscode에서 typescript 37 인식이 안될 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VSCode에서 Typescript 3.7 인식이 안될 경우</h1>\n<p>VSCode를 사용한다면 Typescript 기본값이 3.6 버전대로 되어 있을 공산이 크다. <small>(현재날짜 기준)</small></p>\n<p>그럴 땐 간단하게 우측하단에 Typescript 버전을 클릭하여 작업영역 버전 사용을 하면 해결된다.</p>\n<p><a href=\"https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">using-newer-typescript-versions</a></p>","frontmatter":{"title":"Optional Chaining, Nullish Coalescing","date":"2019-12-01","description":"Typescript 3.7 업데이트 후 필수가 되어버린 문법","tags":["typescript","vscode"]}}},"pageContext":{"slug":"/blog/2019/Typescript-3-7/","previous":null,"next":{"fields":{"slug":"/blog/2019/TSLint-deprecated/"},"frontmatter":{"title":"TSLint에서 ESLint로","tags":["typescript","tslint","eslint"]},"tableOfContents":"<ul>\n<li><a href=\"#tslint%EB%8A%94-2019%EB%85%84%EC%9D%B4-%EB%81%9D\">TSLint는 2019년이 끝</a></li>\n<li><a href=\"#migration\">Migration</a></li>\n<li><a href=\"#eslint\">ESLint</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></li>\n</ul>"}}},"staticQueryHashes":["253152893","3980716358"],"slicesMap":{}}