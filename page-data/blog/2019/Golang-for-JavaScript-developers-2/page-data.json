{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/Golang-for-JavaScript-developers-2/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"4a8c3290-666a-59eb-aa51-25bb0a4a66df","excerpt":"출처 Golang for JavaScript developers - Part 2 시작 만약 당신이 다른 프로그래밍 언어를 배우는 것에 대해 생각하고 있는 Javascript 개발자라면, Golang은 훌륭한 선택이다. 단순하며 많은 모멘텀과 좋은 성능 그리고 JavaScript…","html":"<h1>출처</h1>\n<p><a href=\"https://dev.to/deepu105/golang-for-javascript-developers-part-2-p3p\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Golang for JavaScript developers - Part 2</a></p>\n<h1>시작</h1>\n<p>만약 당신이 다른 프로그래밍 언어를 배우는 것에 대해 생각하고 있는 Javascript 개발자라면, Golang은 훌륭한 선택이다. 단순하며 많은 모멘텀과 좋은 성능 그리고 JavaScript와 일부 유사하다.</p>\n<p class=\"empty\" />\n<p>이 포스트는 언어를 비교하는 것이 아니고 그들이 매우 유사하다고 말하고 있다.\n이것은 JavaScript 개발자가 Golang을 빨리 파악할 수 있는 가이드이다.\nGo에는 우리가 다룰 자바스크립트와 완전히 다른 많은 측면들이 있다.</p>\n<p class=\"empty\" />\n<p>이 시리즈의 <a href=\"/blog/2019/Golang-for-JavaScript-developers-1/\">이전 편</a>에서, 우리는 JS와 Go 사이에 유사한 것들에 대해 배웠다. 배운 것들:</p>\n<ul>\n<li>Functions</li>\n<li>스코프<small>(Scope)</small></li>\n<li>흐름 제어<small>(Flow control)</small></li>\n<li>메모리 관리<small>(Memory management)</small></li>\n</ul>\n<p>이편에서는 JS와 Go의 차이점을 다룰 것이다.\n만약 이전 편을 읽어보지 않았다면 먼저 읽어보자.</p>\n<h1>더 다른 것들</h1>\n<p>보다시피 이 편에는 이전보다 더 많은 내용이 있지만 몇 가지 차이점들은 미묘해서 JavaScript 개발자는 이해하기 쉬울 것이다.</p>\n<h1>타입 &#x26; 변수<small>(Types &#x26; Variables)</small></h1>\n<p>이것은 주요 차이점 중 하나다. JavaScript는 동적이고 느슨하게 타입되고 Go는 정적이고 엄격하게 타입된다.</p>\n<h3>JavaScript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 가변</span>\nbar<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> bar<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'true'</span>\n\n<span class=\"token comment\">// 재할당</span>\nbar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">\"mars\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> bar<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'false'</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    message <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> foo <span class=\"token comment\">// foo의 복사본을 만들고 bar에 할당한다</span>\n\n<span class=\"token comment\">// bar만 변경</span>\n<span class=\"token comment\">// 참고 bar.message는 (* bar) .message의 약어</span>\nbar<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>message <span class=\"token operator\">==</span> bar<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"false\"</span>\n\n<span class=\"token comment\">// bar 재할당</span>\nbar <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    message <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mars\"</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>message <span class=\"token operator\">==</span> bar<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"false\"</span>\n\n<span class=\"token keyword\">var</span> barPointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>foo <span class=\"token comment\">// foo에 포인터를 할당</span>\n\n<span class=\"token comment\">// foo를 변경</span>\nbarPointer<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>message <span class=\"token operator\">==</span> barPointer<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"true\"</span>\n\n<span class=\"token comment\">// foo를 재할당</span>\n<span class=\"token operator\">*</span>barPointer <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    message <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"mars\"</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>message <span class=\"token operator\">==</span> bar<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"true\"</span></code></pre></div>\n<h3>유사점</h3>\n<ul>\n<li>키워드 <code class=\"language-text\">var</code>와 <code class=\"language-text\">const</code>의 이름 외에는 유사성이 없다. Go의 <code class=\"language-text\">var</code> 키워드는 동작 측면에서 JS의 <code class=\"language-text\">let</code> 키워드와 비슷하다.</li>\n<li><code class=\"language-text\">var a, foo, bar int</code>과 같이 여러 <code class=\"language-text\">var</code>를 함께 선언 할 수 있는데 JS와 유사하다. 그러나 Go에서는 <code class=\"language-text\">var a, foo, bar = true, 10, &quot;hello&quot;</code>와 같이 더 나아가서 초기화 할 수 있다. JS에서는 <code class=\"language-text\">var [a, foo, bar] = [true, 10, &quot;hello&quot;]</code>와 같은 유사한 효과에 대해 구조 분해 할당<small>(destructuring assignment)</small>을 할 수 있다.</li>\n</ul>\n<h3>차이점</h3>\n<ul>\n<li>Go는 컴파일 시 지정된 타입<small>(specified type)</small> 또는 타입 추론<small>(type inference)</small>으로 타입 정보를 필요로 한다.</li>\n<li>Go에는 value 타입(primitives, arrays, and structs), reference 타입(slice, map &#x26; channels) 그리고 포인터가 있다. JS는 value 타입(primitives)과 reference 타입(objects, arrays, functions)을 가지고 있다.</li>\n<li>Go에서 선언 한 후 변수 타입을 변경할 수 없다.</li>\n<li>변수 할당은 Go에서 단락 표현식<small>(short-circuit expressions)</small>을 사용할 수 없다.</li>\n<li><code class=\"language-text\">var</code>는 Go functions에 <code class=\"language-text\">: =</code>와 같은 간단한 문법이 있다.</li>\n<li>Go는 엄격하게 사용하지 않는 변수를 허용하지 않는다. 사용되지 않은 변수는 예약 된 문자 인 <code class=\"language-text\">_</code>로 이름을 지정해야한다.</li>\n<li>Go에서 <code class=\"language-text\">const</code>는 JavaScript와 같지 않다. Go에선 character, string, boolean 또는 numeric values과 같은 원시값<small>(primitives)</small>만 지정할 수 있다.</li>\n<li>Go의 Arrays는 고정 길이이므로 JS와 다르다. JS Arrays는 동적이므로 동적 길이를 가진 array의 slices 인 Go slices와 더 유사하다.</li>\n</ul>\n<h3>JavaScript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Rick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Morty\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// array의 끝에 추가한다.</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// array의 끝에서 제거한다.</span>\nelement <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">foo <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Rick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Morty\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// slice를 만든다</span>\n\n<span class=\"token comment\">// array의 끝에 추가한다.</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Beth\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// array의 끝에서 제거한다.</span>\nn <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 마지막 요소의 index</span>\nelement <span class=\"token operator\">:=</span> foo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 선택적으로 마지막 요소를 가져온다</span>\nfoo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span>     <span class=\"token comment\">// 마지막 요소를 제거한다</span></code></pre></div>\n<ul>\n<li>JavaScript에는 dictionaries와 sets로 사용할 수있는 Object, Map / Set 및 WeakMap / WeakSet이 있다. Go에는 JavaScript Object와 더 유사한 단순한 Map 만 이런 이유로 그 목적에 부합한다. 또한 Go에서 maps는 순서가 없다.<small>(not ordered)</small></li>\n</ul>\n<h3>Javascript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    key1<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    key2<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stringMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    key1<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n    key2<span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> dict <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> stringMap <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>가변성<small>(Mutability)</small></h1>\n<p>JS와 Go의 또 다른 주요 차이점은 변수 가변<small>(variable mutations)</small>이 처리되는 방식이다.\nJavaScript에서 모든 non-primitive 변수는 참조<small>(reference)</small>로 전달된다. 그리고 그 행동을 바꿀 방법은 없다. 반면에 Go에서는 slice, map &#x26; channels를 제외한 모든 것이 값으로 전달되고 그 대신 포인터를 변수에 명시적으로 전달하여 이를 변경하도록 선택할 수 있다.</p>\n<p class=\"empty\" />\n<p>Go에선 이 때문에 JS보다 가변성을 더 잘 제어 할 수 있다.</p>\n<p class=\"empty\" />\n<p>Javascript에서 또 다른 주목할만한 차이점은 Go에서는 불가능한 <code class=\"language-text\">const</code> 키워드를 사용하여 변수의 재할당을 방지 할 수 있다.</p>\n<p class=\"empty\" />\n<p>위의 섹션에서 약간의 변경 가능성이 있음을 보았다. 좀 더 살펴보자.</p>\n<h3>JavaScript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    msg<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arg<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'world'</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Foo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    msg <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> tryMutate <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arg<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">tryMutate</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 'hello'</span>\n\n<span class=\"token keyword\">var</span> mutate <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg <span class=\"token operator\">*</span>Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arg<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>foo<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 'world'</span></code></pre></div>\n<h1>에러 처리<small>(Error handling)</small></h1>\n<p>에러 처리 측면에서 Go와 JS 사이의 유일한 유사점은 에러도 단지 값 타입<small>(value types)</small>이라는 것이다.\n두 언어 다 모두 에러를 값으로 전달할 수 있다.</p>\n<p class=\"empty\" />\n<p>위의 에러 처리 외에도 두 가지 모두 상당히 다르다.\nJavaScript에서 우리는 둘 중 하나를 할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">try / catch</code> 메커니즘을 사용하여 <code class=\"language-text\">async / await</code>를 쓰는 동기 함수<small>(synchronous functions)</small> 및 비동기 함수<small>(asynchronous functions)</small>에서 에러를 파악</li>\n<li>콜백 함수<small>(callback functions)</small>에 전달하거나 비동기 함수에 대해 promises를 사용하여 에러를 처리</li>\n</ul>\n<p>Go에서는 <code class=\"language-text\">try / catch</code> 메커니즘이 없으며 에러를 처리하는 유일한 방법은 에러를 function에서 value로 반환하거나 <code class=\"language-text\">panic</code>으로 실행을 중지하는 것이다.\n이것은 Go에서 에러 처리를 매우 장황하게 만들고 Go에서 유명한 <code class=\"language-text\">if err != nil</code> 문을 자주 보게한다.</p>\n<h3>JavaScript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">errorCausingFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">errorCausingFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// prints</span>\n<span class=\"token comment\">// Error: Error: Oops</span>\n<span class=\"token comment\">// Done</span>\n\n<span class=\"token comment\">// or the async way</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">errorCausingFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">asyncFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">:)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// prints</span>\n<span class=\"token comment\">// Error: Error: Oops</span>\n<span class=\"token comment\">// Done</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> errorCausingFunction <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nerr <span class=\"token operator\">:=</span> <span class=\"token function\">errorCausingFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 마지막에 가장 가깝지만, enclosing function의 끝날 때만 실행</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: %s\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// prints</span>\n<span class=\"token comment\">// Error: Oops</span>\n<span class=\"token comment\">// Done</span></code></pre></div>\n<h1>상속 대신 합성<small>(Composition instead of inheritance)</small></h1>\n<p>JavaScript에서 상속<small>(inheritance)</small>을 사용하여 동작을 확장하거나 공유 할 수 있으며 Go는 합성<small>(composition)</small>을 대신 선택한다.\nJavaScript에는 프로토 타입 레벨 상속이 있고 언어의 유연성으로 인해 합성이 가능하다.</p>\n<h3>JavaScript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    species<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">species</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> species<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">species</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>species<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"human\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> tom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tom<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tom<span class=\"token punctuation\">.</span>species<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'Tom is a human'</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> IAnimal <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Species</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> IPerson <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    IAnimal\n    <span class=\"token comment\">// IAnimal 인터페이스 합성</span>\n    <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Animal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    species <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Animal\n    <span class=\"token comment\">// Animal struct의 합성</span>\n    name   <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Person<span class=\"token punctuation\">)</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Animal<span class=\"token punctuation\">)</span> <span class=\"token function\">Species</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>species\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPerson</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> IPerson <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Person<span class=\"token punctuation\">{</span>Animal<span class=\"token punctuation\">{</span><span class=\"token string\">\"human\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> tom IPerson <span class=\"token operator\">=</span> <span class=\"token function\">NewPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s is a %s\\n\"</span><span class=\"token punctuation\">,</span> tom<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tom<span class=\"token punctuation\">.</span><span class=\"token function\">Species</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 'Tom is a human'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>동시성<small>(Concurrency)</small></h1>\n<p>동시성<small>(Concurrency)</small>은 Golang의 가장 중요한 기능 중 하나이며 빛나는 부분이다.</p>\n<p class=\"empty\" />\n<p><strong>JavaScript</strong>는 기술적으로 단일 스레드이므로 실제 기본 동시성<small>(real native concurrency)</small>이 없다.\nservice workers의 추가는 병렬 처리에 대한 약간의 지원을 제공하지만 여전히 <code class=\"language-text\">goroutines</code>의 성능과 단순성에 필적할 수는 없다.\n동시성은 JavaScript가 크게 지원하는 비동기식<small>(asynchronous)</small> 또는 반응형 프로그래밍<small>(reactive programming)</small>과 같지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 순차적</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchSequential</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://google.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://twitter.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 동시적이지만 다중 스레드 아님</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchConcurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://google.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://twitter.com/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반면에 <strong>Go</strong>는 동시성과 병렬 처리에 완전히 맞춰져 있다.\n개념은 <code class=\"language-text\">goroutines</code>과 channels를 사용하여 언어에 내장되어 있다.\nGo에서 비동기 프로그래밍을 수행하는 것도 가능하지만 JS와 동등한 것 보다 더 장황하게 보인다.\n이것은 goroutines를 사용하여 API를 동기화로 작성하고 비동기 방식으로 사용할 수 있다는 것을 의미하며 Go 커뮤니티는 일반적으로 비동기 API 작성을 반대한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 순차적</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetchSequential</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    respA<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://google.com/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> respA<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>respA<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n    respB<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://twitter.com/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> respB<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>respB<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 동시 및 다중 스레드</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetchConcurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    resChanA <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://google.com/\"</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">&lt;-</span> res\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>resChanA<span class=\"token punctuation\">)</span>\n\n    respA <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>resChanA\n    <span class=\"token keyword\">defer</span> respA<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>respA<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n\n    resChanB <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">chan</span> <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://twitter.com/\"</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">&lt;-</span> res\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>resChanB<span class=\"token punctuation\">)</span>\n\n    respB <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>resChanB\n    <span class=\"token keyword\">defer</span> respB<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>respB<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>컴파일<small>(Compilation)</small></h1>\n<p><strong>JavaScript</strong>는 해석이 되며<small>(interpreted)</small> 컴파일은 되지<small>(compiled)</small> 않는다.\n일부 JS 엔진은 JIT 컴파일을 사용하지만 개발자에게는 JavaScript를 실행하기 위해 컴파일 할 필요가 없으므로 중요하지 않다.\nTypeScript 또는 Babel을 사용한 코드 변환<small>(Transpiling)</small>은 계산되지 않는다 😉</p>\n<p class=\"empty\" />\n<p><strong>Go</strong>는 컴파일되며 그 때문에 compile-time type의 안전성과 어느 정도의 메모리 안전성을 제공한다.</p>\n<h1>패러다임</h1>\n<p><strong>JavaScript</strong>는 주로 객체 지향적이지만 언어의 유연성으로 때문에 명령형<small>(imperative)</small> 또는 함수형-스타일<small>(functional-style)</small> 코드를 쉽게 작성할 수 있다.\n이 언어는 상당히 자유로운 형태이며 실제로 아무 것도 강요하지 않는다.\n이것은 편향적<small>(opinionated)</small>이지 않으며 즉시 사용 가능한 어떤 틀<small>(tooling)</small>도 제공하지 않는다.\n개발자는 그/그녀 자신의 틀<small>(tooling)</small>을 설정할 필요가 있을 것이다.</p>\n<p class=\"empty\" />\n<p><strong>Go</strong>는 기본적으로 명령형이며 약간의 OOP<small>(Object Oriented Programming 객체 지향 프로그래밍)</small> 및 함수형을 수행 할 수 있지만, JavaScript에서처럼 쉽지는 않다.\n이 언어는 상당히 엄격하고 편향적이며<small>(opinionated)</small> 코드 스타일 및 포맷팅과 같은 것을 시행한다.\n또한 테스팅, 포맷팅, 빌딩 등을 위한 내장 기능도 제공한다.</p>\n<h1>결론</h1>\n<p>어떤 사람이 시리즈의 이전 편 댓글에서 JS 개발자가 가능한 모든 옵션 중에서 왜 Go를 선택해야 하는지 물었다.\n내 생각에, JS는 완벽한 언어가 아니기 때문에 다른 언어를 배우면 JS 개발자가 JS를 더 실용적으로 사용할 수 있게 큰 도움이 될 것이고 기본적인 프로그래밍 개념에 대한 그녀/그의 지식을 강화하는 데도 도움이 될 것이다.\n물론 Rust, Go, Haskel, Kotlin 등과 같은 많은 옵션들이 있지만, 나는 Go가 사용 가능한 모든 옵션 중에서 가장 단순하고 널리 채택되어 시작하기에 좋은 것이라고 생각한다.\n나의 두번째 선택은 Kotlin이나 Rust가 될 것이다.</p>\n<h1>참조:</h1>\n<ul>\n<li><a href=\"http://www.pazams.com/Go-for-Javascript-Developers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.pazams.com/Go-for-Javascript-Developers/</a></li>\n<li><a href=\"https://github.com/miguelmota/golang-for-nodejs-developers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/miguelmota/golang-for-nodejs-developers</a></li>\n</ul>\n<h1>마치며</h1>\n<p>부족한 영어 실력이나마 매끄럽게 번역을 하기 위해 직역 및 의역을 다수 사용했다.</p>\n<p><small>(문장의 해석이 오역이거나 수정이 필요한 점이 있다면 언제든 알려주시면 반영하겠습니다.)</small></p>\n<p class=\"empty\" />\n<ul>\n<li><strong>function</strong>은 함수라 표기하지 않고 영문 그대로 표기했다.</li>\n</ul>","frontmatter":{"title":"JavaScript 개발자를 위한 Golang - 2부(번역)","date":"December 13, 2019","description":"Golang for JavaScript developers - Part 2","tags":"javascript, go, translation"}}},"pageContext":{"slug":"/blog/2019/Golang-for-JavaScript-developers-2/","previous":{"fields":{"slug":"/blog/2019/Golang-for-JavaScript-developers-1/"},"frontmatter":{"title":"JavaScript 개발자를 위한 Golang - 1부(번역)"}},"next":{"fields":{"slug":"/blog/2020/About-Functional-Programming/"},"frontmatter":{"title":"함수형 프로그래밍"}}}},"staticQueryHashes":["1137390604","3980716358"]}