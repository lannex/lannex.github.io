{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2020/70-JavaScript-Interview-Questions-4/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"2f51f3e2-02e1-5284-8ad7-ae114c5113aa","excerpt":"출처 70 JavaScript Interview Questions 시작하며 글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다. 70 자바스크립트 인터뷰 질문 - 1부 7…","html":"<h1>출처</h1>\n<p><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">70 JavaScript Interview Questions</a></p>\n<h1>시작하며</h1>\n<p>글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다.</p>\n<ul>\n<li><a href=\"../70-JavaScript-Interview-Questions-1/\">70 자바스크립트 인터뷰 질문 - 1부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-2/\">70 자바스크립트 인터뷰 질문 - 2부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-3/\">70 자바스크립트 인터뷰 질문 - 3부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-4/\">70 자바스크립트 인터뷰 질문 - 4부</a></li>\n</ul>\n<h1>Hi Guys Good Day and a Happy New Year 🎆🎆🎆!</h1>\n<p>이 글은 긴 내용이므로 한두 시환간 동안 나와 함께하시길 바랍니다.\n모든 질문에 대한 답변에는 질문 목록으로 돌아가는 화살표 ↑ 링크가 있어서 스크롤 하는 시간을 낭비하지 않아도 됩니다.</p>\n<h1>질문 <a name=\"0\"></a></h1>\n<ul>\n<li><a href=\"#55\">55. Implicit와 Explicit Coercion의 차이점은 무엇인가?</a></li>\n<li><a href=\"#56\">56. NaN이란 무엇인가? 값이 NaN인지 확인하는 방법은 무엇인가?</a></li>\n<li><a href=\"#57\">57. 어떻게 값이 Array인지 확인하는가?</a></li>\n<li><a href=\"#58\">58. % 또는 모듈로 연산자를 사용하지 않고 number가 짝수인지 확인하는 방법은 무엇인가?</a></li>\n<li><a href=\"#59\">59. 객체에 특정 속성이 있는지는 어떻게 확안하는가?</a></li>\n<li><a href=\"#60\">60. AJAX 란 무엇인가?</a></li>\n<li><a href=\"#61\">61. JavaScript로 객체를 만드는 방법은 무엇인가?</a></li>\n<li><a href=\"#62\">62. Object.seal과 Object.freeze 메서드의 차이점은 무엇인가?</a></li>\n<li><a href=\"#63\">63. 객체에서 in 연산자와 hasOwnProperty 메서드의 차이점은 무엇인가?</a></li>\n<li><a href=\"#64\">64. JavasScript에서 어떻게 비동기 코드를 처리하는가?</a></li>\n<li><a href=\"#65\">65. 함수 표현식과 함수 선언의 차이점은 무엇인가?</a></li>\n<li><a href=\"#66\">66. 함수는 몇 가지 방법으로 호출 할 수 있는가?</a></li>\n<li><a href=\"#67\">67. Memoization란 무엇이며 용도는 무엇인가?</a></li>\n<li><a href=\"#68\">68. Memoization helper 함수를 구현하시오.</a></li>\n<li><a href=\"#69\">69. typeof null은 왜 객체를 리턴하며 어떻게 값이 null인지 확인하는가?</a></li>\n<li><a href=\"#70\">70. new 키워드는 무엇을 하는가?</a></li>\n</ul>\n<h1>55. <strong>암묵적<small>(Implicit)</small></strong> 과 <strong>명시적<small>(Explicit)</small></strong> 강제변환<small>(Coercion)</small>의 차이점은 무엇인가? <a name=\"55\"></a></h1>\n<p><a href=\"#0\">↑</a>\n**암묵적 강제변환<small>(Implicit Coercion)</small>**는 프로그래머가 직접 또는 손으로 하지 않고도 값을 다른 타입으로 변환하는 방법입니다.</p>\n<p>아래에 예제가 있다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span></code></pre></div>\n<p>첫번째 <code class=\"language-text\">console.log</code>문은 <code class=\"language-text\">16</code>을 로그로 기록합니다.\n다른 언어에서는 컴파일 타임 에러를 던집니다.\n하지만 <strong>JavaScript</strong>에서 <code class=\"language-text\">1</code>은 문자열로 변환된 뒤 <code class=\"language-text\">+</code> 연산자와 연결됩니다.\n우리는 아무것도하지 않았지만 <strong>JavaScript</strong>를 통해 자동으로 변환되었습니다.</p>\n<p>두번째 <code class=\"language-text\">console.log</code>문은 <code class=\"language-text\">1</code>을 로그로 기록하는데 <code class=\"language-text\">false</code>는 <code class=\"language-text\">0</code>이 되고 <code class=\"language-text\">true</code>는 <code class=\"language-text\">1</code>이 되는 <code class=\"language-text\">boolean</code>값이라 결과가 <code class=\"language-text\">1</code>이 됩니다.</p>\n<p>세번째 <code class=\"language-text\">console.log</code>문은 <code class=\"language-text\">12</code>를 로그로 기록하고 <code class=\"language-text\">6 * 2</code>를 곱하기 전에 <code class=\"language-text\">'2'</code>를 숫자로 변환하므로 결과는 <code class=\"language-text\">12</code>입니다.</p>\n<p><a href=\"https://delapouite.com/ramblings/javascript-coercion-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Coercion Rules</a></p>\n<p>반면에 **명시적 강제변환<small>(Explicit Coercion)</small>**은 값을 프로그래머가 다른 타입으로 변환하는 명시적(직접) 실행 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예제에서 <code class=\"language-text\">parseInt</code> 함수를 사용하여 <code class=\"language-text\">'6'</code>을 <code class=\"language-text\">number</code>로 변환한 후 <code class=\"language-text\">+</code>연산자를 써서 <code class=\"language-text\">1</code>과 <code class=\"language-text\">6</code>을 더합니다.</p>\n<h1>56. <code class=\"language-text\">NaN</code>이란 무엇인가? 값이 <code class=\"language-text\">NaN</code>인지 확인하는 방법은 무엇인가? <a name=\"56\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">NaN</code>은 <strong>“숫자가 아님”</strong> 이라는 뜻으로 number를 number가 아닌 값으로 변환이나 수행하는 작업을 통해 <code class=\"language-text\">NaN</code> 결과 값을 받는데 이러한 JavaScript의 값을 의미합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p>JavaScript는 값이 <code class=\"language-text\">isNaN</code>값인지 테스트하는 내장 메서드 <code class=\"language-text\">isNaN</code>이 있습니다.\n그렇지만 이 함수에는 이상한 동작이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span></code></pre></div>\n<p>전달하는 값이 <code class=\"language-text\">NaN</code>이 아니더라도 모든 <code class=\"language-text\">console.log</code> 문은 <code class=\"language-text\">true</code>를 리턴합니다.</p>\n<p><strong>ES6</strong> 또는 <strong>ECMAScript 2015</strong>에서 <code class=\"language-text\">Number.isNaN</code> 메서드를 사용하는 것을 권장합니다.\n왜냐하면 실제로 이것은 정말 <code class=\"language-text\">NaN</code>인지 값을 확인합니다.\n또는 JavaScript에서 <code class=\"language-text\">NaN</code>은 그 자체와 같지 않은 유일한 값이기 때문에 이 문제를 확인하는 helper 함수를 만들 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkIfNaN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>57. 어떻게 값이 <strong>Array</strong>인지 확인하는가? <a name=\"57\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">Array</code> 글로벌 객체에서 사용 가능한 <code class=\"language-text\">Array.isArray</code> 메서드를 사용해서 값이 <code class=\"language-text\">Array</code>인지 확인할 수 있습니다.\n이 메서드는 매개 변수가 <code class=\"language-text\">Array</code> 인 경우 <code class=\"language-text\">true</code>를, 그렇지 않으면 <code class=\"language-text\">false</code>를 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span></code></pre></div>\n<p>개발 환경이 이 메서드를 지원하지 않으면 polyfill 구현해서 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>58. <code class=\"language-text\">%</code> 또는 모듈로 연산자를 사용하지 않고 number가 짝수인지 확인하는 방법은 무엇인가? <a name=\"58\"></a></h1>\n<p><a href=\"#0\">↑</a>\n이 문제에 <strong>비트 AND</strong> <code class=\"language-text\">&amp;</code> 연산자를 사용할 수 있습니다.\n<code class=\"language-text\">&amp;</code>는 피연산자에서 작동하여 이진수<small>(binary values)</small>로 처리하고 <strong>AND 연산</strong>을 수행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이진수에서 <code class=\"language-text\">0</code>은 <strong>000</strong>입니다.\n이진수에서 <code class=\"language-text\">1</code>은 <strong>001</strong>입니다.\n이진수에서 <code class=\"language-text\">2</code>은 <strong>010</strong>입니다.\n이진수에서 <code class=\"language-text\">3</code>은 <strong>011</strong>입니다.\n이진수에서 <code class=\"language-text\">4</code>은 <strong>100</strong>입니다.\n이진수에서 <code class=\"language-text\">5</code>은 <strong>101</strong>입니다.\n이진수에서 <code class=\"language-text\">6</code>은 <strong>110</strong>입니다.\n이진수에서 <code class=\"language-text\">7</code>은 <strong>111</strong>입니다.\n등등…</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>b</th>\n<th>a &#x26; b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>따라서 <code class=\"language-text\">console.log</code>를 확인하면 <code class=\"language-text\">5 &amp; 1</code> 표현식은 <code class=\"language-text\">1</code>을 리턴합니다.\n먼저, <code class=\"language-text\">&amp;</code> 연산자는 두 숫자를 이진수로 변환합니다.\n그래서 <code class=\"language-text\">5</code>는 <strong>101</strong>로, <code class=\"language-text\">1</code>은 <strong>001</strong>로 바뀝니다.</p>\n<p>그런 다음 비트 AND 연산자를 사용해서 모든 비트 <strong>(0과 1)</strong> 를 비교합니다.\n<strong>101</strong> <code class=\"language-text\">&amp;</code> <strong>001</strong>.\n표에서 볼 수 있듯이 <code class=\"language-text\">a</code> AND <code class=\"language-text\">b</code>가 1인 경우 결과는 1일 것입니다.</p>\n<table>\n<thead>\n<tr>\n<th>101 &#x26; 001</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n</tr>\n<tr>\n<td>001</td>\n</tr>\n<tr>\n<td>001</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>먼저 가장 왼쪽의 <code class=\"language-text\">1 &amp; 0</code>을 비교하고 결과는 <code class=\"language-text\">0</code>이 됩니다.</li>\n<li>그 다음 중간 비트 <code class=\"language-text\">0 &amp; 0</code>을 비교하고 결과는 <code class=\"language-text\">0</code>이 됩니다.</li>\n<li>그 다음 마지막 비트 <code class=\"language-text\">1 &amp; 1</code>을 비교하고 결과는 <code class=\"language-text\">1</code>이 됩니다.</li>\n<li>그 다음 이진 결과 <code class=\"language-text\">001</code>은 10 진수로 변환되어 <code class=\"language-text\">1</code>이 됩니다.</li>\n</ul>\n<p>우리가 <code class=\"language-text\">console.log</code>를 확인하면 <code class=\"language-text\">4 &amp; 1</code> 표현식은 <code class=\"language-text\">0</code>을 리턴 할 것입니다.\n<code class=\"language-text\">4</code>의 마지막 비트를 아는 것은 <code class=\"language-text\">0</code>이고 <code class=\"language-text\">0 &amp; 1</code>은 <code class=\"language-text\">0</code>이 됩니다.\n이해하기 어려울때는 <strong>재귀 함수</strong>를 사용하여 이 문제를 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isEven</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>59. 객체에 특정 속성이 있는지는 어떻게 확안하는가? <a name=\"59\"></a></h1>\n<p><a href=\"#0\">↑</a>\n속성이 객체에 존재하는지 확인하는 세 가지 방법이 있습니다.</p>\n<p>첫번째로 <code class=\"language-text\">in</code> 연산자를 사용하는 것입니다.\n<code class=\"language-text\">in</code> 연산자를 사용하는 문법은 <code class=\"language-text\">propertyname in object</code>와 같습니다.\n속성이 존재하면 <code class=\"language-text\">true</code>를, 그렇지 않으면 <code class=\"language-text\">false</code>를 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"prop\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"bwahahah\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"prop2\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"hweasa\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true. \"prop\"속성이 \"o\"객체에 있음을 나타냄</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false. \"prop\"속성이 \"o\"객체에 없음을 나타냄</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop1\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>두번째로, 객체에서 <code class=\"language-text\">hasOwnProperty</code> 메서드를 사용하는 것입니다.\n이 방법은 JavaScript의 모든 객체에서 사용할 수 있습니다.\n속성이 존재하면 <code class=\"language-text\">true</code>를, 그렇지 않으면 <code class=\"language-text\">false</code>를 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 첫 번째 예제의 o 객체를 사용합니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>세번째로, 대괄호 표기법 <code class=\"language-text\">obj[\"prop\"]</code>를 사용하는 것입니다.\n속성이 존재하면 해당 속성의 값을 리턴하고 그렇지 않으면 <code class=\"language-text\">undefined</code>를 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 첫 번째 예제의 o 객체를 사용합니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">\"prop\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bwahahah\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span><span class=\"token string\">\"prop1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<h1>60. AJAX 란 무엇인가? <a name=\"60\"></a></h1>\n<p><a href=\"#0\">↑</a>\nAJAX는 <code class=\"language-text\">비동기 JavaScript 및 XML</code>을 말합니다.\n비동기식으로 데이터를 표시하는데 사용되는 관련 기술 그룹입니다.\n이말은 즉, 웹 페이지를 다시 로드하지 않고도 서버로 데이터를 보내고 서버에서 데이터를 가져올 수 있다는 것입니다.</p>\n<p><strong>AJAX</strong>에 대한 기술 사용</p>\n<ul>\n<li>HTML - 웹 페이지 구조</li>\n<li>CSS - 웹 페이지 스타일</li>\n<li>JavaScript - 웹 페이지의 동작 및 DOM 업데이트</li>\n<li>XMLHttpRequest API - 서버에서 데이터를 보내고 되찾아오는데 사용</li>\n<li>PHP, Python, Nodejs - 일부 서버 사이드 언어</li>\n</ul>\n<h1>61. JavaScript로 객체를 만드는 방법은 무엇인가? <a name=\"61\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>객체 리터럴</strong> 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  o<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"Hi, I'm Mark\"</span></code></pre></div>\n<p><strong>Constructor</strong> 함수 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mark <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmark<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"Hi, I'm Mark\"</span></code></pre></div>\n<p><strong>Object.create</strong> 메서드 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"o\"의 프로토 타입을 \"n\"으로 설정</span>\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\no<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs \"Hi, I'm Mark\"</span></code></pre></div>\n<h1>62. <code class=\"language-text\">Object.seal</code>과 <code class=\"language-text\">Object.freeze</code> 메서드의 차이점은 무엇인가? <a name=\"62\"></a></h1>\n<p><a href=\"#0\">↑</a>\n두 메서드의 차이점은 <code class=\"language-text\">Object.freeze</code>를 객체에 사용할 때, 객체 속성은 불변이 됩니다. 즉, 해당되는 속성 값을 변경하거나 수정할 수 없습니다.\n반면에 <code class=\"language-text\">Object.seal</code> 메서드에서 기존 속성을 변경할 수 있습니다.</p>\n<h1>63. 객체에서 <code class=\"language-text\">in</code> 연산자와 <code class=\"language-text\">hasOwnProperty</code> 메서드의 차이점은 무엇인가? <a name=\"63\"></a></h1>\n<p><a href=\"#0\">↑</a>\n이 두 기능을 모두 알고 있으므로 객체에 속성이 있는지 확인하십시오. 이것은 <code class=\"language-text\">true</code> false를 리턴합니다.\n두 기능의 차이점으로는 <code class=\"language-text\">in</code> 연산자는 현재 객체에서 속성을 못 찾을 경우 <strong>객체의 프로토 타입 체인</strong>을 검사합니다.\n반면에 <code class=\"language-text\">hasOwnProperty</code> 메서드는 <strong>프로토 타입 체인</strong>을 무시하고 현재 객체에 속성이 존재하는지만 확인합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 이전 질문의 객체를 사용</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true. 이 객체의 프로토 타입인 Object.prototype에서 toString 메서드를 사용할 수 있음</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false. 객체의 프로토 타입을 확인하지 않음</span></code></pre></div>\n<h1>64. JavasScript에서 어떻게 비동기 코드를 처리하는가? <a name=\"64\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<ul>\n<li>Callbacks</li>\n<li>Promises</li>\n<li>async/await</li>\n<li><a href=\"https://caolan.github.io/async/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">async.js</a>, <a href=\"http://bluebirdjs.com/docs/getting-started.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bluebird</a>, <a href=\"https://documentup.com/kriskowal/q/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">q</a>, <a href=\"https://www.npmjs.com/package/co\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">co</a>와 같은 라이브러리</li>\n</ul>\n<h1>65. 함수 표현식<small>(function expression)</small>과 함수 선언<small>(function declaration)</small>의 차이점은 무엇인가? <a name=\"65\"></a></h1>\n<p><a href=\"#0\">↑</a>\n아래와 같은 예제가 있다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">hoistedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">notHoistedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hoistedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am hoisted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">notHoistedFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I will not be hoisted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">notHoistedFunc</code> 호출은 에러를 던지지만 <code class=\"language-text\">hoistedFunc</code> 호출은 그렇지 않습니다.\n<code class=\"language-text\">hoistedFunc</code>은 호이스팅되고 반면에 <code class=\"language-text\">notHoistedFunc</code>은 호이스팅 되지 않기 때문입니다.\n<a href=\"../70-JavaScript-Interview-Questions-1/\">호이스팅에 관한 질문</a></p>\n<h1>66. 함수는 몇 가지 방법으로 호출 할 수 있는가? <a name=\"66\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>JavaScript</strong>에서 함수를 호출하는 방법에는 4가지가 있습니다.\n<strong>호출</strong>은 this 또는 해당 함수의 “소유자” 객체 값을 결정합니다.</p>\n<ul>\n<li><strong>함수로 호출</strong> - 함수가 메서드, constructor 또는 <code class=\"language-text\">apply</code>, <code class=\"language-text\">call</code> 메서드와 함께 호출되지 않은 경우 함수로 호출됩니다. 이 함수의 “owner” 객체는 <code class=\"language-text\">window</code> 객체가 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//Global 스코프</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로그는 \"window\" 객체와 6을 리턴</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로그는 \"window\" 객체</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>메서드로 호출 - 객체의 속성에 함수 값이 있으면 이를 <strong>메서드</strong>라고 합니다. 해당 <strong>메서드</strong>가 <em>호출</em>되면 <code class=\"language-text\">this</code> 값이 해당 객체가 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> details <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">:</span> <span class=\"token string\">\"Marko\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndetails<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Marko 리턴</span>\n<span class=\"token comment\">// \"getName\"메서드 내의 \"this\"값은 \"details\"객체</span></code></pre></div>\n<ul>\n<li><strong>constructor로 호출</strong> - 함수가 <code class=\"language-text\">new</code> 키워드로 호출된 경우 이를 함수 생성자<small>(constructor)</small>라고 합니다. 빈 객체가 만들어지고 <code class=\"language-text\">this</code>는 해당 객체를 가리킵니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> yearHired</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 빈 객체를 만듭니다 {}</span>\n  <span class=\"token comment\">// 그런 다음 빈 객체를 \"this\"키워드에 할당합니다.</span>\n  <span class=\"token comment\">// this = {};</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearHired <span class=\"token operator\">=</span> yearHired<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Employee.prototype에서 상속</span>\n  <span class=\"token comment\">// 명시적인 return 문이 지정되지 않은 경우 \"this\"값을 암시적으로 리턴합니다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> emp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko Polo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2017</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong><code class=\"language-text\">apply</code> 및 <code class=\"language-text\">call</code> 메서드를 사용한 호출</strong> - <code class=\"language-text\">this</code> 값이나 함수의 “owner”객체를 <em>명시적</em>으로 지정하려면 이런 메서드들을 사용할 수 있습니다. 이러한 방법은 모든 함수에 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"reduceAdd\"함수 내의 \"this\"객체는 \"obj1\"</span>\n<span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"reduceAdd\"함수 내의 \"this\"객체는 \"obj2\"</span></code></pre></div>\n<h1>67. Memoization란 무엇이며 용도는 무엇인가? <a name=\"67\"></a></h1>\n<p><a href=\"#0\">↑</a>\nMemoization은 이전에 계산된 결과 또는 값을 <strong>기억할 수 있는</strong> 함수를 만드는 프로세스입니다.\nMemoization 함수를 사용하는 것은 같은 인수로 마지막 계산에서 이미 수행된 경우 해당 함수의 계산을 피하는 것입니다.\n이렇게하면 시간이 절약되지만 이전 결과를 저장하기 위해 더 많은 메모리를 소비한다는 단점이 있습니다.</p>\n<h1>68. Memoization helper 함수를 구현하시오. <a name=\"68\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cached'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cache<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">not cached</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> toUpper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> toUpperMemoized <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>toUpper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">toUpperMemoized</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">toUpperMemoized</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 memoize helper 함수는 하나의 인수를 허용하는 함수에서만 작동합니다.\n여러 인수를 허용하는 memoize helper 기능을 만들어야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cached'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cache<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">not cached</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeFullName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fName<span class=\"token punctuation\">,</span> lName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reduceAdd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers<span class=\"token punctuation\">,</span> startingValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">,</span> startingValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> memoizedMakeFullName <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>makeFullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> memoizedReduceAdd <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>reduceAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">memoizedMakeFullName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Polo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">memoizedMakeFullName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Polo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">memoizedReduceAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">memoizedReduceAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>69. <code class=\"language-text\">typeof null</code>은 왜 객체를 리턴하며 어떻게 값이 <code class=\"language-text\">null</code>인지 확인하는가? <a name=\"69\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">typeof null == 'object'</code>는 항상 true를 리턴합니다.\n왜냐하면 이것은 JavaScript가 탄생 한 이후로 <code class=\"language-text\">null</code>을 구현했기 때문입니다.\n<code class=\"language-text\">typeof null == 'object'</code>를 <code class=\"language-text\">typeof null == 'null'</code>로 변경하는 수정이 제안되었습니다.\n그러나 더 많은 버그로 이어질 수 있기 때문에 <a href=\"https://web.archive.org/web/20160331031419/http://wiki.ecmascript.org:80/doku.php?id=harmony:typeof_null\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">거부</a>되었습니다.</p>\n<p><code class=\"language-text\">===</code> 또는 <strong>엄격한 항등 연산자</strong>를 사용하여 값이 <code class=\"language-text\">null</code>인지 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">function</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h1>70. <code class=\"language-text\">new</code> 키워드는 무엇을 하는가? <a name=\"70\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">new</code> 키워드는 <code class=\"language-text\">constructor</code> 함수와 함께 사용되어 JavaScript로 객체를 만듭니다.</p>\n<p>아래에 예제 코드가 있다고 가정합시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> yearHired</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearHired <span class=\"token operator\">=</span> yearHired<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> emp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Marko Polo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2017</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">new</code> 키워드는 4개의 일을 합니다.</p>\n<ul>\n<li>빈 객체를 만듭니다.</li>\n<li>빈 객체를 <code class=\"language-text\">this</code> 값에 할당합니다.</li>\n<li>함수는 <code class=\"language-text\">functionName.prototype</code>에서 상속됩니다.</li>\n<li>명시적인 <code class=\"language-text\">return</code> 문이 사용되지 않으면 <code class=\"language-text\">this</code>를 리턴합니다.</li>\n</ul>\n<p>위 코드에서, 먼저 빈 객체 <code class=\"language-text\">{}</code>를 만듭니다.\n그런 다음 <code class=\"language-text\">this</code>값은 빈 객체 <code class=\"language-text\">this = {}</code>가 됩니다.\n그리고 <code class=\"language-text\">this</code> 객체에 속성을 추가합니다.\n명시적인 <code class=\"language-text\">return</code> 서술문이 없기 때문에 자동으로 <code class=\"language-text\">this</code>를 리턴합니다.</p>\n<h1>Thanks guys for reading this post.</h1>","frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 4부(번역)","date":"February 08, 2020","description":"70 JavaScript Interview Questions","tags":"javascript, interview, translation"}}},"pageContext":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-4/","previous":{"fields":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-3/"},"frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 3부(번역)"}},"next":{"fields":{"slug":"/blog/2020/redux-mobx/"},"frontmatter":{"title":"Redux와 Mobx 어떤 것을 쓸까?"}}}},"staticQueryHashes":["1137390604","3980716358"]}