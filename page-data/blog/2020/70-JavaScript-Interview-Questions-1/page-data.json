{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2020/70-JavaScript-Interview-Questions-1/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"6914ab62-238a-52c7-82ed-b70c02a740d9","excerpt":"출처 70 JavaScript Interview Questions 시작하며 글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다. 70 자바스크립트 인터뷰 질문 - 1부 7…","html":"<h1>출처</h1>\n<p><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">70 JavaScript Interview Questions</a></p>\n<h1>시작하며</h1>\n<p>글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다.</p>\n<ul>\n<li><a href=\"../70-JavaScript-Interview-Questions-1/\">70 자바스크립트 인터뷰 질문 - 1부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-2/\">70 자바스크립트 인터뷰 질문 - 2부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-3/\">70 자바스크립트 인터뷰 질문 - 3부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-4/\">70 자바스크립트 인터뷰 질문 - 4부</a></li>\n</ul>\n<h1>Hi Guys Good Day and a Happy New Year 🎆🎆🎆!</h1>\n<p>이 글은 긴 내용이므로 한두 시간 동안 나와 함께하시길 바랍니다.\n모든 질문에 대한 답변에는 질문 목록으로 돌아가는 화살표 ↑ 링크가 있어서 스크롤 하는 시간을 낭비하지 않아도 됩니다.</p>\n<h1>질문 <a name=\"0\"></a></h1>\n<ul>\n<li><a href=\"#1\">1. undefined 와 null 은 무엇이 다른가?</a></li>\n<li><a href=\"#2\">2. &#x26;&#x26; 연산자는 무엇을 하는가?</a></li>\n<li><a href=\"#3\">3. || 연산자는 무엇을 하는가?</a></li>\n<li><a href=\"#4\">4. string을 number로 변환하는 가장 빠른 방법은 + 또는 단항 더하기 연산자를 사용하는 것인가?</a></li>\n<li><a href=\"#5\">5. DOM 이란 무엇인가?</a></li>\n<li><a href=\"#6\">6. Event Propagation란 무엇인가?</a></li>\n<li><a href=\"#7\">7. Event Bubbling이란 무엇인가?</a></li>\n<li><a href=\"#8\">8. Event Capturing이란 무엇인가?</a></li>\n<li><a href=\"#9\">9. event.preventDefault()와 event.stopPropagation() 메서드의 차이점은 무엇인가?</a></li>\n<li><a href=\"#10\">10. event.preventDefault() 메서드가 element에 사용되었는지 어떻게 확인하는가?</a></li>\n<li><a href=\"#11\">11. 이 코드에서 obj.someprop.x가 에러 발생하는 이유는 무엇인가?</a></li>\n<li><a href=\"#12\">12. event.target 이란 무엇인가?</a></li>\n<li><a href=\"#13\">13. event.currentTarget 이란 무엇인가?</a></li>\n<li><a href=\"#14\">14. == 와 === 의 차이는 무엇인가?</a></li>\n<li><a href=\"#15\">15. 자바스크립트에서 비슷한 두 객체를 비교할때 false를 리턴하는 이유는 무엇인가?</a></li>\n<li><a href=\"#16\">16. !! 연산자는 무엇을 하는가?</a></li>\n<li><a href=\"#17\">17. 한 줄에 여러 표현식을 평가하는 방법은 무엇인가?</a></li>\n</ul>\n<h1>1. <code class=\"language-text\">undefined</code>와 <code class=\"language-text\">null</code>은 무엇이 다른가? <a name=\"1\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">undefined</code>와 <code class=\"language-text\">null</code>의 차이점을 이해하기 전에 이들의 유사점을 이해해야 합니다.</p>\n<ul>\n<li>이들은 <strong>JavaScript</strong>의 7가지 원시 타입에 속합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> primitiveTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'null'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'undefined'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'symbol'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bigint'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이것은 <strong>falsy</strong> 값입니다.</li>\n<li><code class=\"language-text\">Boolean(value)</code> 또는 <code class=\"language-text\">!!value</code>를 사용해서 boolean로 변환할 때 false로 평가된 값입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span></code></pre></div>\n<p>Ok, 차이점에 관해 얘기해봅시다.</p>\n<ul>\n<li><code class=\"language-text\">undefined</code>는 특정 값이 할당되지 않은 변수의 기본값입니다. 또는 <strong>명시적인</strong> 리턴 값이 없는 함수 예를들어 <code class=\"language-text\">console.log(1)</code>. 또는 객체에 존재하지 않는 속성. 자바스크립트 엔진은 이를 위해 <code class=\"language-text\">undefined</code> 값을 <strong>할당</strong>합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> _thisIsUndefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doNothing</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> someObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">:</span> <span class=\"token string\">\"ay\"</span><span class=\"token punctuation\">,</span>\n  b <span class=\"token operator\">:</span> <span class=\"token string\">\"bee\"</span><span class=\"token punctuation\">,</span>\n  c <span class=\"token operator\">:</span> <span class=\"token string\">\"si\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_thisIsUndefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doNothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs undefined</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">null</code>은 <strong>“값을 나타내지 않는 값”</strong>입니다. <code class=\"language-text\">null</code>은 변수에 <strong>명시적</strong>으로 정의된 값입니다. 이 예제에서는 <code class=\"language-text\">fs.readFile</code> 메서드가 에러를 던지지 않으면 <code class=\"language-text\">null</code> 값을 얻습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/file'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러가 없을 때 로그 null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>를 비교할 때 <code class=\"language-text\">==</code>를 사용하면 <code class=\"language-text\">true</code>를, <code class=\"language-text\">===</code>을 사용하면 <code class=\"language-text\">false</code>를 얻습니다. <a href=\"#14\">여기서</a> 확인 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs false</span></code></pre></div>\n<h1>2. <code class=\"language-text\">&amp;&amp;</code> 연산자는 무엇을 하는가? <a name=\"2\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">&amp;&amp;</code> 또는 <strong>논리 AND</strong> 연산자는 피연산자에서 첫 번째 <em>falsy</em> 표현식을 찾아서 리턴하며, <em>falsy</em> 표현식을 찾지 못하면 마지막 표현식을 리턴합니다.\n불필요한 작업을 방지하기 위해 단락<small>(short-circuiting)</small>을 사용합니다. 저는 저의 프로젝트 중 하나에서 데이터베이스 연결을 닫을 때 이것을 <code class=\"language-text\">catch</code> 블록에서 사용했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs 5</span></code></pre></div>\n<p><strong>if</strong> 문 사용.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> router<span class=\"token operator\">:</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/endpoint'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> conMobile<span class=\"token operator\">:</span> PoolConnection<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//do some db operations</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conMobile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      conMobile<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>&#x26;&#x26;</strong> 연산자 사용.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> router<span class=\"token operator\">:</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/endpoint'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> conMobile<span class=\"token operator\">:</span> PoolConnection<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">//do some db operations</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    conMobile <span class=\"token operator\">&amp;&amp;</span> conMobile<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>3. <code class=\"language-text\">||</code> 연산자는 무엇을 하는가? <a name=\"3\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">||</code> 또는 <code class=\"language-text\">논리 OR</code> 연산자는 피연산자에서 첫 번째 <em>truthy</em> 표현식을 찾아 리턴합니다. 이것 또한 불필요한 작업을 방지하기 위해 단락<small>(short-circuiting)</small>을 사용합니다.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6 Default function parameters</a>가 지원되기 전에 함수 안에서 기본 매개 변수 값 초기화를 위해 사용되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs 1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">logName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs \"Mark\"</span></code></pre></div>\n<h1>4. string을 number로 변환하는 가장 빠른 방법은 + 또는 단항 더하기 연산자를 사용하는 것인가? <a name=\"4\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 문서</a>에 따르면 <code class=\"language-text\">+</code> 는 이미 number일 경우 값에 대한 작업을 수행하지 않기 때문에 string을 number로 변환하는 가장 빠른 방법입니다.</p>\n<h1>5. DOM 이란 무엇인가? <a name=\"5\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>DOM</strong>은 <strong>Document Object Model</strong>의 약자로 HTML 및 XML 문서를 위한 인터페이스 (<strong>API</strong>)입니다.\n브라우저가 HTML 문서를 처음 읽을 때 (<em>구문 분석할 때</em>) HTML 문서를 기반으로 하는 큰 오브젝트를 만드는데 이것이 DOM입니다.\nHTML 문서에서 모델링 된 트리와 유사한 구조입니다.\n<strong>DOM</strong>은 <strong>DOM 구조</strong> 또는 특정 Elements 또는 Nodes를 상호 작용하고 수정하는 데 사용됩니다.</p>\n<p>이와 같은 HTML 구조로 되어 있다고 상상해보십시오.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document Object Model<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>DOM</strong>은 다음과 같을 것입니다.\n<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_mRQj0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/mbqphfbjfie45ynj0teo.png\" alt=\"DOM\"></p>\n<p><strong>JavaScript</strong>의 <code class=\"language-text\">document</code> 객체는 DOM을 나타냅니다.\n이것은 element 내용을 업데이트하기 위해 elements를 선택하는 데 사용할 수 있는 많은 방법을 제공합니다.</p>\n<h1>6. 이벤트 전파<small>(Event Propagation)</small> 란 무엇인가? <a name=\"6\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>이벤트</strong>가 <strong>DOM</strong> element에서 발생하면 그 이벤트는 하나의 element에서만 발생하지 않습니다.\n<strong>버블링 단계</strong>에서는 이벤트가 버블링되거나 부모, 조부모, 조부모의 부모에게, <code class=\"language-text\">window</code>에 도달할 때까지 진행되며 반면에 <strong>캡처링 단계</strong>에서는 이벤트가 <code class=\"language-text\">window</code>부터 이벤트를 트리거 한 element 또는 <a href=\"#12\"><code class=\"language-text\">event.target</code></a>까지 아래로 시작됩니다.</p>\n<p>이벤트 전파는 3단계를 가집니다.</p>\n<ol>\n<li><a href=\"#8\">Capturing Phase</a> – 이벤트는 <code class=\"language-text\">window</code>에서 시작하여 대상 element에 도달할 때까지 모든 element를 내려갑니다.</li>\n<li><a href=\"#12\">Target Phase</a> – 이벤트가 대상 element에 도달합니다.</li>\n<li><a href=\"#7\">Bubbling Phase</a> – 대상 element에서 이벤트가 발생하고 <code class=\"language-text\">window</code>에 도달할 때까지 모든 element를 올라갑니다.</li>\n</ol>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Azk8KRbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hjayqa99iejfhbsujlqd.png\" alt=\"Event Propagation\"></p>\n<h1>7. 이벤트 버블링<small>(Event Bubbling)</small> 이란 무엇인가? <a name=\"7\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>이벤트</strong>가 <strong>DOM</strong> element에서 발생하면 그 이벤트는 하나의 element에서만 발생하지 않습니다.\n<strong>버블링 단계</strong>에서는 이벤트가 버블링되거나 부모, 조부모, 조부모의 부모에게, <code class=\"language-text\">window</code>에 도달할 때까지 진행됩니다.</p>\n<p>이와 같은 마크업 예제가 있다면.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grandparent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 JS 코드.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> isCapture <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>event <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>callback <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> el <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> isCapture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.child'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.parent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> grandparent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.grandparent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grandparent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'document'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'window'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">addEventListener</code> 메서드에는 기본값이 <code class=\"language-text\">false</code>인 세 번째 옵션 매개 변수 <strong>useCapture</strong>가 있으며, 이 이벤트는 <strong>버블링 단계</strong>에서 발생하고 만약 <code class=\"language-text\">true</code>인 경우에는 <strong>캡쳐링 단계</strong>에서 발생합니다.\n<code class=\"language-text\">child</code> element를 클릭하면 <strong>콘솔</strong>에 <code class=\"language-text\">child</code>, <code class=\"language-text\">parent</code>, <code class=\"language-text\">grandparent</code>, <code class=\"language-text\">html</code>, <code class=\"language-text\">document</code> 및 <code class=\"language-text\">window</code>가 각각 로그로 기록됩니다.\n이것이 <strong>이벤트 버블링</strong>입니다.</p>\n<h1>8. 이벤트 캡쳐링<small>(Event Capturing)</small> 이란 무엇인가? <a name=\"8\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>이벤트</strong>가 <strong>DOM</strong> element에서 발생하면 그 이벤트는 하나의 element에서만 발생하지 않습니다.\n<strong>캡처링 단계</strong>에서 이벤트는 <code class=\"language-text\">window</code>에서 이벤트를 트리거 한 element로 시작합니다.</p>\n<p>이와 같은 마크업 예제가 있다면.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grandparent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 JS 코드.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> isCapture <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>event <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>callback <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> el <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> isCapture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.child'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.parent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> grandparent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.grandparent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grandparent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'document'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'window'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">addEventListener</code> 메서드에는 기본값이 <code class=\"language-text\">false</code>인 세 번째 옵션 매개 변수 <strong>useCapture</strong>가 있으며, 이 이벤트는 <strong>버블링 단계</strong>에서 발생하고 만약 <code class=\"language-text\">true</code>인 경우에는 <strong>캡쳐링 단계</strong>에서 발생합니다.\n<code class=\"language-text\">child</code> element를 클릭하면 <strong>콘솔</strong>에 <code class=\"language-text\">window</code>, <code class=\"language-text\">document</code>, <code class=\"language-text\">html</code>, <code class=\"language-text\">grandparent</code>, <code class=\"language-text\">parent</code> 및 <code class=\"language-text\">child</code>가 각각 로그로 기록됩니다.\n이것이 <strong>이벤트 캡쳐링</strong>입니다.</p>\n<h1>9. <code class=\"language-text\">event.preventDefault()</code>와 <code class=\"language-text\">event.stopPropagation()</code> 메서드의 차이점은 무엇인가? <a name=\"9\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">event.preventDefault()</code> 메서드는 element의 기본 동작을 <strong>방지</strong>합니다.\n<code class=\"language-text\">form</code> element에 사용하면 submitting 할 수 없습니다.\n<code class=\"language-text\">anchor</code> element에 사용하면 navigating 할 수 없습니다.\n<code class=\"language-text\">contextmenu</code>에서 사용하면 보여지거나 표시되지 않습니다.\n반면에 <code class=\"language-text\">event.stopPropagation()</code> 메서드는 이벤트 전파를 중지하거나 <a href=\"#7\">버블링</a> 또는 <a href=\"#8\">캡처링</a> 단계에서 이벤트 발생을 중지합니다.</p>\n<h1>10. <code class=\"language-text\">event.preventDefault()</code> 메서드가 element에 사용되었는지 어떻게 확인하는가? <a name=\"10\"></a></h1>\n<p><a href=\"#0\">↑</a>\n이벤트 객체에서 <code class=\"language-text\">event.defaultPrevented</code> 속성을 사용할 수 있습니다.\n이것은 <code class=\"language-text\">event.preventDefault()</code>가 특정 element에서 호출되었는지 여부를 나타내는 <code class=\"language-text\">boolean</code>을 리턴합니다.</p>\n<h1>11. 이 코드에서 <code class=\"language-text\">obj.someprop.x</code>가 에러 발생하는 이유는 무엇인가? <a name=\"11\"></a></h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>someprop<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"#0\">↑</a>\n분명하게도, 이 에러는 <code class=\"language-text\">undefined</code> 값을 가진 <code class=\"language-text\">someprop</code> 속성에서 <code class=\"language-text\">x</code> 속성에 접근하려는 이유 때문에 발생합니다.\n그 자체로 존재하지 않는 객체의 속성을 명심해야 되고 그리고 그것의 프로토 타입은 <code class=\"language-text\">undefined</code>를 기본값으로 가지며 <code class=\"language-text\">undefined</code>는 <code class=\"language-text\">x</code>의 속성이 없습니다.</p>\n<h1>12. <strong>event.target</strong> 이란 무엇인가? <a name=\"12\"></a></h1>\n<p><a href=\"#0\">↑</a>\n간단히 말해서 <strong>event.target</strong>은 이벤트가 발생한 element 또는 이벤트를 트리거 한 element입니다.</p>\n<p>샘플 HTML 마크업.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clickFunc(event)<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>15px<span class=\"token punctuation\">;</span>\n<span class=\"token property\">border</span><span class=\"token punctuation\">:</span>1px solid red<span class=\"token punctuation\">;</span><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span>3px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span> <span class=\"token property\">border</span><span class=\"token punctuation\">:</span>1px solid royalblue<span class=\"token punctuation\">;</span><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span>3px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>25px<span class=\"token punctuation\">;</span><span class=\"token property\">border</span><span class=\"token punctuation\">:</span>1px solid skyblue<span class=\"token punctuation\">;</span><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span>3px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>10px</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n       Button\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>샘플 JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">clickFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>버튼을 클릭하면 버튼 마크업이 로그로 기록됩니다. 이벤트를 가장 바깥쪽 <code class=\"language-text\">div</code>에 연결해도 <strong>버튼</strong>은 항상 기록됩니다.\n그래서 <strong>event.target</strong>이 이벤트를 트리거 한 element라는 결론을 내릴 수 있습니다.</p>\n<h1>13. <strong>event.currentTarget</strong> 이란 무엇인가? <a name=\"13\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>event.currentTarget</strong>은 이벤트 핸들러를 명시적으로 붙이는 element입니다.</p>\n<p><strong>질문 12</strong>의 마크업 복사.\n샘플 HTML 마크업.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clickFunc(event)<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>15px<span class=\"token punctuation\">;</span>\n<span class=\"token property\">border</span><span class=\"token punctuation\">:</span>1px solid red<span class=\"token punctuation\">;</span><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span>3px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span> <span class=\"token property\">border</span><span class=\"token punctuation\">:</span>1px solid royalblue<span class=\"token punctuation\">;</span><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span>3px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>25px<span class=\"token punctuation\">;</span><span class=\"token property\">border</span><span class=\"token punctuation\">:</span>1px solid skyblue<span class=\"token punctuation\">;</span><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span>3px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>10px</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n       Button\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 JS를 약간 변경.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">clickFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>버튼을 클릭하더라도 가장 바깥 쪽 <code class=\"language-text\">div</code> 마크업이 로그로 기록됩니다.\n이 예제에서 <code class=\"language-text\">event.currentTarget</code>이 이벤트 핸들러를 붙이는 element라고 결론을 내릴 수 있습니다.</p>\n<h1>14. <code class=\"language-text\">==</code> 와 <code class=\"language-text\">===</code> 의 차이는 무엇인가? <a name=\"14\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">==</code> <strong>(추상적 같음)</strong>와 <code class=\"language-text\">===</code> <strong>(엄격한 같음)</strong>의 차이점은 <code class=\"language-text\">==</code> 는 <em>강제변환<small>(coercion)</small></em> 후 <strong>값</strong>으로 비교하고 <code class=\"language-text\">===</code>는 <em>강제변환</em> 없이 <strong>값</strong> 및 <strong>타입</strong>으로 비교한다는 것입니다.</p>\n<p><code class=\"language-text\">==</code> 에 대해 더 깊이 파봅시다. 그럼 먼저 <em>강제변환</em>에 대해 이야기합시다.</p>\n<p><em>강제변환</em>은 값을 다른 타입으로 변환하는 프로세스입니다.\n이 경우와 같이 <code class=\"language-text\">==</code>는 <em>암묵적인 강제변환</em>을 수행합니다.\n<code class=\"language-text\">==</code>는 두 값을 비교하기 전에 수행해야 할 몇가지 조건이 있습니다.</p>\n<p><code class=\"language-text\">x == y</code> 값을 비교해야 한다고 가정해봅시다.</p>\n<ol>\n<li><code class=\"language-text\">x</code>와 <code class=\"language-text\">y</code>가 같은 타입일 경우 <code class=\"language-text\">===</code> 연산자와 비교.</li>\n<li><code class=\"language-text\">x</code>가 <code class=\"language-text\">null</code>이고 <code class=\"language-text\">y</code>가 <code class=\"language-text\">undefined</code>이면 <code class=\"language-text\">true</code>를 리턴.</li>\n<li><code class=\"language-text\">x</code>가 <code class=\"language-text\">undefined</code>이고 <code class=\"language-text\">y</code>가 <code class=\"language-text\">null</code>이면 <code class=\"language-text\">true</code>를 리턴.</li>\n<li><code class=\"language-text\">x</code> 타입이 <code class=\"language-text\">number</code>이고 <code class=\"language-text\">y</code> 타입이 <code class=\"language-text\">string</code>이면 <code class=\"language-text\">x == toNumber(y)</code>를 리턴.</li>\n<li><code class=\"language-text\">x</code> 타입이 <code class=\"language-text\">string</code>이고 <code class=\"language-text\">y</code> 타입이 <code class=\"language-text\">number</code>이면 <code class=\"language-text\">toNumber(x) == y</code>를 리턴.</li>\n<li><code class=\"language-text\">x</code> 타입이 <code class=\"language-text\">boolean</code>이면 <code class=\"language-text\">toNumber(x) == y</code>를 리턴.</li>\n<li><code class=\"language-text\">y</code> 타입이 <code class=\"language-text\">boolean</code>이면 <code class=\"language-text\">x == toNumber(y)</code>를 리턴.</li>\n<li><code class=\"language-text\">x</code>가 <code class=\"language-text\">string</code>, <code class=\"language-text\">symbol</code> 또는 <code class=\"language-text\">number</code> 중 하나이고 <code class=\"language-text\">y</code> 타입이 <code class=\"language-text\">object</code>이면 <code class=\"language-text\">x == toPrimitive(y)</code>를 리턴.</li>\n<li><code class=\"language-text\">x</code>가 <code class=\"language-text\">object</code>이고 <code class=\"language-text\">y</code>가 <code class=\"language-text\">string</code>, <code class=\"language-text\">symbol</code> 중 하나이면 <code class=\"language-text\">toPrimitive(x) == y</code>를 리턴.</li>\n<li><code class=\"language-text\">false</code>를 리턴.</li>\n</ol>\n<p><strong>Note:</strong> <code class=\"language-text\">toPrimitive</code>는 먼저 <code class=\"language-text\">valueOf</code> 메서드를 사용한 다음 객체의 <code class=\"language-text\">toString</code> 메서드를 사용하여 해당 객체의 원시값을 가져옵니다.</p>\n<p>예를 들어 봅시다.</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x == y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">1</code></td>\n<td><code class=\"language-text\">&#39;1&#39;</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">null</code></td>\n<td><code class=\"language-text\">undefined</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">0</code></td>\n<td><code class=\"language-text\">false</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;1, 2&#39;</code></td>\n<td><code class=\"language-text\">[1, 2]</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;[object Object]&#39;</code></td>\n<td><code class=\"language-text\">{}</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n</tbody>\n</table>\n<p>이 예제들은 모두 <code class=\"language-text\">true</code>를 리턴합니다.</p>\n<p><strong>첫 번째 예</strong>는 <code class=\"language-text\">x</code>와 <code class=\"language-text\">y</code>의 타입과 값이 같으므로 <strong>조건 1</strong>에 해당합니다.</p>\n<p><strong>두 번째 예</strong>는 <code class=\"language-text\">y</code>는 비교하기 전에 <code class=\"language-text\">number</code>로 변환됨으로 <strong>조건 4</strong>에 해당합니다.</p>\n<p><strong>세 번째 예</strong>는 <strong>조건 2</strong>에 해당합니다.</p>\n<p><strong>네 번째 예</strong>는 <code class=\"language-text\">y</code>가 <code class=\"language-text\">boolean</code>이므로 <strong>조건 7</strong>로 해당합니다.</p>\n<p><strong>다섯 번째 예</strong>는 <strong>조건 8</strong>에 해당합니다.\n배열은 <code class=\"language-text\">1,2</code>를 리턴하는 <code class=\"language-text\">toString()</code> 메서드를 사용하여 <code class=\"language-text\">string</code>으로 변환됩니다.</p>\n<p><strong>마지막 예</strong>는 <strong>조건 10</strong>에 해당합니다.\n객체는 <code class=\"language-text\">[object Object]</code>를 리턴하는 <code class=\"language-text\">toString()</code> 메서드를 사용하여 <code class=\"language-text\">string</code>으로 변환됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x === y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">1</code></td>\n<td><code class=\"language-text\">&#39;1&#39;</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">null</code></td>\n<td><code class=\"language-text\">undefined</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">0</code></td>\n<td><code class=\"language-text\">false</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;1,2&#39;</code></td>\n<td><code class=\"language-text\">[1,2]</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;[object Object]&#39;</code></td>\n<td><code class=\"language-text\">{}</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">===</code> 연산자를 사용하면 첫 번째 예제를 제외한 모든 비교는 같은 타입이 아니기 때문에 <code class=\"language-text\">false</code>를 리턴합니다. 반면에 첫 번째 예제는 동일한 타입과 값을 가지기 때문에 <code class=\"language-text\">true</code>를 리턴합니다.</p>\n<h1>15. 자바스크립트에서 비슷한 두 객체를 비교할때 <strong>false</strong>를 리턴하는 이유는 무엇인가? <a name=\"15\"></a></h1>\n<p><a href=\"#0\">↑</a>\n아래의 예가 있다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 속성이 같더라도 로그는 false를 기록합니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로그 true hmm</span></code></pre></div>\n<p>JavaScript는 <em>객체<small>(objects)</small></em>와 <em>원시값<small>(primitives)</small></em>을 다르게 비교합니다.\n<em>원시값</em>에서는 <strong>값<small>(value)</small></strong>별로 비교하지만 <strong>객체</strong>에서는 참조 또는 변수가 저장된 메모리의 주소로 비교합니다.\n그렇기에 첫 번째 <code class=\"language-text\">console.log</code> 문은<code class=\"language-text\">false</code>를, 두 번째<code class=\"language-text\">console.log</code> 문은<code class=\"language-text\">true</code>를 라턴한 이유입니다.\n<code class=\"language-text\">a</code>와<code class=\"language-text\">c</code>는 같은 참조를 가지고 있으며 <code class=\"language-text\">a</code>와<code class=\"language-text\">b</code>는 동일하지 않습니다.</p>\n<h1>16. <code class=\"language-text\">!!</code> 연산자는 무엇을 하는가? <a name=\"16\"></a></h1>\n<p><a href=\"#0\">↑</a>\n이중 NOT 연산자 또는 !!는 오른쪽의 값을 <code class=\"language-text\">boolean</code>로 강제합니다. 기본적으로 값을 <code class=\"language-text\">boolean</code>로 변환하는 멋진 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs false</span></code></pre></div>\n<h1>17. 한 줄에 여러 표현식을 평가하는 방법은 무엇인가? <a name=\"17\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">,</code> 또는 쉼표 연산자를 사용하여 한 줄에서 여러 표현식을 평가할 수 있습니다.\n왼쪽에서 오른쪽으로 평가하여 오른쪽 또는 마지막 피연산자의 마지막 항목 값을 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span> <span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token function\">addFive</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addFive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 27</span></code></pre></div>\n<p><code class=\"language-text\">x</code>의 값을 로그로 기록하면 27이 됩니다.\n먼저 <code class=\"language-text\">x</code>의 값을 <strong>6</strong>으로 증가시킨 다음 <code class=\"language-text\">addFive(6)</code> 함수를 호출합니다.\n6을 매개 변수로 전달하고 그 결과를 <code class=\"language-text\">x</code>에 할당하면 <code class=\"language-text\">x</code>의 새로운 값은 <code class=\"language-text\">11</code>됩니다.\n그런 다음 <code class=\"language-text\">x</code>의 현재 값을 <code class=\"language-text\">2</code>로 곱하면 <code class=\"language-text\">x</code>에 업데이트 된 <code class=\"language-text\">x</code>의 값은 <code class=\"language-text\">22</code>가 됩니다.\n그 뒤 <code class=\"language-text\">x</code>의 현재 값에 <code class=\"language-text\">5</code>를 뺍니다.\n그럼 그 결과를 <code class=\"language-text\">x</code>에 할당하면 업데이트 된 값은 <code class=\"language-text\">17</code>이 됩니다.\n마지막으로 <code class=\"language-text\">x</code>의 값을 <code class=\"language-text\">10</code> 증가시킵니다.\n그리고 <code class=\"language-text\">x</code>에 업데이트 된 값을 할당하면 <code class=\"language-text\">x</code>의 값은 <code class=\"language-text\">27</code>이 됩니다.</p>","frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 1부(번역)","date":"January 09, 2020","description":"70 JavaScript Interview Questions","tags":"javascript, interview, translation"}}},"pageContext":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-1/","previous":{"fields":{"slug":"/blog/2020/About-Functional-Programming/"},"frontmatter":{"title":"함수형 프로그래밍"}},"next":{"fields":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-2/"},"frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 2부(번역)"}}}},"staticQueryHashes":["1137390604","3980716358"]}