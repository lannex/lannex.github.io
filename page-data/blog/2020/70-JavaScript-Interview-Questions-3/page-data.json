{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2020/70-JavaScript-Interview-Questions-3/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"983e661f-957a-5940-a08b-adbce5a0283f","excerpt":"출처 70 JavaScript Interview Questions 시작하며 글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다. 70 자바스크립트 인터뷰 질문 - 1부 7…","html":"<h1>출처</h1>\n<p><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">70 JavaScript Interview Questions</a></p>\n<h1>시작하며</h1>\n<p>글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다.</p>\n<ul>\n<li><a href=\"../70-JavaScript-Interview-Questions-1/\">70 자바스크립트 인터뷰 질문 - 1부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-2/\">70 자바스크립트 인터뷰 질문 - 2부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-3/\">70 자바스크립트 인터뷰 질문 - 3부</a></li>\n</ul>\n<h1>Hi Guys Good Day and a Happy New Year 🎆🎆🎆!</h1>\n<p>이 글은 긴 내용이므로 한두 시간 동안 나와 함께하시길 바랍니다.\n모든 질문에 대한 답변에는 질문 목록으로 돌아가는 화살표 ↑ 링크가 있어서 스크롤 하는 시간을 낭비하지 않아도 됩니다.</p>\n<h1>질문 <a name=\"0\"></a></h1>\n<ul>\n<li><a href=\"#37\">37. arguments 객체란 무엇인가?</a></li>\n<li><a href=\"#38\">38. prototype없이 객체를 만드는 방법은 무엇인가?</a></li>\n<li><a href=\"#39\">39. 이 함수를 호출할 때 b가 글로벌 변수로 되는 이유는 무엇인가?</a></li>\n<li><a href=\"#40\">40. ECMAScript이란 무엇인가?</a></li>\n<li><a href=\"#41\">41. ES6 또는 ECMAScript 2015의 새로운 기능은 무엇인가?</a></li>\n<li><a href=\"#42\">42. var, let 및 const 키워드의 차이점은 무엇인가?</a></li>\n<li><a href=\"#43\">43. Arrow functions이란 무엇인가?</a></li>\n<li><a href=\"#44\">44. Classes란 무엇인가?</a></li>\n<li><a href=\"#45\">45. Template Literals이란 무엇인가?</a></li>\n<li><a href=\"46\">46. Object Destructuring이란 무엇인가?</a></li>\n<li><a href=\"#47\">47. ES6 Modules이란 무엇인가?</a></li>\n<li><a href=\"#48\">48. Set 객체는 무엇이며 어떻게 작동하는가?</a></li>\n<li><a href=\"#49\">49. 콜백 함수란 무엇인가?</a></li>\n<li><a href=\"#50\">50. Promises란 무엇인가?</a></li>\n<li><a href=\"#51\">51. async/await란 무엇이며 어떻게 작동하는가?</a></li>\n<li><a href=\"#52\">52. Spread operator와 Rest operator의 차이점은 무엇인가?</a></li>\n<li><a href=\"#53\">53. Default Parameters란 무엇인가?</a></li>\n<li><a href=\"#54\">54. Wrapper Objects란 무엇인가?</a></li>\n</ul>\n<h1>37. <strong>arguments</strong> 객체란 무엇인가? <a name=\"37\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>arguments</strong> 객체는 함수에 전달된 매개 변수 값의 집합입니다.\n<strong>length</strong> 속성을 가지고 있고 배열 인덱싱 <code class=\"language-text\">arguments[1]</code> 표기법을 사용하여 각각의 값에 액세스 할 수 있기 때문에 <strong>배열과 같은</strong> 객체입니다.\n그러나 <code class=\"language-text\">forEach</code>, <code class=\"language-text\">reduce</code>, <code class=\"language-text\">filter</code> 및 <code class=\"language-text\">map</code> 배열에는 내장 메서드가 없습니다.\n이것은 함수에 전달되는 인수의 수를 알 수 있습니다.</p>\n<p>우리는 <code class=\"language-text\">Array.prototype.slice</code>를 사용하여 <code class=\"language-text\">arguments</code> 객체를 배열로 변환 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note: <code class=\"language-text\">arguments</code> 객체는 ES6 화살표 함수에서 작동하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">two</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">three</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">three</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">four</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arguments<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">four</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러를 던집니다 - arguments가 정의되지 않았습니다</span></code></pre></div>\n<p>함수 <code class=\"language-text\">four</code>를 호출하면 <code class=\"language-text\">ReferenceError: arguments is not defined</code> 오류가 발생합니다.\n환경이 <strong>rest 구문<small>(rest syntax)</small></strong> 을 지원하는 경우에 이 문제를 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">four</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> args<span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 모든 매개 변수 값이 배열에 자동으로 넣어집니다.</p>\n<h1>38. <strong>prototype</strong>없이 객체를 만드는 방법은 무엇인가? <a name=\"38\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">Object.create</code> 메서드를 사용하여 <em>프로토 타입</em>없이 객체를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 로그로 [object Object]가 기록됩니다. 이 메서드를 Object.prototype에서 가져옵니다.</span>\n\n<span class=\"token keyword\">const</span> o2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 첫 번째 매개 변수는 \"o2\" 객체의 프로토 타입입니다.이 경우 프로토 타입을 원하지 않기에 null이 됩니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 오류를 던집니다. o2.toString is not a function</span></code></pre></div>\n<h1>39. 이 함수를 호출할 때 <code class=\"language-text\">b</code>가 글로벌 변수로 되는 이유는 무엇인가? <a name=\"39\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 이유는 <strong>할당 연산자<small>(assignment operator)</small></strong> 또는 <code class=\"language-text\">=</code>에 오른쪽에서 왼쪽으로 <strong>결합 방향<small>(associativity)</small></strong> 또는 <strong>평가<small>(evaluation)</small></strong> 가 있기 때문입니다.\n이것은 여러 할당 연산자가 단일 표현식으로 나타날 때 오른쪽에서 왼쪽으로 평가한다는 뜻입니다. 그래서 우리 코드는 이렇게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>먼저, 표현식 <code class=\"language-text\">b = 0</code>이 평가되고 예제에서 <code class=\"language-text\">b</code>는 선언되지 않습니다.\n따라서 JS 엔진은 표현식 <code class=\"language-text\">b = 0</code>의 리턴 값이 0이 되고 <code class=\"language-text\">let</code> 키워드를 사용하여 새로운 로컬 변수 <code class=\"language-text\">a</code>에 할당된 후 이 함수 외부에서 글로벌 변수 b를 만듭니다.</p>\n<p>변수를 할당하기 전에 이 변수를 선언하여 문제를 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>40. <strong>ECMAScript</strong>이란 무엇인가? <a name=\"40\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>ECMAScript</strong>는 스크립팅 언어를 만들기 위한 표준입니다.\n이 말인즉, <strong>JavaScript</strong>의 <strong>청사진</strong>이기 때문에 JavaScript는 <strong>ECMAScript</strong> 표준의 사양 변경을 따릅니다.</p>\n<h1>41. <strong>ES6</strong> 또는 <strong>ECMAScript 2015</strong>의 새로운 기능은 무엇인가? <a name=\"41\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<ul>\n<li><a href=\"#43\">Arrow Functions</a></li>\n<li><a href=\"#44\">Classes</a></li>\n<li><a href=\"#45\">Template Strings</a></li>\n<li>Enhanced Object literals</li>\n<li><a href=\"#46\">Object Destructuring</a></li>\n<li><a href=\"#50\">Promises</a></li>\n<li><a href=\"#47\">Generators</a></li>\n<li>Modules</li>\n<li>Symbol</li>\n<li>Proxies</li>\n<li><a href=\"#48\">Sets</a></li>\n<li><a href=\"#53\">Default Function parameters</a></li>\n<li><a href=\"#52\">Rest and Spread</a></li>\n<li><a href=\"#42\">Block Scoping with let and const</a></li>\n</ul>\n<h1>42. <code class=\"language-text\">var</code>, <code class=\"language-text\">let</code> 및 <code class=\"language-text\">const</code> 키워드의 차이점은 무엇인가? <a name=\"42\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">var</code> 키워드로 선언된 <em>변수는 함수 스코프</em>입니다.\n이것은 블록 안에서 변수를 선언하더라도 해당 함수에서 변수에 액세스 할 수 있음을 뜻합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">giveMeX</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">showX</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>showX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">giveMeX</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">giveMeX</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>첫 번째 <code class=\"language-text\">console.log</code> 문은 <code class=\"language-text\">undefined</code>, 두 번째는 <code class=\"language-text\">5</code>를 기록합니다.\n함수 스코프의 맨 위로 호이스팅하기 때문에 <code class=\"language-text\">x</code> 변수에 액세스 할 수 있습니다.\n따라서 함수 코드는 다음과 같이 해석됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">giveMeX</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">showX</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본값은 undefined</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>showX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>첫 번째 <code class=\"language-text\">console.log</code> 문에 <code class=\"language-text\">undefined</code>를 기록하는지 궁금하다면 초깃값 없이 선언된 변수의 기본값은 <code class=\"language-text\">undefined</code>임을 기억해야 합니다.</p>\n<p><code class=\"language-text\">let</code> 및 <code class=\"language-text\">const</code> 키워드로 선언된 변수는 <em>블록 스코프</em>입니다. 이것은 변수가 선언된 <code class=\"language-text\">{}</code>블록에서만 변수에 액세스 할 수 있음을 뜻합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">giveMeX</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">showX</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>showX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">giveMeY</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">showY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>showY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 함수들을 <code class=\"language-text\">false</code> 인수로 호출하면 <code class=\"language-text\">Reference Error</code>가 발생합니다.\n블록 외부의 <code class=\"language-text\">x</code> 와 <code class=\"language-text\">y</code> 변수에 액세스 할 수 없는데 해당 변수가 <em>호이스팅</em>되지 않았기 때문입니다.</p>\n<p><code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code> 사이에도 차이가 있습니다.\n<code class=\"language-text\">let</code>을 사용하여 새로운 값을 할당 할 수 있지만 <code class=\"language-text\">const</code>는 할 수 없습니다.\n하지만 <code class=\"language-text\">const</code>는 변경 가능한<small>(mutable)</small> 의미입니다.\n이것은 만약 <code class=\"language-text\">const</code>에 할당한 값이 객체라면 우리는 그 속성들의 값을 바꿀 수는 있어도 새로운 값을 재할당할 수는 없다는 것을 의미합니다.</p>\n<h1>43. <strong>Arrow functions</strong> 이란 무엇인가? <a name=\"43\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>화살표 함수<small>(Arrow Functions)</small></strong> 는 JavaScript에서 함수를 만드는 새로운 방법입니다.\n<strong>화살표 함수</strong>는 함수를 만드는 데 시간이 적게 걸립니다. 그리고 <code class=\"language-text\">function</code> 키워드를 만들 때 생략하기 때문에 <strong>함수 표현식<small>(function expression)</small></strong> 보다 구문이 깔끔합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getCurrentDate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCurrentDate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예제에서, ES5 버전은 함수를 만들고 값을 각각 리턴하는데 필요한 <code class=\"language-text\">function () {}</code> 선언 및 <code class=\"language-text\">return</code> 키워드가 있습니다.\n화살표 함수 버전에는 <code class=\"language-text\">()</code> 괄호만 필요합니다. 그리고 <code class=\"language-text\">return</code> 구문이 필요하지 않습니다. 왜냐하면 리턴하는 표현식이나 값을 하나만 가지고 있다면 화살표 함수는 암시적으로 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">greet2</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한 화살표 함수의 매개 변수는 <strong>함수 표현식</strong> 및 <strong>함수 선언</strong>과 같게 사용할 수 있습니다.\n<strong>화살표 함수</strong>에 하나의 매개 변수가 있을 시 괄호를 생략해도 유효합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArgs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arguments\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArgs2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rest</code></pre></div>\n<p><strong>화살표 함수</strong>는 <code class=\"language-text\">arguments</code> 객체에 액세스 할 수 없습니다.\n따라서 첫 번째 <code class=\"language-text\">getArgs</code> 함수를 호출하면 오류가 발생합니다.\n대신에 <strong>rest 매개 변수</strong>를 사용해서 화살표 함수에 전달된 모든 인수를 가져올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  nums<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">computeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 여기서 \"this\"는 \"data\"객체를 말합니다.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// arrow functions \"copies\" the \"this\" value of the lexical enclosing function</span>\n      <span class=\"token comment\">// 화살표 함수는 렉시컬을 포함한 함수(lexical enclosing function)의 \"this\"값을 \"복사\"합니다.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">computeResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>화살표 함수에는 자신의 <code class=\"language-text\">this</code> 값이 없습니다.\n렉시컬을 포함한 함수<small>(lexically enclosing function)</small>의 <code class=\"language-text\">this</code> 값을 포착하거나 얻거나 또는 이 예제에서 <code class=\"language-text\">addAll</code> 함수는 <code class=\"language-text\">computeResult</code> 메서드의 <code class=\"language-text\">this</code> 값을 복사합니다.\n그리고 글로벌 스코프에서 화살표 함수를 선언하면 <code class=\"language-text\">this</code>의 값이 <code class=\"language-text\">window</code> 객체가 됩니다.</p>\n<h1>44. 클래스<small>(Classes)</small>란 무엇인가? <a name=\"44\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>클래스</strong>는 <strong>JavaScript</strong>에서 <em>constructor 함수</em>를 작성하는 새로운 방법입니다.\nconstructor 함수를 사용하는 문법적 설탕<small>(syntactic sugar)</small>이지만 여전히 <strong>프로토 타입</strong>과 <strong>프로토 타입 기반 상속</strong>을 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nPerson<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">self</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"[object Person]\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"[object Person]\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>메서드를 재정의</strong>하고 <strong>다른 클래스에서 상속</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> jobTitle<span class=\"token punctuation\">,</span> yearStarted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jobTitle <span class=\"token operator\">=</span> jobTitle<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearStarted <span class=\"token operator\">=</span> yearStarted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">describe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I have a position of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jobTitle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I started at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearStarted<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"[object Employee]\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//Inherits from \"Person\" class</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> jobTitle<span class=\"token punctuation\">,</span> yearStarted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jobTitle <span class=\"token operator\">=</span> jobTitle<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearStarted <span class=\"token operator\">=</span> yearStarted<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I have a position of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jobTitle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I started at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yearStarted<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Overriding the \"toString\" method of \"Person\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"[object Employee]\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그렇다면 그것이 <em>프로토 타입</em>을 사용한다는 것을 어떻게 알 수 있습니까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Something</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AnotherSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">as</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnotherSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs \"function\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> AnotherSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs \"function\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs \"[object Object]\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs \"[object Object]\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 두 로그 모두 true를 반환합니다.</span>\n<span class=\"token comment\">// prototypes을 사용한다는 것을 나타내는 이유는 Object.prototype이 프로토 타입 체인의 마지막 부분이고</span>\n<span class=\"token comment\">// \"Something\"과 \"AnotherSomething\" 둘다 Object.prototype에서 상속되기 때문입니다.</span></code></pre></div>\n<h1>45. <strong>템플릿 리터럴<small>(Template Literals)</small></strong> 이란 무엇인가? <a name=\"45\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>템플릿 리터럴</strong>은 JavaScript에서 <strong>문자열<small>(strings)</small></strong> 을 만드는 새로운 방법입니다.\n억음 부호<small>(backtick)</small> 또는 백 따옴표 기호를 사용하여 <strong>템플릿 리터럴</strong>을 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token keyword\">var</span> greet <span class=\"token operator\">=</span> <span class=\"token string\">'Hi I\\'m Mark'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">let</span> greet <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi I'm Mark</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES5 버전에서는 문자열로 끝내야하는 이 경우에는 심볼의 정상적인 기능을 피하기 위해 <code class=\"language-text\">\\</code> 를 사용하여 `를 이스케이프 해야 합니다.\n템플릿 리터럴에서는 그렇게 할 필요가 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token keyword\">var</span> lastWords <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'   I  \\n'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'   Am  \\n'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'Iron Man \\n'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">let</span> lastWords <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    I\n    Am\n  Iron Man\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES5 버전에서는 문자열에 줄을 넣을려면 <code class=\"language-text\">\\n</code>을 추가해야합니다.\n템플릿 리터럴에서는 그렇게 할 필요가 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> !</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES5 버전에서는 문자열에 표현식이나 값을 추가해야하는 경우에 <code class=\"language-text\">+</code> 또는 문자열 연결 연산자<small>(string concatenation operator)</small>를 사용해야합니다.\n템플릿 리터럴에서는 <code class=\"language-text\">${expr}</code>을 사용하여 ES5 버전보다 깔끔한 표현식으로 나타낼 수 있습니다.</p>\n<h1>46. 객체 구조 분해<small>(Object Destructuring)</small>란 무엇인가? <a name=\"46\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>객체 구조 분해</strong>는 객체 또는 배열에서 <strong>가져오거나 추출하는</strong> 새롭고 깔끔한 방법입니다.</p>\n<p>아래와 같은 객체가 있다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> employee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"Marko\"</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token string\">\"Polo\"</span><span class=\"token punctuation\">,</span>\n  position<span class=\"token operator\">:</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">,</span>\n  yearHired<span class=\"token operator\">:</span> <span class=\"token number\">2017</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>객체로부터 속성들을 가져오는 오래된 방법은 그 객체 속성과 같은 이름의 변수를 만드는 것 입니다.\n이 방법은 모든 속성에 대해 새로운 변수로 만들어야 하므로 번거롭습니다.\n속성을 추출하는데, 이 방법을 사용하여 많은 속성과 메서드가 있는 큰 객체가 있다고 상상하면 짜증 날 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lastName <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> position <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> yearHired <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">.</span>yearHired<span class=\"token punctuation\">;</span></code></pre></div>\n<p>객체 구조 분해를 사용하면 깔끔해보이고 예전보다 시간이 덜 걸립니다.\n객체 구조 분해 구문은 객체에서 속성을 얻을 시  <code class=\"language-text\">{}</code>를 사용하고 그 안에 추출할 속성을 명시한다는 것입니다. 그리고 배열에서 데이터를 얻는다면 <code class=\"language-text\">[]</code>를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> yearHired <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">;</span></code></pre></div>\n<p>구조 분해를 할 경우에 기본값도 가질 수 있습니다.\n이 예제에서, 객체의 <code class=\"language-text\">firstName</code> 속성이 <code class=\"language-text\">undefined</code> 값을 가진다면 <code class=\"language-text\">firstName</code> 변수는 기본값 <code class=\"language-text\">&quot;Mark&quot;</code>를 가지게 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> lName<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> yearHired <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> employee<span class=\"token punctuation\">;</span></code></pre></div>\n<h1>47. <code class=\"language-text\">ES6 Modules</code>이란 무엇인가? <a name=\"47\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>모듈</strong>은 코드베이스를 여러 파일로 분할해서 유지 관리 효율성을 높이고 코드 전부를 하나의 큰 파일(yucksss)에 넣는 것을 피하게 해줍니다.\nES6가 모듈을 지원하기 전에 <strong>JavaScript</strong>에서 코드 유지 관리에 사용되는 두 가지 유명한 모듈 시스템이 있었습니다.</p>\n<ul>\n<li>CommonJS - <strong>Nodejs</strong></li>\n<li>AMD (Asynchronous Module Definition) - <strong>Browsers</strong></li>\n</ul>\n<p>기본적으로 모듈을 사용하는 구문은 간단합니다.\n<code class=\"language-text\">import</code>는 다른 파일이나 여러 기능 또는 값에서 <em>getting</em> 기능으로 사용됩니다.\n반면에 <code class=\"language-text\">export</code>는 파일이나 여러 기능 또는 값에서 <em>exposing</em> 기능으로 사용됩니다.</p>\n<p><strong>파일 또는 명명된 내보내기<small>(Named Exports)</small>에서 기능 내보내기</strong></p>\n<p><em>ES5 (CommonJS) 사용</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Using ES5 CommonJS - helpers.js</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNull</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isUndefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNullOrUndefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> exports<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> exports<span class=\"token punctuation\">.</span><span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>ES6 모듈 사용</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Using ES6 Modules - helpers.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isNullOrUndefined</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>다른 파일에서 기능 가져오기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Using ES5 (CommonJS) - index.js</span>\n<span class=\"token keyword\">const</span> helpers <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./helpers.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// helpers is an object</span>\n<span class=\"token keyword\">const</span> isNull <span class=\"token operator\">=</span> helpers<span class=\"token punctuation\">.</span>isNull<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isUndefined <span class=\"token operator\">=</span> helpers<span class=\"token punctuation\">.</span>isUndefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isNullOrUndefined <span class=\"token operator\">=</span> helpers<span class=\"token punctuation\">.</span>isNullOrUndefined<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 또는 환경에서 Destructuring을 지원하면</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isNull<span class=\"token punctuation\">,</span> isUndefined<span class=\"token punctuation\">,</span> isNullOrUndefined <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./helpers.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES6 Modules - index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> helpers <span class=\"token keyword\">from</span> <span class=\"token string\">'./helpers.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// helpers is an object</span>\n\n<span class=\"token comment\">// or</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isNull<span class=\"token punctuation\">,</span> isUndefined<span class=\"token punctuation\">,</span> isNullOrUndefined <span class=\"token keyword\">as</span> isValid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./helpers.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Named Exports의 이름을 바꿀 때 \"as\" 사용</span></code></pre></div>\n<p><strong>파일 또는 기본 내보내기<small>(Default Exports)</small>에서 단일 기능 내보내기</strong></p>\n<p><em>ES5 (CommonJS) 사용</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Using ES5 (CommonJS) - index.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Helpers</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isNullOrUndefined</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Helpers<span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>ES6 모듈 사용</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Using ES6 Modules - helpers.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Helpers</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isNullOrUndefined</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isUndefined</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Helpers</code></pre></div>\n<p><strong>다른 파일에서 단일 기능 가져오기</strong></p>\n<p><em>ES5 (CommonJS) 사용</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Using ES5 (CommonJS) - index.js</span>\n<span class=\"token keyword\">const</span> Helpers <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./helpers.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Helpers<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>ES6 모듈 사용</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Helpers <span class=\"token keyword\">from</span> <span class=\"token string\">'./helpers.js'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Helpers<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이것이 <strong>ES6 모듈</strong> 사용의 기본입니다.\n모듈은 광범위한 주제에 제 포스트는 정말 긴 관계로 모든 것을 다 설명하지 않겠습니다.</p>\n<h1>48. <code class=\"language-text\">Set</code> 객체는 무엇이며 어떻게 작동하는가? <a name=\"48\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>Set</strong> 객체는 고유값<small>(unique values)</small>, 원시값 또는 객체 참조를 저장할 수 있는 <strong>ES6</strong> 기능입니다.\nSet의 값은 한 번만 발생할 수 있습니다.\n<strong>SameValueZero</strong> 알고리즘을 사용하여 set 객체에 값이 있는지 확인합니다.</p>\n<p><code class=\"language-text\">Set</code> 생성자를 사용하여 <code class=\"language-text\">Set</code> 인스턴스를 만들 수 있습니다.\n그리고 선택적으로 <code class=\"language-text\">Iterable</code>을 초기 값으로 전달할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> set2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">add</code> 메서드를 사용해서 <code class=\"language-text\">Set</code> 인스턴스에 새로운 값을 추가할 수 있습니다.\n<code class=\"language-text\">add</code>는 Set 객체를 리턴하기 때문에 <code class=\"language-text\">add</code> 호출을 이을 수 있습니다.\n<code class=\"language-text\">Set</code> 개체에 값이 이미 존재한다면 다시 추가되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"j\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 마지막 \"k\"는 이미 존재하기 때문에 Set 객체에 추가되지 않습니다.</span></code></pre></div>\n<p><code class=\"language-text\">delete</code> 메서드를 사용해서 <code class=\"language-text\">Set</code> 인스턴스에 값을 삭제할 수 있습니다.\n이 메서드는 <code class=\"language-text\">Set</code> 객체에 같은 값이 존재하면 <code class=\"language-text\">true</code>를, 값이 존재하지 않으면 <code class=\"language-text\">false</code>를 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">set2<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns true, \"k\" 존재함</span>\nset2<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns false, \"z\" 존재하지 않음</span></code></pre></div>\n<p><code class=\"language-text\">size</code> 속성을 사용하여 <code class=\"language-text\">Set</code> 인스턴스의 길이를 구할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">set2<span class=\"token punctuation\">.</span>size <span class=\"token comment\">// returns 10</span></code></pre></div>\n<p><code class=\"language-text\">clear</code>를 사용하여 <code class=\"language-text\">Set</code> 인스턴스의 모든 요소를 ​​삭제하거나 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">set2<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// clears the set data</span></code></pre></div>\n<p><code class=\"language-text\">Set</code> 객체를 사용하여 배열에서 중복 요소를 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> uniqueNums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// has a value of [1,2,3,4,5,6,7,8]</span></code></pre></div>\n<h1>49. 콜백 함수란 무엇인가? <a name=\"49\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>콜백 함수</strong>는 나중에 호출될 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> btnAdd <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btnAdd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbtnAdd<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">clickCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something useless</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예제에서, id가 <strong>btnAdd</strong>인 엘리먼트의 <code class=\"language-text\">click event</code>를 기다립니다. <code class=\"language-text\">clicked</code>이면 <code class=\"language-text\">clickCallback</code> 함수가 실행됩니다.\n<strong>콜백 함수</strong>는 일부 데이터 또는 이벤트에 몇가지 기능을 추가합니다.\n배열의 <code class=\"language-text\">reduce</code>, <code class=\"language-text\">filter</code> 및 <code class=\"language-text\">map</code> 메서드는 콜백을 매개 변수로 사용합니다.\n콜백에 대한 좋은 비유는 누군가에게 전화를 걸 때 응답하지 않으면 메시지를 남기고 <strong>콜백</strong>을 기대합니다.\n누군가에게 전화하거나 메시지를 남기는 행위는 <strong>이벤트</strong> 또는 <strong>데이터</strong>입니다. 그리고 콜백은 <strong>나중에 발생할 것으로 예상되는 작업</strong>입니다.</p>\n<h1>50. <strong>프로미스<small>(Promises)</small></strong> 란 무엇인가? <a name=\"50\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>Promises</strong>는 <strong>JavaScript</strong>에서 비동기 작업을 처리하는 한 가지 방법입니다.\n이것은 비동기 작업의 값을 나타냅니다.\n<strong>Promises</strong>는 콜백을 사용하기 전에 비동기 코드를 동작하고 처리하는 문제를 해결하기 위해 만들어졌습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'somefile.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 접근 방법의 문제는 콜백 안에 다른 비동기 작업이 있고 또 더 있을 경우입니다.\n콜백 내부에 다른 비동기 작업이 있고 다른 작업이 있는 경우 이 방법의 문제입니다.\n이렇게 되면 엉망이고 읽을 수 없는 코드가 되어버립니다.\n이 코드를 <strong>콜백 지옥</strong>이라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//Callback Hell yucksss</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'somefile.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//your code here</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'directory'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> files</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//your code here</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'directory'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//your code here</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드에서 <strong>promises</strong>를 사용하면 더 읽기, 이해하기 및 유지관리도 쉽습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">promReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file/path'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">promReaddir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'directory'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">promMkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'directory'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Promises</strong>에는 3 가지 상태가 있습니다.</p>\n<p><strong>Pending</strong> - promise의 초기 상태. 작업이 아직 완료되지 않아서 promise의 결과는 아직 알려지지 않았습니다.</p>\n<p><strong>Fulfilled</strong> - 비동기 작업이 완료되고 성공한 결과값이 생깁니다.</p>\n<p><strong>Rejected</strong> - 비동기 작업이 실패했으며 실패한 <em>이유</em>가 생깁니다.</p>\n<p><strong>Settled</strong> - promise가 <strong>Fulfilled</strong> 또는 <strong>Rejected</strong>인 경우.</p>\n<p><strong>Promise</strong> 생성자에는 각각 함수 <code class=\"language-text\">resolve</code> 및 <code class=\"language-text\">resolve</code> 인 두 개의 매개 변수가 있습니다.\n비동기 작업이 에러없이 완료되면 <code class=\"language-text\">resolve</code> 함수를 호출해 <code class=\"language-text\">promise</code>을 처리하거나 에러가 발생하면 <code class=\"language-text\">reject</code> 함수를 호출해서 에러 난 이유를 전달합니다.\n그리고 <code class=\"language-text\">.then</code> 메서드를 사용해서 성공한 promise의 결과에 액세스 할 수 있으며 <code class=\"language-text\">.catch</code> 메서드를 사용해서는 에러를 포착합니다.\n<code class=\"language-text\">.then</code> 메서드는 위의 예제와 같이 <strong>Promise</strong>를 리턴하기 때문에 여러 개의 비동기 promise 작업을  <code class=\"language-text\">.then</code> 메서드에 연결할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myPromiseAsync</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomeAsync</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myPromiseAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>콜백으로 비동기 작업을 promise로 변환하는 헬퍼 함수를 만들 수 있습니다.\n이것은 노드 코어 모듈 <code class=\"language-text\">util</code>과 같은 작동을 하는 promise 유틸리티 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toPromise</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">asyncFuncWithCallback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">asyncFuncWithCallback</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> e <span class=\"token operator\">?</span> <span class=\"token function\">rej</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> promReadFile <span class=\"token operator\">=</span> <span class=\"token function\">toPromise</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span>readFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">promReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file/path'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>51. <em>async/await</em>란 무엇이며 어떻게 작동하는가? <a name=\"51\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<em>async/await</em>는 JavaScript에서 비동기 또는 비 차단<small>(non-blocking)</small> 코드를 작성하는 새로운 방법입니다.\n<strong>Promises</strong> 위에 만들어졌습니다.\n이것은 <a href=\"#50\">Promises</a> 와 <a href=\"#49\">Callbacks</a>보다 비동기 코드 작성을 더 읽기 쉽고 깔끔하게 만듭니다.\n그러나 이 기능을 사용하기 전에 <strong>Promises</strong>의 기본을 배워야합니다.\n앞서 이야기한 바대로, 이것은 <strong>Promises</strong> 위에 만들어졌기 때문에 여전히 <strong>Promises</strong> 속에서 사용합니다.</p>\n<p>Promises 사용.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url/to/api/endpoint\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//do something with \"data\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//do something with \"err\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Async/Await 사용.</p>\n<p><strong>Note</strong>: 이전 <em>try/catch</em> 문을 사용하여 <em>try</em> 문 내부의 비동기 작업에서 발생한 에러를 포착합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url/to/api/endpoint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//do something with \"data\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//do something with \"err\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note</strong>: 함수 선언 이전의 <em>async</em> 키워드는 함수가 암시적으로 <strong>Promise</strong>를 리턴하도록 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">giveMeOne</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note</strong>: <em>await</em> 키워드는 <strong>비동기 함수</strong> 내에서만 사용할 수 있습니다.\n<strong>비동기 함수</strong>가 아닌 다른 함수에서 <em>await</em> 키워드를 사용하면 에러를 던집니다.\n<em>await</em> 키워드는 다음 코드 줄을 실행하기 전에 오른쪽 표현식 (아마도 <strong>Promise</strong>)이 리턴되기를 기다립니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">giveMeOne</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Compile-Time Error = Uncaught SyntaxError 발생: await는 비동기 함수에서만 유효합니다.</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 비동기 작업을 먼저 마치고</span>\n    <span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">giveMeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 라인이 작동</span>\n    <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">getTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 2</span></code></pre></div>\n<h1>52. <strong>스프레드 연산자<small>(Spread operator)</small></strong> 와 <strong>나머지 연산자<small>(Rest operator)</small></strong> 의 차이점은 무엇인가? <a name=\"52\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>스프레드 연산자</strong>와 <strong>나머지 매개 변수</strong>는 동일한 연산자 <code class=\"language-text\">...</code>를 가집니다.\n차이점은 배열의 개별 데이터를 다른 데이터에 건네주거나 분산시키는 것이 <strong>스프레드 연산자</strong>이고 반면에 <strong>나머지 매개 변수</strong>는 함수 또는 배열에서 모든 인수나 값을 가져와서 배열에 넣거나 일부를 빼내는데 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예제에서는 nums 배열을 분산시키는 <code class=\"language-text\">add</code> 함수를 호출 할 때 <strong>스프레드 연산자</strong>를 사용합니다.\n따라서 매개 변수 <code class=\"language-text\">a</code>의 값은 <strong>5</strong>, <code class=\"language-text\">b</code>의 값은 <strong>6</strong>이 됩니다. 그리고 결과는 <strong>11</strong>이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span>current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 15</span></code></pre></div>\n<p>이 예제에서는 많은 인수를 받는 <code class=\"language-text\">add</code> 함수가 있고 그 모두를 추가하며 total을 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>others<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>others<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs [2,3,4,5]</span></code></pre></div>\n<p>여기에 있는 또다른 예제에서는 나머지 연산자를 사용하여 나머지 배열 값들을 추출하고 그것들 중 <code class=\"language-text\">first</code> 아이템만 제외해서 배열 <code class=\"language-text\">others</code>에 넣습니다.</p>\n<h1>53. <strong>기본 매개 변수<small>(Default Parameters)</small></strong> 란 무엇인가? <a name=\"53\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>기본 매개 변수</strong>는 <strong>JavaScript</strong>에서 기본 변수를 정의하는 새로운 방법으로 <strong>ES6</strong> 또는 <strong>ECMAScript 2015</strong> 버전에서 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES5 Version</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  b <span class=\"token operator\">=</span> b <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6 Version</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 'a'나 'b'에 어떤 인자도 넘기지 않으면 0인 \"default parameter\"를 사용할 것입니다</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 1</span></code></pre></div>\n<p><strong>기본 매개 변수</strong>에서 <strong>구조 분해<small>(Destructuring)</small></strong> 를 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> first<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns 0</span>\n<span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns 10</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getArr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> nums <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> nums<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns [1, 2, 3, 4]</span>\n<span class=\"token function\">getArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>nums<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns [5,4,3,2,1]</span></code></pre></div>\n<p>또한 먼저 정의된 매개 변수를 그 뒤에 정의된 매개 변수에 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingWithValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomethingWithValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs \"Hello World\"</span></code></pre></div>\n<h1>54. <strong>래퍼 객체<small>(Wrapper Objects)</small></strong> 란 무엇인가? <a name=\"54\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>를 제외하고 <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code> 및 <code class=\"language-text\">boolean</code>과 같은 <strong>원시값<small>(Primitive Values)</small></strong>에는 객체가 아니더라도 속성 및 메서드가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"marko\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs  \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs  \"MARKO\"</span></code></pre></div>\n<p><code class=\"language-text\">name</code> is a <code class=\"language-text\">primitive string</code> value that has no properties and methods\n<code class=\"language-text\">name</code>은 속성과 메서드가 없는 <code class=\"language-text\">primitive string</code> 값입니다.\n하지만 이 예제에서는 에러를 던지진 않지만 <code class=\"language-text\">MARKO</code>를 반환하는 <code class=\"language-text\">toUpperCase ()</code> 메서드를 호출합니다.</p>\n<p>그 이유는 <code class=\"language-text\">primitive</code> 값이 일시적으로 변환되거나 객체로 강제하기 때문입니다. 그래서 <code class=\"language-text\">name</code> 변수는 객체처럼 동작합니다.\n<code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>를 제외한 모든 <code class=\"language-text\">primitive</code>에는 <strong>Wrapper Object</strong>가 있습니다.\n래퍼 객체는 <code class=\"language-text\">String</code>, <code class=\"language-text\">Number</code>, <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">Symbol</code> 및 <code class=\"language-text\">BigInt</code>입니다.\n여기서는 <code class=\"language-text\">name.toUpperCase()</code> 호출 장면 뒷모습이 다음과 같이 보입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs  \"MARKO\"</span></code></pre></div>\n<p>새로 만든 객체는 속성에 액세스하거나 메서드 호출을 끝나면 즉시 삭제됩니다.</p>","frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 3부(번역)","date":"January 22, 2020","description":"70 JavaScript Interview Questions","tags":"javascript, interview, translation"}}},"pageContext":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-3/","previous":{"fields":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-2/"},"frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 2부(번역)"}},"next":null}}}