{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/2020/es2016-es2020/",
    "result": {"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"83a43b4d-2cd5-5699-aed4-ed40286ebdc2","excerpt":"여러 가지 일로 바빴던 터라 오랜만에 글을 씁니다.\n무엇을 쓸까 고민하다가 올 초에 ES2020이 발표되고 언제 한번 모아서 정리 혹은 공부할 겸 쓰려 했었는데 이제야 하게 되네요. ES2015(ES6)는 이미 현업에서도 많이 사용되고 알려져 있으니 제외하고 ES2016부터 ES202…","html":"<p>여러 가지 일로 바빴던 터라 오랜만에 글을 씁니다.\n무엇을 쓸까 고민하다가 올 초에 ES2020이 발표되고 언제 한번 모아서 정리 혹은 공부할 겸 쓰려 했었는데 이제야 하게 되네요.</p>\n<p>ES2015(ES6)는 이미 현업에서도 많이 사용되고 알려져 있으니 제외하고 ES2016부터 ES2020까지 빠르게 발전하고 있는 JavaScript의 추가점을 살펴보겠습니다.</p>\n<h1 id=\"es2016\" style=\"position:relative;\"><a href=\"#es2016\" aria-label=\"es2016 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2016</h1>\n<p>ECMAScript 2016으로 알려진 ES2016은 2016년 6월에 발표되었습니다.\n대규모 업데이트였던 ES2015와 달리 ES2016은 두 가지 기능만 포함한 소규모 수준의 업데이트였습니다.</p>\n<h3 id=\"arrayprototypeincludes\" style=\"position:relative;\"><a href=\"#arrayprototypeincludes\" aria-label=\"arrayprototypeincludes permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.prototype.includes()</h3>\n<ul>\n<li>배열이 특정 요소가 존재하는지를 확인합니다.</li>\n<li>ES6 이하의 경우 <code class=\"language-text\">indexOf()</code>를 사용했었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arr.includes(valueToFind[, fromIndex])</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span></code></pre></div>\n<h3 id=\"exponentiation-operator\" style=\"position:relative;\"><a href=\"#exponentiation-operator\" aria-label=\"exponentiation operator permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exponentiation Operator</h3>\n<ul>\n<li>제곱의 값을 구할 경우 사용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Math.pow(base, exponent)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h1 id=\"es2017\" style=\"position:relative;\"><a href=\"#es2017\" aria-label=\"es2017 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2017</h1>\n<p>2017년 6월에 발표되었으며 <code class=\"language-text\">async</code>와 <code class=\"language-text\">await</code>가 바로 이시기에 도입되었습니다.</p>\n<h3 id=\"asyncawait-functions\" style=\"position:relative;\"><a href=\"#asyncawait-functions\" aria-label=\"asyncawait functions permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async/Await Functions</h3>\n<ul>\n<li>ES6의 <code class=\"language-text\">Promise</code> 보다 더 유용하며 덜 복잡합니다.</li>\n<li>비동기 함수 간 연계를 쉽게 할 수 있으며 가독성은 일반 <code class=\"language-text\">Promise</code>보다 훨씬 더 좋습니다.</li>\n<li><code class=\"language-text\">await</code>는 항상 <code class=\"language-text\">async</code>와 함께 사용하여야 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// async, await</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleAsync</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">handleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Hi -> Bye -> Async</span></code></pre></div>\n<h3 id=\"stringprototypepadstart-stringprototypepadend\" style=\"position:relative;\"><a href=\"#stringprototypepadstart-stringprototypepadend\" aria-label=\"stringprototypepadstart stringprototypepadend permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String.prototype.padStart(), String.prototype.padEnd()</h3>\n<ul>\n<li>문자열에 패딩을 처리합니다.</li>\n<li>현재 문자열의 길이보다 작다면 값 변경 없이 그대로 리턴합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// String.prototype.padStart(targetLength [, padString])</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"       txt\"</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"wowwowwtxt\"</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123465\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"123txt\"</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"00000txt\"</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"txt\"</span>\n\n<span class=\"token comment\">// String.prototype.padEnd(targetLength [, padString])</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"txt       \"</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"txtwowwoww\"</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"txt123\"</span>\n<span class=\"token string\">'txt'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// \"txt\"</span></code></pre></div>\n<h3 id=\"objectvalues\" style=\"position:relative;\"><a href=\"#objectvalues\" aria-label=\"objectvalues permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.values()</h3>\n<ul>\n<li>객체의 <code class=\"language-text\">value</code> 값을 모은 배열을 리턴합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['1', '2']</span></code></pre></div>\n<h3 id=\"objectentries\" style=\"position:relative;\"><a href=\"#objectentries\" aria-label=\"objectentries permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.entries()</h3>\n<ul>\n<li>모든 객체 소유 속성을 <code class=\"language-text\">[key, value]</code>의 값의 배열로 모아 리턴합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[ 'a', '1' ], [ 'b', '2' ]] </span></code></pre></div>\n<h3 id=\"objectgetownpropertydescriptors\" style=\"position:relative;\"><a href=\"#objectgetownpropertydescriptors\" aria-label=\"objectgetownpropertydescriptors permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.getOwnPropertyDescriptors()</h3>\n<ul>\n<li>객체의 모든 속성 설명을 리턴합니다.\n<ol>\n<li>value: 속성 값</li>\n<li>writable: <code class=\"language-text\">true</code>일 경우 속성을 변경할 수 있습니다.</li>\n<li>get: 속성을 읽을 때 호출되는 속성에 대한 <code class=\"language-text\">getter</code> 함수</li>\n<li>set: 속성이 값으로 설정 될 때 호출되는 속성에 대한 <code class=\"language-text\">setter</code> 함수</li>\n<li>configurable: <code class=\"language-text\">false</code> 인 경우 속성을 제거하거나 해당 값을 제외하고 속성을 변경할 수 없습니다.</li>\n<li>enumerable: 속성이 열거 가능한 경우 <code class=\"language-text\">true</code> 입니다.</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">key1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">key2</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { key1: { value: 1, writable: true, enumerable: true, configurable: true }, </span>\n<span class=\"token comment\">//   key2: { value: 2, writable: true, enumerable: true, configurable: true } } </span></code></pre></div>\n<h3 id=\"trailing-commas\" style=\"position:relative;\"><a href=\"#trailing-commas\" aria-label=\"trailing commas permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trailing Commas</h3>\n<ul>\n<li>함수 선언 및 함수 호출 시 인자나 매개변수 마지막에 쉼표를 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variable1<span class=\"token punctuation\">,</span> variable2<span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"sharedarraybuffer\" style=\"position:relative;\"><a href=\"#sharedarraybuffer\" aria-label=\"sharedarraybuffer permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SharedArrayBuffer</h3>\n<ul>\n<li><code class=\"language-text\">WebWorkers</code>는 브라우저에서 다중 스레드 프로그램을 만드는 데 사용되며 이벤트를 통해 메시징 프로토콜을 제공합니다. (병렬처리에 사용되는 방법)</li>\n<li><code class=\"language-text\">WebWorkers</code>의 <code class=\"language-text\">worker</code>들은 각각 분리된 전역 환경에서 실행되기 때문에 그들이나 메인 스레드 간의 통신을 간접적인 방법으로(데이터 복사) 처리합니다.</li>\n<li>이런 간접적인 방법은 오버헤드 등의 문제를 야기하는데 <code class=\"language-text\">SharedArrayBuffer</code> 객체는 <code class=\"language-text\">worker</code> 나 메인 스레드 간에 데이터 공유를 통해 이를 해결할 수 있는 기능을 합니다.</li>\n<li><code class=\"language-text\">SharedArrayBuffer</code> 객체를 사용할 때 읽기 및 쓰기 등을 <code class=\"language-text\">Atomics</code> 객체를 사용해서 관리합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// create a SharedArrayBuffer with 1024 byte</span>\n<span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuffer<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1024</span></code></pre></div>\n<h1 id=\"es2018\" style=\"position:relative;\"><a href=\"#es2018\" aria-label=\"es2018 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2018</h1>\n<p>2018년 6월에 발표되었습니다. <code class=\"language-text\">Object</code>에도 <code class=\"language-text\">Rest</code>와 <code class=\"language-text\">Spread</code> 문법이 도입되는 등 큰 변화는 아니지만 주목할만한 점들이 몇몇 있었습니다.</p>\n<h3 id=\"object-restspread-properties\" style=\"position:relative;\"><a href=\"#object-restspread-properties\" aria-label=\"object restspread properties permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Rest/Spread Properties</h3>\n<ul>\n<li>가장 많이 사용되는 기능 중 하나로 ES2015에서 발표된 Array의 Rest/Spread와 동일합니다.</li>\n<li>얕은 복제(prototype 제외) 또는 객체의 병합 그리고 <code class=\"language-text\">Object.assign()</code> 보다 더 짧고 쉬운 문법을 사용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Rest</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span>\n\na <span class=\"token comment\">// 1</span>\nb <span class=\"token comment\">// 2</span>\nrest <span class=\"token comment\">// { c: 3 }</span>\n\n<span class=\"token comment\">// Spread</span>\n<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nitems <span class=\"token comment\">// { a: 1, b: 2, c: 3 }</span></code></pre></div>\n<h3 id=\"asynchronous-iteration\" style=\"position:relative;\"><a href=\"#asynchronous-iteration\" aria-label=\"asynchronous iteration permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asynchronous Iteration</h3>\n<ul>\n<li>여러 비동기문을 <code class=\"language-text\">for await (...of...)</code>를 사용하여 반복작업을 쉽게 다룰 수 있습니다.</li>\n<li>포함된 비동기문들을 <code class=\"language-text\">Promise.all</code>의 경우는 동시적으로 실행되고 <code class=\"language-text\">for await (...of...)</code>의 경우는 순차적으로 실행됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> iterableItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"promiseprototypefinally\" style=\"position:relative;\"><a href=\"#promiseprototypefinally\" aria-label=\"promiseprototypefinally permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.prototype.finally()</h3>\n<ul>\n<li><code class=\"language-text\">Promise</code>가 성공적으로 전개되면 <code class=\"language-text\">then()</code>을 호출하고 이 과정에서 실패하면 대신 <code class=\"language-text\">catch()</code>가 호출됩니다.</li>\n<li><code class=\"language-text\">finally()</code>는 성공 여부와는 관계없이 호출됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// start</span>\n<span class=\"token comment\">// finally</span></code></pre></div>\n<h3 id=\"regexp-features\" style=\"position:relative;\"><a href=\"#regexp-features\" aria-label=\"regexp features permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RegExp Features</h3>\n<h5>Lookbehind Assertions</h5>\n<ul>\n<li><code class=\"language-text\">Lookbehind</code>는 특정 문자열 뒤에 오는 문자열을 찾아줍니다.</li>\n<li>이전에는 특정 문자열 앞에 오는 문자열을 찾는 <code class=\"language-text\">Lookahead</code>만 존재했습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Positive and Negative lookahead</span>\n<span class=\"token comment\">// X(?=Y): X를 찾지만 Y가 뒤에 오는 경우에만 가능</span>\n<span class=\"token comment\">// X(?!Y): 반대</span>\n<span class=\"token keyword\">const</span> lookahead1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">im(?=possible)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is impossible.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lookahead2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">im(?!possible)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is impossible.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// Positive and Negative lookbehind</span>\n<span class=\"token comment\">// (?&lt;=Y)X: X와 일치하지만, 앞에 Y가 있는 경우에만 가능</span>\n<span class=\"token comment\">// (?&lt;!Y)X: 반대</span>\n<span class=\"token keyword\">const</span> lookbehind1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;=super)hero</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Batman is the superhero protector of Gotham City.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lookbehind2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;!super)hero</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Batman is the superhero protector of Gotham City.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<h5><code class=\"language-text\">s</code> Flag</h5>\n<ul>\n<li><code class=\"language-text\">.</code>는 <code class=\"language-text\">\\n</code>과 <code class=\"language-text\">\\r</code>을 제외한 모든 문자와 일치하는 정규식 패턴입니다.</li>\n<li>추가된 <code class=\"language-text\">s</code>는 줄 바꿈을 일치하고자 할 때 사용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hellow.world</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hellow\\nworld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>hellow<span class=\"token punctuation\">.</span>world<span class=\"token operator\">/</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hellow\\nworld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h5>Unicode Property Escapes <code class=\"language-text\">\\p{...}</code> and <code class=\"language-text\">\\P{...}</code></h5>\n<ul>\n<li>긍정인 <code class=\"language-text\">\\p{...}</code>와 부정인 <code class=\"language-text\">\\P{...}</code>로 유니코드를 확인하는데 사용합니다.</li>\n<li>속성확인은 <a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link</a> 에서 가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Uppercase, Lowercase, White_Space, Alphabetic, Emoji 등</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\p<span class=\"token punctuation\">{</span>Lowercase<span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\p<span class=\"token punctuation\">{</span>Emoji<span class=\"token punctuation\">}</span><span class=\"token operator\">+</span>$<span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'🙃'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h5>Named Capturing Groups</h5>\n<ul>\n<li>캡쳐링 그룹은 정규 표현식에서 괄호로 묶은 것을 말합니다.</li>\n<li>결과값에 번호로 할당하는 대신 이름을 지정하여 할당 할 수 있습니다.</li>\n<li>이는 <code class=\"language-text\">groups</code>로 접근할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year>\\d{4})-(?&lt;month>\\d{2})-(?&lt;day>\\d{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2020-09-20'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result.groups</span>\n<span class=\"token comment\">// { year: '2020', month: '09', day: '20' } </span></code></pre></div>\n<h1 id=\"es2019\" style=\"position:relative;\"><a href=\"#es2019\" aria-label=\"es2019 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2019</h1>\n<p>2019년 6월에 발표되었습니다. 변화가 적은 업데이트였습니다.</p>\n<h3 id=\"arrayprototypeflat-arrayprototypeflatmap\" style=\"position:relative;\"><a href=\"#arrayprototypeflat-arrayprototypeflatmap\" aria-label=\"arrayprototypeflat arrayprototypeflatmap permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.prototype.flat(), Array.prototype.flatMap()</h3>\n<ul>\n<li>다차원 배열에서 1차원 배열로 만들 수 있습니다.</li>\n<li>지정된 깊이를 선언함으로써 원하는 깊이 만큼 결과를 얻을 수 있습니다.</li>\n<li><code class=\"language-text\">flatMap()</code>은 <code class=\"language-text\">map()</code>과 <code class=\"language-text\">flat()</code>을 하나로 결합한 것 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Array.prototype.flat()</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mango'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 'apple', 'banana', 'mango' ]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mango'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 'apple', 'banana', [ 'mango' ] ]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mango'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 'apple', 'banana', 'mango' ]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mango'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 'apple', 'banana', 'mango' ]</span>\n\n<span class=\"token comment\">// Array.prototype.flatMap()</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'My name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is Shin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">words</span> <span class=\"token operator\">=></span> words<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ [ 'My', 'name' ], [ 'is', 'Shin' ] ]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'My name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is Shin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">words</span> <span class=\"token operator\">=></span> words<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 'My', 'name', 'is', 'Shin' ]</span></code></pre></div>\n<h3 id=\"objectfromentries\" style=\"position:relative;\"><a href=\"#objectfromentries\" aria-label=\"objectfromentries permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.fromEntries()</h3>\n<ul>\n<li>ES2017에서 추가된 <code class=\"language-text\">Object.entries()</code> 반대 기능입니다.</li>\n<li>파이썬의 <code class=\"language-text\">dict()</code>함수와 비슷하게 Key/Value의 배열을 객체로 변환합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">second</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">third</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> entries <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ [ 'first', 1 ], [ 'second', 2 ], [ 'third', 3 ] ] </span>\n<span class=\"token keyword\">const</span> fromEntries <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { first: 1, second: 2, third: 3 } </span></code></pre></div>\n<h3 id=\"stringprototypetrimstart-stringprototypetrimend\" style=\"position:relative;\"><a href=\"#stringprototypetrimstart-stringprototypetrimend\" aria-label=\"stringprototypetrimstart stringprototypetrimend permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String.prototype.trimStart(), String.prototype.trimEnd()</h3>\n<ul>\n<li><code class=\"language-text\">trimLeft()</code> 및 <code class=\"language-text\">trimRight()</code> 메서드와 동일합니다.</li>\n<li><code class=\"language-text\">padStart()</code>와 <code class=\"language-text\">padEnd()</code>와의 일관성 유지를 위해 도입되었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'   Hello world!   '</span><span class=\"token punctuation\">;</span>\ngreeting<span class=\"token punctuation\">.</span><span class=\"token function\">trimStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Hello world!   \";</span>\n\ngreeting<span class=\"token punctuation\">.</span><span class=\"token function\">trimEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"   Hello world!\";</span></code></pre></div>\n<h3 id=\"symbolprototypedescription\" style=\"position:relative;\"><a href=\"#symbolprototypedescription\" aria-label=\"symbolprototypedescription permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.prototype.description</h3>\n<ul>\n<li>Symbol을 만들 때 <code class=\"language-text\">description</code>을 추가할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> symbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test Symbol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsymbol<span class=\"token punctuation\">.</span>description <span class=\"token comment\">// Test Symbol</span></code></pre></div>\n<h3 id=\"optional-catch-binding\" style=\"position:relative;\"><a href=\"#optional-catch-binding\" aria-label=\"optional catch binding permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Catch Binding</h3>\n<ul>\n<li>가끔 try/catch의 <code class=\"language-text\">catch</code> 블록에 매개 변수를 바인딩 할 필요가 없을때 제외 가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handle error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"functionprototypetostring\" style=\"position:relative;\"><a href=\"#functionprototypetostring\" aria-label=\"functionprototypetostring permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function.prototype.toString()</h3>\n<ul>\n<li>함수에는 항상 코드를 포함하여 문자열을 리턴하는 <code class=\"language-text\">toString()</code> 라는 메서드가 있습니다.</li>\n<li>기존에는 주석 및 기타 문자 등이 제거된 채 리턴하였으나 이제는 정의 된 대로 정확하게 리턴합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token comment\">/* test */</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// before</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'function test() { // ... }</span>\n<span class=\"token comment\">// after</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'function /* test */ test () { // ... }'</span></code></pre></div>\n<h3 id=\"json-개선\" style=\"position:relative;\"><a href=\"#json-%EA%B0%9C%EC%84%A0\" aria-label=\"json 개선 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON 개선</h3>\n<ul>\n<li>이 변경 전에는 JSON으로 분석 된 문자열에서 줄 구분 기호(\\u2028) 및 단락 구분 기호(\\u2029) 기호가 허용되지 않았습니다.</li>\n<li><code class=\"language-text\">JSON.parse()</code>를 사용하면 해당 문자 때문에 <code class=\"language-text\">SyntaxError</code>가 발생했지만, 이제는 JSON 표준에 정의 된 대로 올바르게 구문 분석됩니다.</li>\n</ul>\n<h3 id=\"jsonstringify-개선\" style=\"position:relative;\"><a href=\"#jsonstringify-%EA%B0%9C%EC%84%A0\" aria-label=\"jsonstringify 개선 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON.stringify() 개선</h3>\n<ul>\n<li>이전 경우 가끔 문자열과 코드, 특히 UTF-8로 표현 할 수 없는 값(U + D800-U + DFFF)을 반환합니다.</li>\n<li>ES2019에서는 잘못된 형식의 유니코드 문자열을 반환하는 것을 방지합니다.</li>\n</ul>\n<h1 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2020</h1>\n<p>코로나로 어수선한 올해인 2020년 6월에 발표되었습니다. ES2016에서 ES2019까지도 그랬지만 ES2020도 ES2015에 등장한 것만큼 새로운 기능이 포함되어 있지 않습니다.</p>\n<h3 id=\"bigint\" style=\"position:relative;\"><a href=\"#bigint\" aria-label=\"bigint permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BigInt</h3>\n<ul>\n<li>JavaScript에서 정수로 저장할 수있는 최대 수는 <code class=\"language-text\">pow(2, 53) - 1</code> 입니다.</li>\n<li><code class=\"language-text\">BigInt</code>는 그 이상을 처리할 수 있습니다.</li>\n<li><code class=\"language-text\">BigInt()</code>로 선언하거나 숫자 뒤에 <code class=\"language-text\">n</code>을 붙입니다.</li>\n<li><code class=\"language-text\">BigInt</code>간에 계산이 가능하며 소수점 표현은 불가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 9007199254740991</span>\n<span class=\"token comment\">// typeof number === 'number'</span>\n\n<span class=\"token keyword\">const</span> bigInt1 <span class=\"token operator\">=</span> <span class=\"token number\">9007199254740992n</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bigInt2 <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740992</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 9007199254740992</span>\n<span class=\"token comment\">// typeof bigInt1, typeof bigInt1 === 'bigint'</span></code></pre></div>\n<h3 id=\"dynamic-import\" style=\"position:relative;\"><a href=\"#dynamic-import\" aria-label=\"dynamic import permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Import</h3>\n<ul>\n<li>이제 모듈을 동적으로 import 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> module <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"globalthis\" style=\"position:relative;\"><a href=\"#globalthis\" aria-label=\"globalthis permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>globalThis</h3>\n<ul>\n<li>브라우저의 전역객체는 <code class=\"language-text\">window</code>이고 Node.js의 전역객체는 <code class=\"language-text\">global</code>입니다.</li>\n<li><code class=\"language-text\">globalThis</code>는 분기가 필요없는 하나로 통합된 전역객체입니다.</li>\n<li>기존 <code class=\"language-text\">window</code>나 <code class=\"language-text\">global</code>도 사용 가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Browser</span>\nglobalThis <span class=\"token operator\">===</span> window <span class=\"token comment\">// true;</span>\n\n<span class=\"token comment\">// Node.js</span>\nglobalThis <span class=\"token operator\">===</span> global <span class=\"token comment\">// true;</span></code></pre></div>\n<h3 id=\"stringprototypematchall\" style=\"position:relative;\"><a href=\"#stringprototypematchall\" aria-label=\"stringprototypematchall permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String.prototype.matchAll()</h3>\n<ul>\n<li>정규식에서 일치하는 모든 그룹을 포함하는 반복자를 리턴합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> regexp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-c]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token string\">'ABC, abc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { [Iterator] }</span>\n\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// val</span>\n  <span class=\"token comment\">// [ 'a', index: 5, input: 'ABC, abc', groups: undefined ] </span>\n  <span class=\"token comment\">// [ 'b', index: 6, input: 'ABC, abc', groups: undefined ] </span>\n  <span class=\"token comment\">// [ 'c', index: 7, input: 'ABC, abc', groups: undefined ] </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"promiseallsettled\" style=\"position:relative;\"><a href=\"#promiseallsettled\" aria-label=\"promiseallsettled permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.allSettled()</h3>\n<ul>\n<li><code class=\"language-text\">Promise.all()</code>은 요청된 비동기 그룹 중 하나라도 실패할 경우 <code class=\"language-text\">catch</code> 블록으로 이동합니다.</li>\n<li><code class=\"language-text\">Promise.allSettled()</code>는 성공과 실패여부에 관계없이 모두 응답이 처리 되었을 경우 <code class=\"language-text\">then</code> 블록으로 이동합니다.</li>\n<li>하나의 실패가 다른 요청의 성공에 영향을 미치지 않을 때 사용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// result[0] { status: 'fulfilled', value: 'ok' }</span>\n  <span class=\"token comment\">// result[1] { status: 'rejected', reason: 'wrong data' }</span>\n  <span class=\"token comment\">// result[2] { status: 'fulfilled', value: 'ok' }</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"nullish-coalescing\" style=\"position:relative;\"><a href=\"#nullish-coalescing\" aria-label=\"nullish coalescing permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nullish Coalescing</h3>\n<ul>\n<li>기존 <code class=\"language-text\">||</code> 연산자에서는 <code class=\"language-text\">falsey</code>값을 모두 확인합니다.</li>\n<li><code class=\"language-text\">??</code> 연산자는 <code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code> 값만 확인합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">??</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n\n<span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">??</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n\n<span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">??</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">??</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span></code></pre></div>\n<h3 id=\"optional-chaining\" style=\"position:relative;\"><a href=\"#optional-chaining\" aria-label=\"optional chaining permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Chaining</h3>\n<ul>\n<li>존재여부를 정확히 알 수 없는 객체의 값을 구하기 위해선 <code class=\"language-text\">&amp;&amp;</code> 연산자를 사용하여 길게 값을 이어 확인해야 합니다.</li>\n<li>추가된 <code class=\"language-text\">Optional Chaining</code>기법인 <code class=\"language-text\">?</code>를 사용하여 짧게 구할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">values</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// before</span>\nobj <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>props <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>values <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span>first\n\n<span class=\"token comment\">// after</span>\nobj<span class=\"token operator\">?.</span>props<span class=\"token operator\">?.</span>values<span class=\"token operator\">?.</span>first</code></pre></div>\n<h3 id=\"module-namespace-exports\" style=\"position:relative;\"><a href=\"#module-namespace-exports\" aria-label=\"module namespace exports permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module Namespace Exports</h3>\n<ul>\n<li><code class=\"language-text\">import</code>구문에서만 가능하던 것이 <code class=\"language-text\">export</code>도 가능하게 되었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// import</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> item <span class=\"token keyword\">from</span> <span class=\"token string\">'./item.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// export</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> item <span class=\"token keyword\">from</span> <span class=\"token string\">'./item.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"importmeta\" style=\"position:relative;\"><a href=\"#importmeta\" aria-label=\"importmeta permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>import.meta</h3>\n<ul>\n<li><code class=\"language-text\">import.meta</code>객체를 사용하여 모듈에 대한 메타 정보를 얻습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"test\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"test.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">;</span> <span class=\"token comment\">// { url: \"file:///home/user/test.js\" }</span></code></pre></div>\n<h3 id=\"for-in-개선\" style=\"position:relative;\"><a href=\"#for-in-%EA%B0%9C%EC%84%A0\" aria-label=\"for in 개선 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for-in 개선</h3>\n<ul>\n<li>기존의 ECMA는 <code class=\"language-text\">for (x in y)</code>의 실행할 순서를 정하지 않았습니다.</li>\n<li>브라우저는 지금까지 자체적으로 일관된 순서를 구현했지만 이제 ES2020에서 공식적으로 표준화되었습니다.</li>\n</ul>","frontmatter":{"title":"ES2016에서 ES2020까지 추가된 기능들","date":"2020-09-20","description":"알아두면 도움되는 ES2016 ~ ES2020 기능들","tags":"javascript"}}},"pageContext":{"slug":"/blog/2020/es2016-es2020/","previous":{"fields":{"slug":"/blog/2020/redux-mobx/"},"frontmatter":{"title":"Redux와 Mobx 어떤 것을 쓸까?"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%9E%91\">시작</a></p>\n</li>\n<li>\n<p><a href=\"#redux\">Redux</a></p>\n</li>\n<li>\n<p><a href=\"#mobx\">Mobx</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B8%EA%B8%B0\">인기</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#redux-1\">Redux</a></li>\n<li><a href=\"#mobx-1\">Mobx</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%83%81%ED%83%9C\">상태</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B6%88%EB%B3%80%EC%84%B1-%EA%B0%80%EB%B3%80%EC%84%B1\">불변성, 가변성</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%99%EC%8A%B5\">학습</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B6%94%EA%B0%80-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\">추가 라이브러리</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>"},"next":{"fields":{"slug":"/blog/2020/abem/"},"frontmatter":{"title":"Atomic Design과 BEM (ABEM)"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%99%9C-%EC%A4%91%EC%9A%94%ED%95%A0%EA%B9%8C\">왜 중요할까?</a></p>\n</li>\n<li>\n<p><a href=\"#atomic-design\">Atomic Design</a></p>\n<ul>\n<li><a href=\"#atoms-%EC%9B%90%EC%9E%90\">Atoms (원자)</a></li>\n<li><a href=\"#molecules-%EB%B6%84%EC%9E%90\">Molecules (분자)</a></li>\n<li><a href=\"#organisms-%EC%9C%A0%EA%B8%B0%EC%B2%B4\">Organisms (유기체)</a></li>\n<li><a href=\"#templates-%ED%85%9C%ED%94%8C%EB%A6%BF\">Templates (템플릿)</a></li>\n<li><a href=\"#pages-%ED%8E%98%EC%9D%B4%EC%A7%80\">Pages (페이지)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#bem\">BEM</a></p>\n<ul>\n<li><a href=\"#block\">Block</a></li>\n<li><a href=\"#element\">Element</a></li>\n<li><a href=\"#modifier\">Modifier</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#abem\">ABEM</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></p>\n</li>\n</ul>"}}},
    "staticQueryHashes": ["1137390604","3980716358"]}