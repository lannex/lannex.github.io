{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2020/About-Functional-Programming/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"40a4fc88-b5f5-5dea-8309-0820285760ff","excerpt":"…","html":"<h1>시작</h1>\n<p>소프트웨어 개발을 한다면 객체지향 프로그래밍이라던지 함수형 프로그래밍이라는 프로그래밍 패러다임을 자주 접할 수 있을 것이다.\n그중 함수형 프로그래밍은 몇 년 전부터 화제가 되어왔고 특히 자바스크립트 세계에서는 너무도 쉽게 접할 수 있는 단어가 되어 버렸다.\n그렇다면 함수형 프로그래밍은 무엇인가?</p>\n<p>간단히 정의하자면 함수형 프로그래밍은 <a href=\"https://ko.wikipedia.org/wiki/%EB%AA%85%EB%A0%B9%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">명령형</a>이 아닌 <a href=\"https://ko.wikipedia.org/wiki/%EC%84%A0%EC%96%B8%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">선언형</a>이며 순수 함수<small>(pure function)</small>를 사용, 조합하여 소프트웨어를 구현하는 프로세스이다.</p>\n<h1>순수 함수</h1>\n<p>함수형 프로그래밍은 순수 함수로 작성되다보니 부수효과<small>(side effect)</small>가 없다. 여기서 순수 함수란 프로그램에 어떠한 변화를 일으키지 않으며 같은 입력이면 같은 출력만이 존재하는 함수 형태로 결과를 예측 가능 할 수 있어서 테스트 실행에도 큰 이점을 가져다준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 외부 변수가 함수 결과값에 영향</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span>\n\n<span class=\"token comment\">// 오직 인자만이 함수 결과값에 영향</span>\n<span class=\"token comment\">// 순수 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<h1>불변성</h1>\n<p>함수형 프로그래밍에서는 불변성은 반드시 지켜져야 할 규칙 중 하나이다. 만약 데이터의 불변성이 지켜지지 않는다면 함수를 실행할 때 마다 입력되는 원본 데이터는 수정되거나 손실될 것이며 그로인해 버그들이 소프트웨어를 망쳐 놓게 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 가변</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mutable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> props1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mutable</span><span class=\"token punctuation\">(</span>props1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 불변</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">immutable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> props2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> modifiedArray <span class=\"token operator\">=</span> <span class=\"token function\">immutable</span><span class=\"token punctuation\">(</span>props2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트에서는 <code class=\"language-text\">const</code>와는 구별해야된다. <code class=\"language-text\">const</code>는 한번 생성을 하면 재할당을 못 하지만 참조하는 객체의 속성은 변경할 수 있다.\n그 외 손쉬운 불변성 관리로는 <a href=\"https://immerjs.github.io/immer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immer.js</a>를 추천한다.</p>\n<h1>선언형</h1>\n<p>함수형 프로그래밍은 선언형으로 명령형의 어떤 방법으로 해야하는지<small>(How)</small>와는 달리 무엇을 하는지 <small>(What)</small>에 초점을 맞춘다.\n오직 프로그램의 논리에 집중하며 목표를 명시하고 알고리즘을 명시하지 않는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 명령형</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">numbers</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">map1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [11, 12]</span>\n\n<span class=\"token comment\">// 선언형</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map2</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">numbers</span> <span class=\"token operator\">=></span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n  <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">map2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [11, 12]</span></code></pre></div>\n<p>명령형의 경우에는 <code class=\"language-text\">for</code>, <code class=\"language-text\">if</code>, <code class=\"language-text\">switch</code>, <code class=\"language-text\">throw</code>와 같은 구문<small>(statement)</small>을 더 사용하고 선언형은 값, 변수, 연산자 조합과 같은 표현식<small>(expression)</small>을 더 사용한다.</p>\n<h1>고차 함수</h1>\n<p>함수를 인자로 받거나 반환함으로써 동작하는 함수를 고차 함수<small>(higher-order function)</small>라 말한다.\n함수가 주가 되는 함수형 프로그래밍에서는 함수들의 조합이나 결합이 필요한 경우가 자주 있는데 그럴 경우에 사용된다.</p>\n<p>자바스크립트에서는 <code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code>, <code class=\"language-text\">reduce()</code>가 대표적인 고차 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// map</span>\n<span class=\"token keyword\">const</span> numbers1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> numbers1<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [11, 12, 13]</span>\n\n<span class=\"token comment\">// filter</span>\n<span class=\"token keyword\">const</span> numbers2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> filter <span class=\"token operator\">=</span> numbers2<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [20, 30]</span>\n\n<span class=\"token comment\">// reduce</span>\n<span class=\"token keyword\">const</span> numbers3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reduce <span class=\"token operator\">=</span> numbers3<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> accumulator <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<h1>마치며</h1>\n<p>함수형 프로그래밍은 1930년대에 근간을 이뤘고 동시성 작업이 쉽고 안전하다는 이유로 최근에 와서 많이 주목받고 또 사용되고 있다. 비단 이런 이유말고도 코드를 간결하게 하여 가독성을 높이고 테스트의 간편함등으로 장점이 많은 프로그래밍 패러다임이다.</p>\n<p>그렇다고 해서 모든 코드를 다 함수형 프로그래밍으로 작성해야 된다는 것은 아니다. 함수형 프로그래밍이라고 한들 모든 상황에서 정답은 아니다. 아무리 좋다한들 상황에 맞지 않으면 가장 적합한 방법을 찾는게 현명한 행동이 아닐까?\n그래도 한 가지 확실한 것은 함수형 프로그래밍을 통한 사고가 항상하던 개발의 시점을 새로운 관점에서 일깨워준다는 점이다.</p>\n<h1>참고 자료</h1>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">위키피디아: 함수형 프로그래밍</a></li>\n<li><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Master the JavaScript Interview: What is Functional Programming?</a></li>\n<li><a href=\"https://sungjk.github.io/2017/07/17/fp.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">번역 - 함수형 프로그래밍이란 무엇인가?</a></li>\n<li><a href=\"https://dev.to/fannyvieira/the-beauty-of-functional-programming-32ck\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The beauty of Functional Programming</a></li>\n<li><a href=\"https://engineering.linecorp.com/ko/blog/functional-programing-language-and-line-game-cloud/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">함수형 프로그래밍 언어에 대한 고찰</a></li>\n<li><a href=\"http://ruaa.me/why-functional-matters/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">왜 함수형 프로그래밍이 좋을까?</a></li>\n</ul>","frontmatter":{"title":"함수형 프로그래밍","date":"January 03, 2020","description":"함수형 프로그래밍은 무엇인가","tags":"javascript, functional programming, fp"}}},"pageContext":{"slug":"/blog/2020/About-Functional-Programming/","previous":{"fields":{"slug":"/blog/2019/Golang-for-JavaScript-developers-2/"},"frontmatter":{"title":"JavaScript 개발자를 위한 Golang - 2부(번역)"}},"next":{"fields":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-1/"},"frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 1부(번역)"}}}}}