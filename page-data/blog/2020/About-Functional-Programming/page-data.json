{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2020/About-Functional-Programming/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"f3742f7a-f5a0-5f03-8ac4-df39266d644a","excerpt":"…","html":"<h1 id=\"시작\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91\" aria-label=\"시작 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작</h1>\n<p>소프트웨어 개발을 한다면 객체지향 프로그래밍이라던지 함수형 프로그래밍이라는 프로그래밍 패러다임을 자주 접할 수 있을 것이다.\n그중 함수형 프로그래밍은 몇 년 전부터 화제가 되어왔고 특히 자바스크립트 세계에서는 너무도 쉽게 접할 수 있는 단어가 되어 버렸다.\n그렇다면 함수형 프로그래밍은 무엇인가?</p>\n<p>간단히 정의하자면 함수형 프로그래밍은 <a href=\"https://ko.wikipedia.org/wiki/%EB%AA%85%EB%A0%B9%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">명령형</a>이 아닌 <a href=\"https://ko.wikipedia.org/wiki/%EC%84%A0%EC%96%B8%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">선언형</a>이며 순수 함수<small>(pure function)</small>를 사용, 조합하여 소프트웨어를 구현하는 프로세스이다.</p>\n<h1 id=\"순수-함수\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98\" aria-label=\"순수 함수 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순수 함수</h1>\n<p>함수형 프로그래밍은 순수 함수로 작성되다보니 부수효과<small>(side effect)</small>가 없다. 여기서 순수 함수란 프로그램에 어떠한 변화를 일으키지 않으며 같은 입력이면 같은 출력만이 존재하는 함수 형태로 결과를 예측 가능 할 수 있어서 테스트 실행에도 큰 이점을 가져다준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 외부 변수가 함수 결과값에 영향</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span>\n\n<span class=\"token comment\">// 오직 인자만이 함수 결과값에 영향</span>\n<span class=\"token comment\">// 순수 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span>\n<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<h1 id=\"불변성\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80%EC%84%B1\" aria-label=\"불변성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변성</h1>\n<p>함수형 프로그래밍에서는 불변성은 반드시 지켜져야 할 규칙 중 하나이다. 만약 데이터의 불변성이 지켜지지 않는다면 함수를 실행할 때 마다 입력되는 원본 데이터는 수정되거나 손실될 것이며 그로인해 버그들이 소프트웨어를 망쳐 놓게 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 가변</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mutable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> props1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mutable</span><span class=\"token punctuation\">(</span>props1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 불변</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">immutable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>array<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> props2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> modifiedArray <span class=\"token operator\">=</span> <span class=\"token function\">immutable</span><span class=\"token punctuation\">(</span>props2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트에서는 <code class=\"language-text\">const</code>와는 구별해야된다. <code class=\"language-text\">const</code>는 한번 생성을 하면 재할당을 못 하지만 참조하는 객체의 속성은 변경할 수 있다.\n그 외 손쉬운 불변성 관리로는 <a href=\"https://immerjs.github.io/immer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immer.js</a>를 추천한다.</p>\n<h1 id=\"선언형\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%ED%98%95\" aria-label=\"선언형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언형</h1>\n<p>함수형 프로그래밍은 선언형으로 명령형의 어떤 방법으로 해야하는지<small>(How)</small>와는 달리 무엇을 하는지 <small>(What)</small>에 초점을 맞춘다.\n오직 프로그램의 논리에 집중하며 목표를 명시하고 알고리즘을 명시하지 않는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 명령형</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">numbers</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">map1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [11, 12]</span>\n\n<span class=\"token comment\">// 선언형</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map2</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">numbers</span> <span class=\"token operator\">=></span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n  <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">map2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [11, 12]</span></code></pre></div>\n<p>명령형의 경우에는 <code class=\"language-text\">for</code>, <code class=\"language-text\">if</code>, <code class=\"language-text\">switch</code>, <code class=\"language-text\">throw</code>와 같은 구문<small>(statement)</small>을 더 사용하고 선언형은 값, 변수, 연산자 조합과 같은 표현식<small>(expression)</small>을 더 사용한다.</p>\n<h1 id=\"고차-함수\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98\" aria-label=\"고차 함수 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고차 함수</h1>\n<p>함수를 인자로 받거나 반환함으로써 동작하는 함수를 고차 함수<small>(higher-order function)</small>라 말한다.\n함수가 주가 되는 함수형 프로그래밍에서는 함수들의 조합이나 결합이 필요한 경우가 자주 있는데 그럴 경우에 사용된다.</p>\n<p>자바스크립트에서는 <code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code>, <code class=\"language-text\">reduce()</code>가 대표적인 고차 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// map</span>\n<span class=\"token keyword\">const</span> numbers1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> numbers1<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [11, 12, 13]</span>\n\n<span class=\"token comment\">// filter</span>\n<span class=\"token keyword\">const</span> numbers2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> filter <span class=\"token operator\">=</span> numbers2<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [20, 30]</span>\n\n<span class=\"token comment\">// reduce</span>\n<span class=\"token keyword\">const</span> numbers3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reduce <span class=\"token operator\">=</span> numbers3<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> accumulator <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<h1 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h1>\n<p>함수형 프로그래밍은 1930년대에 근간을 이뤘고 동시성 작업이 쉽고 안전하다는 이유로 최근에 와서 많이 주목받고 또 사용되고 있다. 비단 이런 이유말고도 코드를 간결하게 하여 가독성을 높이고 테스트의 간편함등으로 장점이 많은 프로그래밍 패러다임이다.</p>\n<p>그렇다고 해서 모든 코드를 다 함수형 프로그래밍으로 작성해야 된다는 것은 아니다. 함수형 프로그래밍이라고 한들 모든 상황에서 정답은 아니다. 아무리 좋다한들 상황에 맞지 않으면 가장 적합한 방법을 찾는게 현명한 행동이 아닐까?\n그래도 한 가지 확실한 것은 함수형 프로그래밍을 통한 사고가 항상하던 개발의 시점을 새로운 관점에서 일깨워준다는 점이다.</p>\n<h1 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h1>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">위키피디아: 함수형 프로그래밍</a></li>\n<li><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Master the JavaScript Interview: What is Functional Programming?</a></li>\n<li><a href=\"https://sungjk.github.io/2017/07/17/fp.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">번역 - 함수형 프로그래밍이란 무엇인가?</a></li>\n<li><a href=\"https://dev.to/fannyvieira/the-beauty-of-functional-programming-32ck\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The beauty of Functional Programming</a></li>\n<li><a href=\"https://engineering.linecorp.com/ko/blog/functional-programing-language-and-line-game-cloud/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">함수형 프로그래밍 언어에 대한 고찰</a></li>\n<li><a href=\"http://ruaa.me/why-functional-matters/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">왜 함수형 프로그래밍이 좋을까?</a></li>\n</ul>","frontmatter":{"title":"함수형 프로그래밍","date":"2020-01-03","description":"함수형 프로그래밍은 무엇인가","tags":["javascript","fp"]}}},"pageContext":{"slug":"/blog/2020/About-Functional-Programming/","previous":{"fields":{"slug":"/blog/2019/Golang-for-JavaScript-developers-2/"},"frontmatter":{"title":"JavaScript 개발자를 위한 Golang - 2부(번역)","tags":["javascript","go","translation"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%9E%91\">시작</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8D%94-%EB%8B%A4%EB%A5%B8-%EA%B2%83%EB%93%A4\">더 다른 것들</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%83%80%EC%9E%85--%EB%B3%80%EC%88%98smalltypes--variablessmall\">타입 &#x26; 변수<small>(Types &#x26; Variables)</small></a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#javascript\">JavaScript</a></li>\n<li><a href=\"#go\">Go</a></li>\n<li><a href=\"#%EC%9C%A0%EC%82%AC%EC%A0%90\">유사점</a></li>\n<li><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></li>\n<li><a href=\"#javascript-1\">JavaScript</a></li>\n<li><a href=\"#go-1\">Go</a></li>\n<li><a href=\"#javascript-2\">Javascript</a></li>\n<li><a href=\"#go-2\">Go</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%80%EB%B3%80%EC%84%B1smallmutabilitysmall\">가변성<small>(Mutability)</small></a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#javascript-3\">JavaScript</a></li>\n<li><a href=\"#go-3\">Go</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%ACsmallerror-handlingsmall\">에러 처리<small>(Error handling)</small></a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#javascript-4\">JavaScript</a></li>\n<li><a href=\"#go-4\">Go</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%83%81%EC%86%8D-%EB%8C%80%EC%8B%A0-%ED%95%A9%EC%84%B1smallcomposition-instead-of-inheritancesmall\">상속 대신 합성<small>(Composition instead of inheritance)</small></a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#javascript-5\">JavaScript</a></li>\n<li><a href=\"#go-5\">Go</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1smallconcurrencysmall\">동시성<small>(Concurrency)</small></a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BCsmallcompilationsmall\">컴파일<small>(Compilation)</small></a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84\">패러다임</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EC%A1%B0\">참조:</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></p>\n</li>\n</ul>"},"next":{"fields":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-1/"},"frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 1부(번역)","tags":["javascript","interview","translation"]},"tableOfContents":"<ul>\n<li><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0\">시작하며</a></li>\n<li><a href=\"#hi-guys-good-day-and-a-happy-new-year-\">Hi Guys Good Day and a Happy New Year 🎆🎆🎆!</a></li>\n<li><a href=\"#%EC%A7%88%EB%AC%B8-a-name0a\">질문 <a name=\"0\"></a></a></li>\n<li><a href=\"#1-undefined%EC%99%80-null%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EA%B0%80-a-name1a\">1. <code class=\"language-text\">undefined</code>와 <code class=\"language-text\">null</code>은 무엇이 다른가? <a name=\"1\"></a></a></li>\n<li><a href=\"#2--%EC%97%B0%EC%82%B0%EC%9E%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-a-name2a\">2. <code class=\"language-text\">&amp;&amp;</code> 연산자는 무엇을 하는가? <a name=\"2\"></a></a></li>\n<li><a href=\"#3--%EC%97%B0%EC%82%B0%EC%9E%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-a-name3a\">3. <code class=\"language-text\">||</code> 연산자는 무엇을 하는가? <a name=\"3\"></a></a></li>\n<li><a href=\"#4-string%EC%9D%84-number%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EA%B0%80%EC%9E%A5-%EB%B9%A0%EB%A5%B8-%EB%B0%A9%EB%B2%95%EC%9D%80--%EB%98%90%EB%8A%94-%EB%8B%A8%ED%95%AD-%EB%8D%94%ED%95%98%EA%B8%B0-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80-a-name4a\">4. string을 number로 변환하는 가장 빠른 방법은 + 또는 단항 더하기 연산자를 사용하는 것인가? <a name=\"4\"></a></a></li>\n<li><a href=\"#5-dom-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name5a\">5. DOM 이란 무엇인가? <a name=\"5\"></a></a></li>\n<li><a href=\"#6-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%ED%8C%8Csmallevent-propagationsmall-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name6a\">6. 이벤트 전파<small>(Event Propagation)</small> 란 무엇인가? <a name=\"6\"></a></a></li>\n<li><a href=\"#7-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B2%84%EB%B8%94%EB%A7%81smallevent-bubblingsmall-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name7a\">7. 이벤트 버블링<small>(Event Bubbling)</small> 이란 무엇인가? <a name=\"7\"></a></a></li>\n<li><a href=\"#8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%BA%A1%EC%B3%90%EB%A7%81smallevent-capturingsmall-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name8a\">8. 이벤트 캡쳐링<small>(Event Capturing)</small> 이란 무엇인가? <a name=\"8\"></a></a></li>\n<li><a href=\"#9-eventpreventdefault%EC%99%80-eventstoppropagation-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name9a\">9. <code class=\"language-text\">event.preventDefault()</code>와 <code class=\"language-text\">event.stopPropagation()</code> 메서드의 차이점은 무엇인가? <a name=\"9\"></a></a></li>\n<li><a href=\"#10-eventpreventdefault-%EB%A9%94%EC%84%9C%EB%93%9C%EA%B0%80-element%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EC%97%88%EB%8A%94%EC%A7%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94%EA%B0%80-a-name10a\">10. <code class=\"language-text\">event.preventDefault()</code> 메서드가 element에 사용되었는지 어떻게 확인하는가? <a name=\"10\"></a></a></li>\n<li><a href=\"#11-%EC%9D%B4-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-objsomepropx%EA%B0%80-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name11a\">11. 이 코드에서 <code class=\"language-text\">obj.someprop.x</code>가 에러 발생하는 이유는 무엇인가? <a name=\"11\"></a></a></li>\n<li><a href=\"#12-eventtarget-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name12a\">12. <strong>event.target</strong> 이란 무엇인가? <a name=\"12\"></a></a></li>\n<li><a href=\"#13-eventcurrenttarget-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name13a\">13. <strong>event.currentTarget</strong> 이란 무엇인가? <a name=\"13\"></a></a></li>\n<li><a href=\"#14--%EC%99%80--%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name14a\">14. <code class=\"language-text\">==</code> 와 <code class=\"language-text\">===</code> 의 차이는 무엇인가? <a name=\"14\"></a></a></li>\n<li><a href=\"#15-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B9%84%EC%8A%B7%ED%95%9C-%EB%91%90-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%A0%EB%95%8C-false%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name15a\">15. 자바스크립트에서 비슷한 두 객체를 비교할때 <strong>false</strong>를 리턴하는 이유는 무엇인가? <a name=\"15\"></a></a></li>\n<li><a href=\"#16--%EC%97%B0%EC%82%B0%EC%9E%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-a-name16a\">16. <code class=\"language-text\">!!</code> 연산자는 무엇을 하는가? <a name=\"16\"></a></a></li>\n<li><a href=\"#17-%ED%95%9C-%EC%A4%84%EC%97%90-%EC%97%AC%EB%9F%AC-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%ED%8F%89%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name17a\">17. 한 줄에 여러 표현식을 평가하는 방법은 무엇인가? <a name=\"17\"></a></a></li>\n</ul>"}}},"staticQueryHashes":["253152893","3980716358"],"slicesMap":{}}