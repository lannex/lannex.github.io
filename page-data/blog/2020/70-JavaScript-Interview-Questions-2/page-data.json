{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2020/70-JavaScript-Interview-Questions-2/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"b1391943-bdef-58c4-a956-db151b265507","excerpt":"출처 70 JavaScript Interview Questions 시작하며 글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다. 70 자바스크립트 인터뷰 질문 - 1부 7…","html":"<h1 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h1>\n<p><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">70 JavaScript Interview Questions</a></p>\n<h1 id=\"시작하며\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0\" aria-label=\"시작하며 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하며</h1>\n<p>글이 긴 관계로 4부로 나눠서 진행하며 1부는 1-17번 질문, 2부는 18-36번, 3부는 37-54번, 4부는 55-70번 질문으로 구성되어 있다.</p>\n<ul>\n<li><a href=\"../70-JavaScript-Interview-Questions-1/\">70 자바스크립트 인터뷰 질문 - 1부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-2/\">70 자바스크립트 인터뷰 질문 - 2부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-3/\">70 자바스크립트 인터뷰 질문 - 3부</a></li>\n<li><a href=\"../70-JavaScript-Interview-Questions-4/\">70 자바스크립트 인터뷰 질문 - 4부</a></li>\n</ul>\n<h1 id=\"hi-guys-good-day-and-a-happy-new-year-\" style=\"position:relative;\"><a href=\"#hi-guys-good-day-and-a-happy-new-year-\" aria-label=\"hi guys good day and a happy new year  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hi Guys Good Day and a Happy New Year 🎆🎆🎆!</h1>\n<p>이 글은 긴 내용이므로 한두 시간 동안 나와 함께하시길 바랍니다.\n모든 질문에 대한 답변에는 질문 목록으로 돌아가는 화살표 ↑ 링크가 있어서 스크롤 하는 시간을 낭비하지 않아도 됩니다.</p>\n<h1 id=\"질문-a-name0a\" style=\"position:relative;\"><a href=\"#%EC%A7%88%EB%AC%B8-a-name0a\" aria-label=\"질문 a name0a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>질문 <a name=\"0\"></a></h1>\n<ul>\n<li><a href=\"#18\">18. 호이스팅이란 무엇인가?</a></li>\n<li><a href=\"#19\">19. Scope란 무엇인가?</a></li>\n<li><a href=\"#20\">20. Closures란 무엇인가?</a></li>\n<li><a href=\"#21\">21. 자바스크립트에서 falsy란 무엇인가?</a></li>\n<li><a href=\"#22\">22. falsy값을 어떻게 확인할 수 있는가?</a></li>\n<li><a href=\"#23\">23. use strict은 무엇을 하는가?</a></li>\n<li><a href=\"#24\">24. 자바스크립트에서 this 값은 무엇인가?</a></li>\n<li><a href=\"#25\">25. 객체의 prototype은 무엇인가?</a></li>\n<li><a href=\"#26\">26. IIFE는 무엇이며, 그 사용법은 무엇인가?</a></li>\n<li><a href=\"#27\">27. Function.prototype.apply 사용법은 무엇인가?</a></li>\n<li><a href=\"#28\">28. Function.prototype.call 사용법은 무엇인가?</a></li>\n<li><a href=\"#29\">29. Function.prototype.apply와 Function.prototype.call의 차이점은 무엇인가?</a></li>\n<li><a href=\"#30\">30. Function.prototype.bind의 사용법은 무엇인가?</a></li>\n<li><a href=\"#31\">31. 함수형 프로그래밍이란 무엇이며, 함수형 언어로서 후보가 되는 JavaScript의 특징은 무엇인가?</a></li>\n<li><a href=\"#32\">32. Higher Order Functions란 무엇인가?</a></li>\n<li><a href=\"#33\">33. 함수는 왜 일급 객체라 하는가?</a></li>\n<li><a href=\"#34\">34. 직접 Array.prototype.map 메서드를 구현하시오</a></li>\n<li><a href=\"#35\">35. 직접 Array.prototype.filter 메서드를 구현하시오</a></li>\n<li><a href=\"#36\">36. 직접 Array.prototype.reduce 메서드를 구현하시오</a></li>\n</ul>\n<h1 id=\"18-호이스팅smallhoistingsmall이란-무엇인가-a-name18a\" style=\"position:relative;\"><a href=\"#18-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85smallhoistingsmall%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name18a\" aria-label=\"18 호이스팅smallhoistingsmall이란 무엇인가 a name18a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>18. 호이스팅<small>(Hoisting)</small>이란 무엇인가? <a name=\"18\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>호이스팅</strong>은 변수나 함수를 정의하는 (<em>글로벌 또는 함수</em>) 스코프의 상단으로 <em>변수</em>와 <em>함수</em>가 이동하는 것을 설명하는데 사용되는 용어입니다.</p>\n<p><strong>호이스팅</strong>을 이해하려면 *실행 컨텍스트<small>(execution context)</small>*를 설명해야합니다. <br />\n<strong>실행 컨텍스트</strong>는 현재 실행중인 “코드 환경”입니다.\n<strong>실행 컨텍스트</strong>에는 <em>컴파일<small>(compilation)</small></em> 및 *실행<small>(execution)</small>*의 두 단계가 있습니다.</p>\n<p><strong>컴파일</strong> - 이 단계에서는 모든 <em>함수 선언</em>과 <em>호이스트</em>를 스코프의 맨 위로 올려서 우리가 나중에 그것들을 참조할 수 있고 모든 <em>변수 선언</em>**(var 키워드로 선언)**도 얻을 수 있으며 또한 <em>호이스트</em>를 올려서 그들에게 기본값으로 <em>undefined</em>를 부여합니다.</p>\n<p><strong>실행</strong> - 이 단계에서는 앞서 <em>호스팅 된</em> 변수에 값을 할당하고 함수 **(객체의 메서드)**를 <em>실행</em>하거나 <em>호출</em>합니다.</p>\n<p><strong>Note</strong>: <em>var</em> 키워드로 선언된 <strong>함수 선언</strong>과 변수만 <em>호이스팅</em> 된다. <strong>함수 표현식</strong>이나 <strong>화살표 함수</strong>, <code class=\"language-text\">let</code> 및 <code class=\"language-text\">const</code> 키워드가 안된다.</p>\n<p>Ok, 아래의 <em>글로벌 스코프</em>에 예제 코드가 있다고 가정해 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> y<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드는 각각 <code class=\"language-text\">undefined</code>, <code class=\"language-text\">1</code>, <code class=\"language-text\">Hello Mark!</code>를 로그를 기록합니다.</p>\n<p><em>컴파일</em> 단계는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 암묵적 \"undefined\" 할당</span>\n\n<span class=\"token comment\">// 마무리를 위한 \"컴파일\" 단계를 기다리는</span>\n\n<span class=\"token comment\">// 그리고 \"실행\"단계를 시작합니다</span>\n\n<span class=\"token comment\">/*\nconsole.log(y);\ny = 1;\nconsole.log(y);\nconsole.log(greet(\"Mark\"));\n*/</span></code></pre></div>\n<p>이 예제는, 변수 및 <em>함수 호출</em>의 <em>할당</em>에 대한 코멘트입니다.</p>\n<p><em>컴파일</em> 단계가 완료된 후 메서드 호출을 하는 <em>실행</em> 단계를 시작하고 값을 변수에 지정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> y<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"실행\"단계 시작</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"19-스코프smallscopesmall란-무엇인가-a-name19a\" style=\"position:relative;\"><a href=\"#19-%EC%8A%A4%EC%BD%94%ED%94%84smallscopesmall%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name19a\" aria-label=\"19 스코프smallscopesmall란 무엇인가 a name19a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19. 스코프<small>(Scope)</small>란 무엇인가? <a name=\"19\"></a></h1>\n<p><a href=\"#0\">↑</a>\nJavaScript의 <strong>스코프</strong>는 변수 또는 함수에 대한 유효한 액세스 권한이 있는 <strong>영역</strong>입니다.\nJavaScript는 3가지 스코프를 가집니다. <strong>글로벌 스코프</strong>, <strong>함수 스코프</strong> 그리고 <strong>블럭 스코프(ES6)</strong>.</p>\n<ul>\n<li><strong>글로벌 스코프</strong> - 글로벌 네임 스페이스에 선언된 변수 또는 함수는 글로벌 스코프에 있으므로 코드의 모든 곳에서 액세스 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//global namespace</span>\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">globalFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"g\"는 글로벌 변수이므로 \"g\"에 액세스 할 수 있습니다.</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>함수 스코프</strong> - 함수 내에 선언된 변수, 함수 및 매개 변수는 해당 함수 내부에서 액세스 할 수 있지만 외부에서는 액세스 할 수 없습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFavoriteFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFavoriteFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\"가 정의되어 있지 않아서 ReferenceError를 던집니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러로 계속되지 않습니다.</span></code></pre></div>\n<p><strong>블럭 스코프</strong> - <code class=\"language-text\">{}</code> 블록 안에 선언된 변수 <strong>(let, const)</strong> 는 그 안에서만 액세스 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">testBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">testBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"z\"가 정의되어 있지 않아서 ReferenceError를 던집니다.</span></code></pre></div>\n<p><strong>스코프</strong>는 변수를 찾기 위한 일련의 규칙입니다.\n<strong>현재 스코프</strong>에 변수가 없으면 <strong>외부 스코프</strong>에서 변수를 찾고 검색합니다.\n그리고 다시 존재하지 않으면 <strong>글로벌 스코프</strong>에 닿을 때까지 다시 찾습니다. 만약 그 변수가 존재하면 그것을 사용합니다. 존재하지 않으면 에러를 던집니다.\n가장 가까운 변수를 검색하고 검색을 중지하거나 다시 찾습니다.\n이것을 <strong>스코프 체인</strong>이라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* Scope Chain\nInside inner function perspective\ninner's scope -> outer's scope -> global's scope\n*/</span>\n\n<span class=\"token comment\">// Global Scope</span>\n<span class=\"token keyword\">var</span> variable1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Comrades\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> variable2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Sayonara\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// outer's scope</span>\n  <span class=\"token keyword\">var</span> variable1 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// inner's scope</span>\n    <span class=\"token keyword\">var</span> variable2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>variable2 <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> variable1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// logs Hello World</span>\n<span class=\"token comment\">// (variable2 = \"Hello\")와 (variable1 = \"World\")가 inner's scope 안 변수에 가까이 있기 때문입니다.</span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dJFL2g1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l81b3nmdonimex0qsgyr.png\" alt=\"Scope\"></p>\n<h1 id=\"20-클로저smallclosuressmall란-무엇인가-a-name20a\" style=\"position:relative;\"><a href=\"#20-%ED%81%B4%EB%A1%9C%EC%A0%80smallclosuressmall%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name20a\" aria-label=\"20 클로저smallclosuressmall란 무엇인가 a name20a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20. 클로저<small>(Closures)</small>란 무엇인가? <a name=\"20\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>클로저</strong>는 논란의 여지가 많은 주제이므로 아마도 모든 질문 중에서 가장 어려운 질문일 것입니다.\n그래서 제가 이해한 내용으로 설명하겠습니다.</p>\n<p><strong>클로저</strong>는 간단하게 말해서 <strong>스코프 체인</strong>의 도움으로 글로벌 스코프에 도달할 때까지 현재 스코프, 그것의 부모 함수 스코프, 또 그것의 부모의 부모 함수 스코프에서 변수와 매개 변수의 참조를 기억하는 기능입니다. 기본적으로 클로저는 함수가 선언될 때 생성된 <strong>스코프</strong>입니다.</p>\n<p>이 예제는 클로저를 설명하는 좋은 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Global's Scope</span>\n<span class=\"token keyword\">var</span> globalVar <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// testClosures's Scope</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs \"abc\"</span>\n<span class=\"token comment\">/* Scope Chain\n   내부 함수의 시점\n   a의 스코프 -> 글로벌 스코프\n*/</span></code></pre></div>\n<p>이 예제에서 <code class=\"language-text\">a</code> 함수를 선언할때 <strong>글로벌 스코프</strong>는 <code class=\"language-text\">a</code>의 <em>클로저</em> 일부입니다.</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gbH9Uqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/teatokuw4xvgtlzbzhn8.png\" alt=\"Closures1\"></p>\n<p>위 이미지에서 값이 없는 변수 <code class=\"language-text\">globalVar</code>가 그 이유로 <code class=\"language-text\">a</code> 함수를 호출하는 <strong>위치</strong>와 <strong>시간</strong>에 따라 그 변수의 값이 변경될 수 있기 때문입니다.</p>\n<p>그러나 위의 예제에서 <code class=\"language-text\">globalVar</code> 변수의 값은 <strong>abc</strong>입니다.</p>\n<p>Ok, 복잡한 예를 들어 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> globalVar <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> outerVar <span class=\"token operator\">=</span> <span class=\"token string\">\"outer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">outerParam</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">innerParam</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">,</span> outerParam<span class=\"token punctuation\">,</span> innerParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> innerFunc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span>outerVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nouterVar <span class=\"token operator\">=</span> <span class=\"token string\">\"outer-2\"</span><span class=\"token punctuation\">;</span>\nglobalVar <span class=\"token operator\">=</span> <span class=\"token string\">\"guess\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--inSFoNQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/e4hxm7zvz8eun2ppenwp.png\" alt=\"Closures2\"></p>\n<p>이것은 “guess outer inner”를 로그를 기록합니다.\n이에 대한 설명으로 <code class=\"language-text\">outerFunc</code> 함수를 호출하고 리턴된 값을 변수 <code class=\"language-text\">x</code>에 <code class=\"language-text\">innerFunc</code> 함수 할당할 때, <code class=\"language-text\">outerParam</code>는 <code class=\"language-text\">outerVar</code> 변수에 새로운 <strong>outer-2</strong> 값을 할당하더라도 <strong>outer</strong> 값을 갖습니다. 왜냐하면 outerFunc을 호출한 후 재할당이 발생했기 때문에 그리고 이때 <code class=\"language-text\">outerFunc</code> 함수를 호출하면 <strong>스코프 체인</strong>에서 <code class=\"language-text\">outerVar</code>의 값을 찾게 되며 <code class=\"language-text\">outerVar</code>의 값은 **“outer”**입니다.</p>\n<p>이제, <code class=\"language-text\">innerFunc</code>에 대한 참조가 있는 <code class=\"language-text\">x</code> 변수를 호출하면, <code class=\"language-text\">innerParam</code>은 <strong>inner</strong>값을 가지게 될 것입니다. 왜냐하면 그 값은 호출 할 때 전달하는 값이고 <code class=\"language-text\">x</code> 변수 호출하기 전에 <code class=\"language-text\">globalVar</code>에 새 값을 할당하기 때문에 <code class=\"language-text\">globalVar</code> 변수는 <strong>guess</strong> 값을 가지게 될 것입니다.\n그리고 호출 할 때 <em>스코프 체인</em>에 있는 <code class=\"language-text\">globalVar</code>의 <code class=\"language-text\">x</code> 값은 <strong>guess</strong>입니다.</p>\n<p>클로저를 올바르게 이해하지 못하는 문제를 보여주는 예가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arrFuncs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  arrFuncs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i is 5</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arrFuncs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrFuncs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// all logs \"5\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드는 <strong>클로저</strong>로 인해 예상대로 작동하지 않습니다.\n<code class=\"language-text\">var</code>키워드는 글로벌 변수를 만들고 함수를 푸시할때 글로벌 변수 <code class=\"language-text\">i</code>를 리턴합니다.\n그래서 루프 후에 해당 배열에서 관련 함수 중 하나를 호출하면 현재값이 5이고 글로벌 변수라 접근이 가능한 <code class=\"language-text\">i</code>를 얻을 수 있기 때문에 <code class=\"language-text\">5</code>로 로그를 기록합니다.\n<strong>클로저</strong>는 생성 시 해당 변수의 <strong>값</strong>이 아닌 해당 변수의 <strong>참조</strong>를 유지하기 때문입니다.</p>\n<p><strong>IIFES</strong>를 사용하거나 블록 스코프 지정을 위해 <code class=\"language-text\">var</code>키워드를 <code class=\"language-text\">let</code>으로 변경하여 이것을 해결할 수 있습니다.</p>\n<h1 id=\"21-자바스크립트에서-falsy란-무엇인가-a-name21a\" style=\"position:relative;\"><a href=\"#21-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-falsy%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name21a\" aria-label=\"21 자바스크립트에서 falsy란 무엇인가 a name21a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>21. <strong>자바스크립트</strong>에서 <strong>falsy</strong>란 무엇인가? <a name=\"21\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> falsyValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>falsy</strong> 값은 부울로 변환 될 때 <strong>false</strong>가 되는 값입니다.</p>\n<h1 id=\"22-falsy값을-어떻게-확인할-수-있는가-a-name22a\" style=\"position:relative;\"><a href=\"#22-falsy%EA%B0%92%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EA%B0%80-a-name22a\" aria-label=\"22 falsy값을 어떻게 확인할 수 있는가 a name22a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>22. <strong>falsy</strong>값을 어떻게 확인할 수 있는가? <a name=\"22\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>부울<small>(Boolean)</small></strong> 함수 또는 Double NOT 연산자 <code class=\"language-text\">!!</code>를 사용하면 됩니다.</p>\n<h1 id=\"23-use-strict은-무엇을-하는가-a-name23a\" style=\"position:relative;\"><a href=\"#23-use-strict%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-a-name23a\" aria-label=\"23 use strict은 무엇을 하는가 a name23a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>23. <code class=\"language-text\">use strict</code>은 무엇을 하는가? <a name=\"23\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">\"use strict\"</code>은 함수 또는 전체 스크립트에서 **엄격한 모드<small>(Strict Mode)</small>**로 코드를 작성하는 JavaScript의 ES5 기능입니다.\n<strong>엄격한 모드</strong>는 코드 초기에 버그를 피하고 이에 대한 제한을 추가합니다.</p>\n<p><strong>엄격한 모드</strong>가 제공하는 제한 사항.</p>\n<ul>\n<li>선언되지 않은 변수 할당 또는 액세스.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">returnY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  y <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>읽기 전용 또는 쓰기 불가능 글로벌 변수에 값을 할당.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token number\">NaN</span> <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"and beyond\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>삭제 불가능한 속성을 삭제.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">value</span> <span class=\"token operator\">:</span> <span class=\"token string\">'1'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// obj.x = 1 과는 다른 선언</span>\n<span class=\"token comment\">// https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</span>\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>매개 변수 이름이 중복.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">someFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>eval</strong> 함수를 사용하여 변수 만들기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var x = 1;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// x가 정의되지 않았다는 참조 오류를 던짐.</span></code></pre></div>\n<p><strong>this</strong>의 기본값은 <code class=\"language-text\">undefined</code>가 됨.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showMeThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showMeThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//returns undefined</span></code></pre></div>\n<p>위의 모든 예제들은 오류를 던집니다.\n<strong>엄격한 모드</strong>에는 이러한 것보다 더 많은 제한이 있습니다.</p>\n<h1 id=\"24-자바스크립트에서-this-값은-무엇인가-a-name24a\" style=\"position:relative;\"><a href=\"#24-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-this-%EA%B0%92%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name24a\" aria-label=\"24 자바스크립트에서 this 값은 무엇인가 a name24a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>24. 자바스크립트에서 <code class=\"language-text\">this</code> 값은 무엇인가? <a name=\"24\"></a></h1>\n<p><a href=\"#0\">↑</a>\n기본적으로 <code class=\"language-text\">this</code>는 현재 함수를 실행하거나 호출하는 객체의 값을 말합니다.\n나는 <strong>현재</strong> 우리가 그것을 사용하는 상황과 장소에 따라 <strong>this</strong>의 값은 변하기 때문이라 말하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> carDetails <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ford Mustang\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">yearBought</span><span class=\"token operator\">:</span> <span class=\"token number\">2005</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">isRegistered</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>carDetails<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs Ford Mustang</span></code></pre></div>\n<p>이것은 <code class=\"language-text\">getName</code> 메서드에서 <code class=\"language-text\">this.name</code>을 리턴하기 때문에 일반적으로 예상할 수 있는 것입니다.\n이 문맥상의 코드에서 <code class=\"language-text\">this</code>는 현재 함수 실행의 객체 “소유자” <code class=\"language-text\">carDetails</code> 객체를 참조합니다.</p>\n<p>Ok, 이상해지도록 코드를 추가해 봅시다. 아래의 <code class=\"language-text\">console.log</code>문에 세 줄의 코드를 추가.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford Ranger\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> getCarName <span class=\"token operator\">=</span> carDetails<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCarName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs Ford Ranger</span></code></pre></div>\n<p>두 번째 <code class=\"language-text\">console.log</code>문은 <strong>Ford Ranger</strong>라는 단어를 프린트하는데, 이것은 첫 번째 <code class=\"language-text\">console.log</code>문에서 <strong>Ford Mustang</strong>을 프린트했기 때문에 이상합니다.\n그 이유는 <code class=\"language-text\">getCarName</code>메서드가 <code class=\"language-text\">window</code> 객체와 다른 “소유자” 객체를 가지고 있기 때문입니다.\n글로벌 스코프에서 <code class=\"language-text\">var</code> 키워드로 변수를 선언하면 변수와 이름이 같은 <code class=\"language-text\">window</code> 객체의 속성이 첨부됩니다.\n글로벌 스코프에서 <code class=\"language-text\">this</code>는 <code class=\"language-text\">\"use strict\"</code>가 사용되지 않을 때 <code class=\"language-text\">window</code> 객체를 나타내는 것을 명심해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getCarName <span class=\"token operator\">===</span> window<span class=\"token punctuation\">.</span>getCarName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getCarName <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getCarName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs true</span></code></pre></div>\n<p>위 예제에서 <code class=\"language-text\">this</code>와 <code class=\"language-text\">window</code>는 같은 객체를 가리킵니다.</p>\n<p>이 문제를 해결하는 한 가지 방법은 함수에 <a href=\"#27\">apply</a> 및 <a href=\"#28\">call</a> 메서드를 사용하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCarName</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>carDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs Ford Mustang</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCarName</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>carDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// logs Ford Mustang</span></code></pre></div>\n<p><code class=\"language-text\">apply</code> 및 <code class=\"language-text\">call</code> 메서드는 첫 번째 매개 변수가 해당 함수 내에서 <code class=\"language-text\">this</code>의 값이 되는 객체가 될 것으로 예상합니다.</p>\n<p><strong>IIFE</strong> 또는 <strong>즉시 실행 함수 표현식</strong>, 글로벌 스코프에서 선언된 함수, <strong>익명 함수</strong>와 객체 안의 메서드에 있는 내부 함수에는 <strong>window</strong> 객체를 가리키는 <strong>this</strong> 기본값을 가집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs the \"window\" object</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">iHateThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">iHateThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs the \"window\" object</span>\n\n<span class=\"token keyword\">const</span> myFavoriteObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">guessThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Marko Polo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">thisIsAnnoying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyFavoriteObj<span class=\"token punctuation\">.</span><span class=\"token function\">guessThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs the \"window\" object</span>\nmyFavoriteObj<span class=\"token punctuation\">.</span><span class=\"token function\">thisIsAnnoying</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs the \"window\" object</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">myFavoriteObj</code>객체에서 Marko Polo 인 <code class=\"language-text\">name</code> 속성값을 얻으려면 두 가지 방법이 있습니다.</p>\n<p>첫번째는 <code class=\"language-text\">this</code>의 값을 변수에 저장하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myFavoriteObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">guessThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this 값을 \"self\"변수에 저장</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Marko Polo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">thisIsAnnoying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 이미지에서 우리는 <code class=\"language-text\">myFavoriteObj</code>객체가 될 <code class=\"language-text\">this</code>의 값을 저장합니다.\n그래서 <code class=\"language-text\">getName</code> 내부 함수 안을 접근할 수 있습니다.</p>\n<p>두번째로, ES6 화살표 함수를 사용하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myFavoriteObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">guessThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 이 화살표 함수의 외부 \"this\"값을 복사</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Marko Polo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">thisIsAnnoying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>화살표 함수에는 자체 <code class=\"language-text\">this</code>가 없습니다.\n이것은 렉시컬 스코프<small>(lexical scope)</small>를 포함하는 <code class=\"language-text\">this</code> 값 또는 이 예제에서는 <code class=\"language-text\">myFavoriteObj</code>객체가 될 내부 함수 <code class=\"language-text\">getName</code>의 외부 <code class=\"language-text\">this</code> 값을 복사합니다.\n함수가 어떻게 호출되는지에 대한 <code class=\"language-text\">this</code> 값을 결정할 수도 있습니다.</p>\n<h1 id=\"25-객체의-prototype은-무엇인가-a-name25a\" style=\"position:relative;\"><a href=\"#25-%EA%B0%9D%EC%B2%B4%EC%9D%98-prototype%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name25a\" aria-label=\"25 객체의 prototype은 무엇인가 a name25a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>25. 객체의 prototype은 무엇인가? <a name=\"25\"></a></h1>\n<p><a href=\"#0\">↑</a>\n가장 간단한 용어로 <code class=\"language-text\">prototype</code> 은 객체의 청사진<small>(blueprint)</small>입니다. 현재 객체에 존재하는 경우 <strong>속성</strong>과 <strong>메서드</strong>의 폴백으로 사용됩니다. 이것은 객체간에 속성과 기능을 공유하는 방법입니다. JavaScript의 <strong>Prototypal Inheritance</strong>와 관련된 핵심 개념입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs [object Object]</span></code></pre></div>\n<p>비록 <code class=\"language-text\">o.toString</code> 메서드가 <code class=\"language-text\">o</code>객체에 존재하지 않더라도 에러를 던지지 않고 <code class=\"language-text\">[object Object]</code>를 리턴합니다.\n객체에 속성이 없으면 <strong>프로토 타입</strong>을 살펴 봅니다. 그리고 여전히 존재하지 않으면 <strong>프로토 타입의 프로토 타입</strong>을 살펴 봅니다. <strong>프로토 타입 체인</strong>에서 동일한 속성을 찾을 때까지 계속됩니다.\n<strong>프로토 타입 체인</strong>의 끝은 <strong>Object.prototype</strong>입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs true</span>\n<span class=\"token comment\">// 우리가 프로토 타입 체인을 찾고 있음을 의미하고</span>\n<span class=\"token comment\">// Object.prototype에 도달하여 \"toString\"메서드를 사용했습니다.</span></code></pre></div>\n<h1 id=\"26-iife는-무엇이며-그-사용법은-무엇인가-a-name26a\" style=\"position:relative;\"><a href=\"#26-iife%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EA%B7%B8-%EC%82%AC%EC%9A%A9%EB%B2%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name26a\" aria-label=\"26 iife는 무엇이며 그 사용법은 무엇인가 a name26a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>26. IIFE는 무엇이며, 그 사용법은 무엇인가? <a name=\"26\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>IIFE</strong> 또는 <strong>즉시 실행 함수 표현식</strong>은 생성 또는 선언 후에 바로 호출되거나 실행되는 함수입니다.\nIIFE를 생성하는 구문은 <code class=\"language-text\">function() {}</code>을 괄호 <code class=\"language-text\">()</code> 또는 <code class=\"language-text\">그룹 연산자</code>로 감싸서 함수를 표현식으로 처리 후 다른 괄호<code class=\"language-text\">()</code>로 호출합니다.\n따라서 IIFE는 <code class=\"language-text\">(function() {})()</code>처럼 생겼습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">named</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> utility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// utilities</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 예제는 모두 유효한 <strong>IIFE</strong>입니다.\n마지막에서 두 번째 예는 <strong>IIFE</strong> 함수에 인수를 전달할 수 있음을 보여줍니다.\n마지막 예는 <strong>IIFE</strong>의 결과를 변수에 저장하여 나중에 참조할 수 있음을 보여줍니다.</p>\n<p><strong>IIFE</strong>를 가장 잘 사용하는 것은 초기화 설정 기능을 만들고 글로벌 스코프의 다른 변수와 **이름 충돌<small>(naming collisions)</small>**을 피하거나 글로벌 네임 스페이스를 오염시키지 않는 것입니다. 예를 들어 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>우리 코드에서 사용할 수 있는 글로벌 함수를 가진 라이브러리 <code class=\"language-text\">somelibrary.js</code>에 대한 링크가 있다고 가정합니다.\n그러나 이 라이브러리에는 우리가 사용하지 않는 <code class=\"language-text\">createGraph</code>와 <code class=\"language-text\">drawGraph</code> 두 가지 메서드가 있습니다. 왜냐하면 이 메서드에는 버그가 있기 때문입니다.\n그리고 우리는 스스로 <code class=\"language-text\">createGraph</code>와 <code class=\"language-text\">drawGraph</code> 메서드를 구현하려고 합니다.</p>\n<ul>\n<li>해결하는 한 가지 방법은 스크립트의 구조를 변경하는 것입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// createGraph logic here</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">drawGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// drawGraph logic here</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>이 솔루션을 사용할 때 라이브러리가 제공하는 두 가지 메서드를 재정의합니다.</p>\n<ul>\n<li>이 문제를 해결하는 또 다른 방법은 우리가 함수의 이름을 변경하는 것입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">myCreateGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// createGraph logic here</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">myDrawGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// drawGraph logic here</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>이 솔루션을 사용할 때 또한 해당 함수 호출을 새 함수 이름으로 변경합니다.</p>\n<ul>\n<li>다른 방법은 <strong>IIFE</strong>를 사용하는 것입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n  <span class=\"token keyword\">const</span> graphUtility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// createGraph logic here</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">drawGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// drawGraph logic here</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      createGraph<span class=\"token punctuation\">,</span>\n      drawGraph\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>이 솔루션에서는 IIFE의 결과인 <code class=\"language-text\">createGraph</code>와 <code class=\"language-text\">drawGraph</code>의 두 가지 메서드를 포함하는 객체를 리턴하는 유틸리티 변수를 만들고 있습니다.</p>\n<p><code class=\"language-text\">IIFE</code>가 해결하는 또 다른 문제는 아래의 예에 있습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.list-group > li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> li<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  li<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>list-group</strong> 클래스를 가진 <code class=\"language-text\">ul</code> 엘리먼트가 있고 5 개의 <code class=\"language-text\">li</code> 자식 엘리먼트를 가지고 있다고 가정해봅시다.\n그리고 각각의 <code class=\"language-text\">li</code> 엘리먼트를 <strong>클릭</strong> 할 때 <code class=\"language-text\">console.log</code>의 <code class=\"language-text\">i</code> 값을 원합니다.</p>\n<p>그러나 이 코드에서 우리가 원하는 동작은 작동하지 않습니다.\n대신 아무 <code class=\"language-text\">li</code> 엘리먼트를 <strong>클릭</strong>하면 <code class=\"language-text\">5</code>가 로그로 기록됩니다.\n우리가 겪고있는 문제는 <strong>클로저</strong>의 작동 방식 때문입니다.\n<strong>클로저</strong>는 단순하게 현재 스코프, 부모 함수 스코프 및 글로벌 스코프에서 변수의 참조를 기억하는 함수의 기능입니다.\n글로벌 범위에서 <code class=\"language-text\">var</code> 키워드를 사용하여 변수를 선언할 때 분명히 우리는 글로벌 변수 <code class=\"language-text\">i</code>를 만듭니다.\n따라서 <code class=\"language-text\">li</code> 엘리먼트를 클릭하면 5가 기록되는데 그 이유는 나중에 콜백 함수에서 <code class=\"language-text\">i</code>를 참조할 때의 <code class=\"language-text\">i</code> 값이기 때문입니다.</p>\n<ul>\n<li>이에 대한 한 가지 해결책은 <strong>IIFE</strong>입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.list-group > li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> li<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">currentIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    li<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>currentIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 솔루션은 <strong>IIFE</strong>가 모든 반복에 대해 새로운 스코프를 작성하고 우리가 <code class=\"language-text\">i</code>의 값을 캡처하여 <code class=\"language-text\">currentIndex</code> 매개 변수로 전달하기 때문에 작동합니다. 그래서 우리가 <strong>IIFE</strong>를 호출할 때 <code class=\"language-text\">currentIndex</code> 값이 매 반복 때마다 다릅니다.</p>\n<h1 id=\"27-functionprototypeapply-사용법은-무엇인가-a-name27a\" style=\"position:relative;\"><a href=\"#27-functionprototypeapply-%EC%82%AC%EC%9A%A9%EB%B2%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name27a\" aria-label=\"27 functionprototypeapply 사용법은 무엇인가 a name27a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>27. <code class=\"language-text\">Function.prototype.apply</code> 사용법은 무엇인가? <a name=\"27\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">apply</code>는 호출 시점에 해당 함수의 <code class=\"language-text\">this</code> 또는 “소유자” 객체를 지정하는 함수를 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> details <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 'Hello World!</span></code></pre></div>\n<p>이 메서드는 <a href=\"#28\">Function.prototype.call</a>과 같이 동작하지만 유일한 차이점은 인수를 전달하는 방법입니다. <code class=\"language-text\">apply</code>에서는 인수를 배열로 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Marko Polo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">greetingMessage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>greetingMessage<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greeting</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"Hello Marko Polo!\"</span></code></pre></div>\n<h1 id=\"28-functionprototypecall-사용법은-무엇인가-a-name28a\" style=\"position:relative;\"><a href=\"#28-functionprototypecall-%EC%82%AC%EC%9A%A9%EB%B2%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name28a\" aria-label=\"28 functionprototypecall 사용법은 무엇인가 a name28a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>28. <code class=\"language-text\">Function.prototype.call</code> 사용법은 무엇인가? <a name=\"28\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">call</code>은 호출 시점에 <code class=\"language-text\">this</code> 또는 “소유자” 객체를 지정하는 함수를 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> details <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 'Hello World!'</span></code></pre></div>\n<p>이 메서드는 <a href=\"#27\">Function.prototype.apply</a>과 같이 동작하지만 유일한 차이점은 인수를 전달하는 방법입니다.\n<code class=\"language-text\">call</code>에서는 모든 인수에 대해 쉼표 <code class=\"language-text\">,</code> 로 구분하여 직접 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Marko Polo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">greetingMessage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>greetingMessage<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greeting</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"Hello Marko Polo!\"</span></code></pre></div>\n<h1 id=\"29-functionprototypeapply와-functionprototypecall의-차이점은-무엇인가-a-name29a\" style=\"position:relative;\"><a href=\"#29-functionprototypeapply%EC%99%80-functionprototypecall%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name29a\" aria-label=\"29 functionprototypeapply와 functionprototypecall의 차이점은 무엇인가 a name29a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>29. <code class=\"language-text\">Function.prototype.apply</code>와 <code class=\"language-text\">Function.prototype.call</code>의 차이점은 무엇인가? <a name=\"29\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">apply</code>와<code class=\"language-text\">call</code>의 유일한 차이점은 호출되는 함수에서 <strong>인수</strong>를 전달하는 방법입니다.\n<code class=\"language-text\">apply</code>에서는 인수를 배열로 전달하고 <code class=\"language-text\">call</code>에서는 인수를 하나씩 직접 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span><span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span><span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 15</span>\n<span class=\"token function\">reduceAdd</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 15</span></code></pre></div>\n<h1 id=\"30-functionprototypebind의-사용법은-무엇인가-a-name30a\" style=\"position:relative;\"><a href=\"#30-functionprototypebind%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name30a\" aria-label=\"30 functionprototypebind의 사용법은 무엇인가 a name30a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>30. <code class=\"language-text\">Function.prototype.bind</code>의 사용법은 무엇인가? <a name=\"30\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<code class=\"language-text\">bind</code> 메서드는 특정한 <code class=\"language-text\">this</code> 값이나 “소유자” 객체로 <em>묶인</em> 새로운 함수를 리턴하므로 나중에 코드에서 사용할 수 있습니다.\n<code class=\"language-text\">call</code>, <code class=\"language-text\">apply</code> 메서드는 <code class=\"language-text\">bind</code> 메서드처럼 새로운 함수를 리턴하는 대신 즉시 함수를 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">value</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// \"handleChange\"메서드를 \"MyComponent\"컴포넌트에 바인드</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something amazing here</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"31-함수형-프로그래밍smallfunctional-programmingsmall이란-무엇이며-함수형-언어smallfunctional-languagesmall로서-후보가-되는-javascript의-특징은-무엇인가-a-name31a\" style=\"position:relative;\"><a href=\"#31-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8Dsmallfunctional-programmingsmall%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%ED%95%A8%EC%88%98%ED%98%95-%EC%96%B8%EC%96%B4smallfunctional-languagesmall%EB%A1%9C%EC%84%9C-%ED%9B%84%EB%B3%B4%EA%B0%80-%EB%90%98%EB%8A%94-javascript%EC%9D%98-%ED%8A%B9%EC%A7%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name31a\" aria-label=\"31 함수형 프로그래밍smallfunctional programmingsmall이란 무엇이며 함수형 언어smallfunctional languagesmall로서 후보가 되는 javascript의 특징은 무엇인가 a name31a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>31. **함수형 프로그래밍<small>(Functional Programming)</small>**이란 무엇이며, **함수형 언어<small>(functional language)</small>**로서 후보가 되는 <strong>JavaScript</strong>의 특징은 무엇인가? <a name=\"31\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>함수형 프로그래밍</strong>은 전달되는 인수가 변이나 변경없이 어떤 값을 계산하는 표현식을 사용하여 함수로 어플리케이션을 만드는 방법에 대한 선언적 프로그래밍 패러다임 또는 패턴입니다. <small>(How)</small></p>\n<p>JavaScript의 <strong>Array</strong>에는 함수형 프로그래밍 세계에서 가장 유명한 함수인 <strong>map</strong>, <strong>filter</strong>, <strong>reduce</strong> 메서드가 있습니다.\n그것들의 유용성 때문에 그리고 이러한 함수를 순수하게 만드는 배열을 변이하거나 변경하지 않기 때문에 JavaScript는 함수형 프로그래밍 언어의 특징인 <strong>클로저</strong> 및 **고차 함수<small>(Higher Order Functions)</small>**를 지원합니다.</p>\n<ul>\n<li><code class=\"language-text\">map</code> 메서드는 배열의 모든 요소에서 제공된 콜백 함수를 호출한 결과로 새로운 배열을 만듭니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Functional\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Procedural\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Object-Oriented\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> wordsLength <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span> <span class=\"token operator\">=></span> word<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">filter</code> 메서드는 콜백 함수에서 테스트를 통과하는 모든 요소로 새로운 배열을 만듭니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isRegistered</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isRegistered</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mae'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isRegistered</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> registeredUsers <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>isRegistered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">reduce</code> 메서드는 누산기<small>(accumulator)</small>에 배열의 각 요소(왼쪽에서 오른쪽으로)를 감소시켜 하나의 값으로 함수를 적용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"am\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Iron\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Man\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> currentStr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"32-고차-함수smallhigher-order-functionssmall란-무엇인가-a-name32a\" style=\"position:relative;\"><a href=\"#32-%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98smallhigher-order-functionssmall%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name32a\" aria-label=\"32 고차 함수smallhigher order functionssmall란 무엇인가 a name32a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>32. **고차 함수<small>(Higher Order Functions)</small>**란 무엇인가? <a name=\"32\"></a></h1>\n<p><a href=\"#0\">↑</a>\n<strong>고차 함수</strong>는 함수를 리턴하거나 함수 값을 가진 인수를 받을 수 있는 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">higherOrderFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param<span class=\"token punctuation\">,</span>callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"33-함수는-왜-일급-객체smallfirst-class-objectssmall라-하는가-a-name33a\" style=\"position:relative;\"><a href=\"#33-%ED%95%A8%EC%88%98%EB%8A%94-%EC%99%9C-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4smallfirst-class-objectssmall%EB%9D%BC-%ED%95%98%EB%8A%94%EA%B0%80-a-name33a\" aria-label=\"33 함수는 왜 일급 객체smallfirst class objectssmall라 하는가 a name33a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>33. 함수는 왜 **일급 객체<small>(First-class Objects)</small>**라 하는가? <a name=\"33\"></a></h1>\n<p><a href=\"#0\">↑</a>\nJavaScript의 <strong>함수</strong>는 다른 값으로 취급되므로 <strong>일급 객체</strong>입니다.\n함수는 <strong>변수</strong>에 할당 할 수 있고, 메서드라고 불리는 <strong>객체의 속성</strong>이 될 수 있고, <strong>배열의 아이템</strong>도 될 수 있으며, 함수에 <strong>인수로 전달</strong> 될 수 있습니다. 그리고 함수의 <strong>값으로 리턴</strong> 될 수도 있습니다.</p>\n<h1 id=\"34-직접-arrayprototypemap-메서드를-구현하시오-a-name34a\" style=\"position:relative;\"><a href=\"#34-%EC%A7%81%EC%A0%91-arrayprototypemap-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EC%8B%9C%EC%98%A4-a-name34a\" aria-label=\"34 직접 arrayprototypemap 메서드를 구현하시오 a name34a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>34. 직접 <code class=\"language-text\">Array.prototype.map</code> 메서드를 구현하시오. <a name=\"34\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> mapCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 먼저 전달된 매개 변수가 올바른지 확인합니다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> mapCallback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이 함수를 호출 할 때마다 results 배열을 만듭니다.</span>\n    <span class=\"token comment\">// 원래 배열을 변형하고 싶지 않기 때문입니다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">mapCallback</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 'result'배열에서 mapCallback의 결과를 푸시</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// result 배열 리턴</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Array.prototype.map</code> 메서드는 MDN 설명에 의하면,</p>\n<p><strong><code class=\"language-text\">map()</code> 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 리턴합니다.</strong></p>\n<h1 id=\"35-직접-arrayprototypefilter-메서드를-구현하시오-a-name35a\" style=\"position:relative;\"><a href=\"#35-%EC%A7%81%EC%A0%91-arrayprototypefilter-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EC%8B%9C%EC%98%A4-a-name35a\" aria-label=\"35 직접 arrayprototypefilter 메서드를 구현하시오 a name35a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>35. 직접 <code class=\"language-text\">Array.prototype.filter</code> 메서드를 구현하시오. <a name=\"35\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> filterCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 먼저 전달된 매개 변수가 올바른지 확인합니다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> filterCallback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이 함수를 호출 할 때마다 results 배열을 만듭니다.</span>\n    <span class=\"token comment\">// 원래 배열을 변형하고 싶지 않기 때문입니다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// filterCallback의 리턴 값이 true나 \"truthy\"인지 확인</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">filterCallback</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 조건이 true이면 'result'배열에서 현재 아이템을 푸시합니다.</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// result 배열 리턴</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Array.prototype.filter</code> 메서드는 MDN 설명에 의하면,</p>\n<p><strong><code class=\"language-text\">filter()</code> 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 리턴합니다.</strong></p>\n<h1 id=\"36-직접-arrayprototypereduce-메서드를-구현하시오-a-name36a\" style=\"position:relative;\"><a href=\"#36-%EC%A7%81%EC%A0%91-arrayprototypereduce-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EC%8B%9C%EC%98%A4-a-name36a\" aria-label=\"36 직접 arrayprototypereduce 메서드를 구현하시오 a name36a permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>36. 직접 <code class=\"language-text\">Array.prototype.reduce</code> 메서드를 구현하시오. <a name=\"36\"></a></h1>\n<p><a href=\"#0\">↑</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> reduceCallback<span class=\"token punctuation\">,</span> initialValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 먼저 전달된 매개 변수가 올바른지 확인합니다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> reduceCallback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// initialValue가 함수에 전달되지 않으면</span>\n    <span class=\"token keyword\">let</span> hasInitialValue <span class=\"token operator\">=</span> initialValue <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> hasInitialValue <span class=\"token operator\">?</span> initialValue <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 첫 번째 배열 항목을 initialValue로 사용합니다.</span>\n\n    <span class=\"token comment\">// 그런 다음 initialValue가 함수에 전달되지 않으면 인덱스 1에서 루프를 시작합니다. 그렇지않고 initialValue가 있으면 0에서 시작합니다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> hasInitialValue <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 그런 다음 모든 반복에 대해 reduceCallback의 결과를 변수 값에 할당합니다.</span>\n      value <span class=\"token operator\">=</span> <span class=\"token function\">reduceCallback</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Array.prototype.reduce</code> 메서드는 MDN 설명에 의하면,</p>\n<p><strong><code class=\"language-text\">reduce()</code> 메서드는 배열의 각 요소에 대해 주어진 리듀서<small>(reducer)</small> 함수를 실행하고, 하나의 결과값을 리턴합니다.</strong></p>","frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 2부(번역)","date":"2020-01-15","description":"70 JavaScript Interview Questions","tags":"javascript, interview, translation"}}},"pageContext":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-2/","previous":{"fields":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-1/"},"frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 1부(번역)"},"tableOfContents":"<ul>\n<li><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0\">시작하며</a></li>\n<li><a href=\"#hi-guys-good-day-and-a-happy-new-year-\">Hi Guys Good Day and a Happy New Year 🎆🎆🎆!</a></li>\n<li><a href=\"#%EC%A7%88%EB%AC%B8-a-name0a\">질문 <a name=\"0\"></a></a></li>\n<li><a href=\"#1-undefined%EC%99%80-null%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EA%B0%80-a-name1a\">1. <code class=\"language-text\">undefined</code>와 <code class=\"language-text\">null</code>은 무엇이 다른가? <a name=\"1\"></a></a></li>\n<li><a href=\"#2--%EC%97%B0%EC%82%B0%EC%9E%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-a-name2a\">2. <code class=\"language-text\">&amp;&amp;</code> 연산자는 무엇을 하는가? <a name=\"2\"></a></a></li>\n<li><a href=\"#3--%EC%97%B0%EC%82%B0%EC%9E%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-a-name3a\">3. <code class=\"language-text\">||</code> 연산자는 무엇을 하는가? <a name=\"3\"></a></a></li>\n<li><a href=\"#4-string%EC%9D%84-number%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EA%B0%80%EC%9E%A5-%EB%B9%A0%EB%A5%B8-%EB%B0%A9%EB%B2%95%EC%9D%80--%EB%98%90%EB%8A%94-%EB%8B%A8%ED%95%AD-%EB%8D%94%ED%95%98%EA%B8%B0-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80-a-name4a\">4. string을 number로 변환하는 가장 빠른 방법은 + 또는 단항 더하기 연산자를 사용하는 것인가? <a name=\"4\"></a></a></li>\n<li><a href=\"#5-dom-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name5a\">5. DOM 이란 무엇인가? <a name=\"5\"></a></a></li>\n<li><a href=\"#6-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%ED%8C%8Csmallevent-propagationsmall-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name6a\">6. 이벤트 전파<small>(Event Propagation)</small> 란 무엇인가? <a name=\"6\"></a></a></li>\n<li><a href=\"#7-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B2%84%EB%B8%94%EB%A7%81smallevent-bubblingsmall-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name7a\">7. 이벤트 버블링<small>(Event Bubbling)</small> 이란 무엇인가? <a name=\"7\"></a></a></li>\n<li><a href=\"#8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%BA%A1%EC%B3%90%EB%A7%81smallevent-capturingsmall-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name8a\">8. 이벤트 캡쳐링<small>(Event Capturing)</small> 이란 무엇인가? <a name=\"8\"></a></a></li>\n<li><a href=\"#9-eventpreventdefault%EC%99%80-eventstoppropagation-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name9a\">9. <code class=\"language-text\">event.preventDefault()</code>와 <code class=\"language-text\">event.stopPropagation()</code> 메서드의 차이점은 무엇인가? <a name=\"9\"></a></a></li>\n<li><a href=\"#10-eventpreventdefault-%EB%A9%94%EC%84%9C%EB%93%9C%EA%B0%80-element%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EC%97%88%EB%8A%94%EC%A7%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94%EA%B0%80-a-name10a\">10. <code class=\"language-text\">event.preventDefault()</code> 메서드가 element에 사용되었는지 어떻게 확인하는가? <a name=\"10\"></a></a></li>\n<li><a href=\"#11-%EC%9D%B4-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-objsomepropx%EA%B0%80-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name11a\">11. 이 코드에서 <code class=\"language-text\">obj.someprop.x</code>가 에러 발생하는 이유는 무엇인가? <a name=\"11\"></a></a></li>\n<li><a href=\"#12-eventtarget-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name12a\">12. <strong>event.target</strong> 이란 무엇인가? <a name=\"12\"></a></a></li>\n<li><a href=\"#13-eventcurrenttarget-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name13a\">13. <strong>event.currentTarget</strong> 이란 무엇인가? <a name=\"13\"></a></a></li>\n<li><a href=\"#14--%EC%99%80--%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name14a\">14. <code class=\"language-text\">==</code> 와 <code class=\"language-text\">===</code> 의 차이는 무엇인가? <a name=\"14\"></a></a></li>\n<li><a href=\"#15-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B9%84%EC%8A%B7%ED%95%9C-%EB%91%90-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%A0%EB%95%8C-false%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name15a\">15. 자바스크립트에서 비슷한 두 객체를 비교할때 <strong>false</strong>를 리턴하는 이유는 무엇인가? <a name=\"15\"></a></a></li>\n<li><a href=\"#16--%EC%97%B0%EC%82%B0%EC%9E%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%98%EB%8A%94%EA%B0%80-a-name16a\">16. <code class=\"language-text\">!!</code> 연산자는 무엇을 하는가? <a name=\"16\"></a></a></li>\n<li><a href=\"#17-%ED%95%9C-%EC%A4%84%EC%97%90-%EC%97%AC%EB%9F%AC-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%ED%8F%89%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name17a\">17. 한 줄에 여러 표현식을 평가하는 방법은 무엇인가? <a name=\"17\"></a></a></li>\n</ul>"},"next":{"fields":{"slug":"/blog/2020/70-JavaScript-Interview-Questions-3/"},"frontmatter":{"title":"70 자바스크립트 인터뷰 질문 - 3부(번역)"},"tableOfContents":"<ul>\n<li><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0\">시작하며</a></li>\n<li><a href=\"#hi-guys-good-day-and-a-happy-new-year-\">Hi Guys Good Day and a Happy New Year 🎆🎆🎆!</a></li>\n<li><a href=\"#%EC%A7%88%EB%AC%B8-a-name0a\">질문 <a name=\"0\"></a></a></li>\n<li><a href=\"#37-arguments-%EA%B0%9D%EC%B2%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name37a\">37. <strong>arguments</strong> 객체란 무엇인가? <a name=\"37\"></a></a></li>\n<li><a href=\"#38-prototype%EC%97%86%EC%9D%B4-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name38a\">38. <strong>prototype</strong>없이 객체를 만드는 방법은 무엇인가? <a name=\"38\"></a></a></li>\n<li><a href=\"#39-%EC%9D%B4-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C-b%EA%B0%80-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EB%B3%80%EC%88%98%EB%A1%9C-%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name39a\">39. 이 함수를 호출할 때 <code class=\"language-text\">b</code>가 글로벌 변수로 되는 이유는 무엇인가? <a name=\"39\"></a></a></li>\n<li><a href=\"#40-ecmascript%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name40a\">40. <strong>ECMAScript</strong>이란 무엇인가? <a name=\"40\"></a></a></li>\n<li><a href=\"#41-es6-%EB%98%90%EB%8A%94-ecmascript-2015%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%EA%B8%B0%EB%8A%A5%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name41a\">41. <strong>ES6</strong> 또는 <strong>ECMAScript 2015</strong>의 새로운 기능은 무엇인가? <a name=\"41\"></a></a></li>\n<li><a href=\"#42-var-let-%EB%B0%8F-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name42a\">42. <code class=\"language-text\">var</code>, <code class=\"language-text\">let</code> 및 <code class=\"language-text\">const</code> 키워드의 차이점은 무엇인가? <a name=\"42\"></a></a></li>\n<li><a href=\"#43-arrow-functions-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name43a\">43. <strong>Arrow functions</strong> 이란 무엇인가? <a name=\"43\"></a></a></li>\n<li><a href=\"#44-%ED%81%B4%EB%9E%98%EC%8A%A4smallclassessmall%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name44a\">44. 클래스<small>(Classes)</small>란 무엇인가? <a name=\"44\"></a></a></li>\n<li><a href=\"#45-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A6%AC%ED%84%B0%EB%9F%B4smalltemplate-literalssmall-%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name45a\">45. <strong>템플릿 리터럴<small>(Template Literals)</small></strong> 이란 무엇인가? <a name=\"45\"></a></a></li>\n<li><a href=\"#46-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4smallobject-destructuringsmall%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name46a\">46. 객체 구조 분해<small>(Object Destructuring)</small>란 무엇인가? <a name=\"46\"></a></a></li>\n<li><a href=\"#47-es6-modules%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name47a\">47. <code class=\"language-text\">ES6 Modules</code>이란 무엇인가? <a name=\"47\"></a></a></li>\n<li><a href=\"#48-set-%EA%B0%9D%EC%B2%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-a-name48a\">48. <code class=\"language-text\">Set</code> 객체는 무엇이며 어떻게 작동하는가? <a name=\"48\"></a></a></li>\n<li><a href=\"#49-%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name49a\">49. 콜백 함수란 무엇인가? <a name=\"49\"></a></a></li>\n<li><a href=\"#50-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4smallpromisessmall-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name50a\">50. <strong>프로미스<small>(Promises)</small></strong> 란 무엇인가? <a name=\"50\"></a></a></li>\n<li><a href=\"#51-asyncawait%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-a-name51a\">51. <em>async/await</em>란 무엇이며 어떻게 작동하는가? <a name=\"51\"></a></a></li>\n<li><a href=\"#52-%EC%8A%A4%ED%94%84%EB%A0%88%EB%93%9C-%EC%97%B0%EC%82%B0%EC%9E%90smallspread-operatorsmall-%EC%99%80-%EB%82%98%EB%A8%B8%EC%A7%80-%EC%97%B0%EC%82%B0%EC%9E%90smallrest-operatorsmall-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name52a\">52. <strong>스프레드 연산자<small>(Spread operator)</small></strong> 와 <strong>나머지 연산자<small>(Rest operator)</small></strong> 의 차이점은 무엇인가? <a name=\"52\"></a></a></li>\n<li><a href=\"#53-%EA%B8%B0%EB%B3%B8-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98smalldefault-parameterssmall-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name53a\">53. <strong>기본 매개 변수<small>(Default Parameters)</small></strong> 란 무엇인가? <a name=\"53\"></a></a></li>\n<li><a href=\"#54-%EB%9E%98%ED%8D%BC-%EA%B0%9D%EC%B2%B4smallwrapper-objectssmall-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-a-name54a\">54. <strong>래퍼 객체<small>(Wrapper Objects)</small></strong> 란 무엇인가? <a name=\"54\"></a></a></li>\n</ul>"}}},"staticQueryHashes":["1137390604","3980716358"]}