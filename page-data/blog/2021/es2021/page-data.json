{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2021/es2021/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"19fa7111-fd09-5a9a-977f-cd06f860a9b2","excerpt":"Ecma International approves new standards 6월, ES2021 정식 릴리즈 소식이 들려왔다.\n스펙은 이미 알려져 있었으나 승인 시점에 글을 작성해보고자 하여 이제야 정리해 본다. 숫자 구분 기호 Numeric separator 🔗 Numeric…","html":"<blockquote>\n<p><a href=\"https://www.ecma-international.org/news/ecma-international-approves-new-standards-4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ecma International approves new standards</a></p>\n</blockquote>\n<p>6월, ES2021 정식 릴리즈 소식이 들려왔다.\n스펙은 이미 알려져 있었으나 승인 시점에 글을 작성해보고자 하여 이제야 정리해 본다.</p>\n<h1>숫자 구분 기호 <small>Numeric separator</small></h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-numeric-separator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Numeric separator 제안</a></p>\n<p>성능과 관계없이 big number를 보다 읽기 쉽게 하기 위한 표현이 추가되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 이전</span>\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES2021</span>\n<span class=\"token comment\">// _ 만 추가하면 됨</span>\n<span class=\"token keyword\">const</span> readableNum <span class=\"token operator\">=</span> <span class=\"token number\">12_345_6789</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Promise.any</h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-promise-any\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Promise.any 제안</a></p>\n<p>배열에 담은 여러 프로미스(비동기) 처리 중 하나라도 성공하면 성공 케이스로 이행하고 종료한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.google.co.kr/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'google'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.naver.com/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'naver'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.daum.net/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'daum'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 가장 먼저 반환된 프로미스 결괏값</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'google'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 모든 프로미스가 reject 됨</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>WeakRefs와 Finalizers</h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-weakrefs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WeakRefs와 Finalizers 제안</a></p>\n<p>자바스크립트에서 객체 참조는 강하게 유지된다. 이는 곧 객체에 대한 참조가 있는 한 가비지 컬렉션이 동작하지 않는다는 말이다.\n하지만 이번에 추가된 WeakRef로 약한 참조를 만들 수 있게 되었고 큰 객체를 가지는 캐시 또는 맵핑에 사용하면 성능상의 이점을 누릴 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 강한 참조</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 약한 참조</span>\n<span class=\"token keyword\">const</span> xWeak <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakRef</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 값을 사용하기</span>\n<span class=\"token keyword\">const</span> xWeakDeref <span class=\"token operator\">=</span> xWeak<span class=\"token punctuation\">.</span><span class=\"token function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { name: \"foo\" }</span></code></pre></div>\n<p>Finalizers는 ES2021에서 추가된 또 다른 메모리 관련 기능으로 가비지 컬렉션이 될 때 콜백을 호출하도록 하는 기능이다.\n(그러나 이 기능이 항상 제대로 작동한다는 보장은 없다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Finalizer 생성</span>\n<span class=\"token keyword\">const</span> registry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizationRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Finalizer에 obj 변수를 연결</span>\nregistry<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"some value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체가 가비지 콜렉션 된 후에 Finalizer 콜백이 발생할 수 있음</span>\nobj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>String.prototype.replaceAll</h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-string-replaceall\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">String.prototype.replaceAll 제안</a></p>\n<p>기존 <code class=\"language-text\">String.prototype.replaceAll()</code>의 경우 정규식을 사용하여 지정한 모든 문자열을 변경할 수 있었는데 ES2021에선 정규식을 사용하지 않더라도 모든 문자열을 변경할 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"우리 딸은 귀여워요. 딸을 보면 힘이 납니다.\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이전</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\딸</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"아들\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이전의 다른 방법</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"딸\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아들\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES2021</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"딸\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"아들\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 우리 아들은 귀여워요. 아들을 보면 힘이 납니다.</span></code></pre></div>\n<h1>논리 할당 연산자 <small>Logical assignment</small></h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-logical-assignment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Logical assignment 제안</a></p>\n<p>논리 연산자와 할당 표현식을 결합한 논리 할당 연산자 3가지가 추가되었다.</p>\n<h3>Logical Nullish</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Nullish</span>\n<span class=\"token keyword\">let</span> n1<span class=\"token punctuation\">;</span>\nn1 <span class=\"token operator\">??=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token keyword\">let</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nn2 <span class=\"token operator\">??=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 풀어 쓰기 1</span>\n<span class=\"token keyword\">let</span> n3<span class=\"token punctuation\">;</span>\nn3 <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span>n3 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 풀어 쓰기 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n3 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> n3 <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  n3 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Logical OR</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">let</span> or <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nor <span class=\"token operator\">||=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 풀어 쓰기 1</span>\nor <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>or <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 풀어 쓰기 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>or<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  or <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Logical AND</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AND</span>\n<span class=\"token keyword\">let</span> and <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nand <span class=\"token operator\">&amp;&amp;=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 풀어 쓰기 1</span>\nand <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>and <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 풀어 쓰기 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>and<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  and <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>마치며</h1>\n<p>올해엔 큰 추가 및 변경 사항은 없으나 논리 할당 연산자나 정규식이 필요 없는 replaceAll등으로 편의적인 부분이 향상되었다.\n다음 ECMAScript인 ES2022를 기대하며 이만 글을 줄인다.</p>","frontmatter":{"title":"ES2021에 추가된 새로운 기능","date":"June 27, 2021","description":"자바스크립트 ES2021 변경점 살펴보기","tags":"javascript"}}},"pageContext":{"slug":"/blog/2021/es2021/","previous":{"fields":{"slug":"/blog/2021/building-a-scalable-e-commerce-data-model/"},"frontmatter":{"title":"확장 가능한 이커머스 데이터 모델 구축 (번역)"}},"next":null}},"staticQueryHashes":["1137390604","3980716358"]}