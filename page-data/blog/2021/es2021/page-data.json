{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2021/es2021/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"4ad68bcd-043d-52eb-a567-dce1f89c6179","excerpt":"Ecma International approves new standards 6월, ES2021 정식 릴리즈 소식이 들려왔다.\n스펙은 이미 알려져 있었으나 승인 시점에 글을 작성해보고자 하여 이제야 정리해 본다. 숫자 구분 기호 Numeric separator 🔗 Numeric…","html":"<blockquote>\n<p><a href=\"https://www.ecma-international.org/news/ecma-international-approves-new-standards-4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ecma International approves new standards</a></p>\n</blockquote>\n<p>6월, ES2021 정식 릴리즈 소식이 들려왔다.\n스펙은 이미 알려져 있었으나 승인 시점에 글을 작성해보고자 하여 이제야 정리해 본다.</p>\n<h1 id=\"숫자-구분-기호-smallnumeric-separatorsmall\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90-%EA%B5%AC%EB%B6%84-%EA%B8%B0%ED%98%B8-smallnumeric-separatorsmall\" aria-label=\"숫자 구분 기호 smallnumeric separatorsmall permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 구분 기호 <small>Numeric separator</small></h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-numeric-separator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Numeric separator 제안</a></p>\n<p>성능과 관계없이 big number를 보다 읽기 쉽게 하기 위한 표현이 추가되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 이전</span>\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES2021</span>\n<span class=\"token comment\">// _ 만 추가하면 됨</span>\n<span class=\"token keyword\">const</span> readableNum <span class=\"token operator\">=</span> <span class=\"token number\">12_345_6789</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"promiseany\" style=\"position:relative;\"><a href=\"#promiseany\" aria-label=\"promiseany permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.any</h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-promise-any\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Promise.any 제안</a></p>\n<p>배열에 담은 여러 프로미스(비동기) 처리 중 하나라도 성공하면 성공 케이스로 이행하고 종료한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.google.co.kr/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'google'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.naver.com/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'naver'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.daum.net/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'daum'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 가장 먼저 반환된 프로미스 결괏값</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'google'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 모든 프로미스가 reject 됨</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"weakrefs와-finalizers\" style=\"position:relative;\"><a href=\"#weakrefs%EC%99%80-finalizers\" aria-label=\"weakrefs와 finalizers permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WeakRefs와 Finalizers</h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-weakrefs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WeakRefs와 Finalizers 제안</a></p>\n<p>자바스크립트에서 객체 참조는 강하게 유지된다. 이는 곧 객체에 대한 참조가 있는 한 가비지 컬렉션이 동작하지 않는다는 말이다.\n하지만 이번에 추가된 WeakRef로 약한 참조를 만들 수 있게 되었고 큰 객체를 가지는 캐시 또는 맵핑에 사용하면 성능상의 이점을 누릴 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 강한 참조</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 약한 참조</span>\n<span class=\"token keyword\">const</span> xWeak <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakRef</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 값을 사용하기</span>\n<span class=\"token keyword\">const</span> xWeakDeref <span class=\"token operator\">=</span> xWeak<span class=\"token punctuation\">.</span><span class=\"token function\">deref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { name: \"foo\" }</span></code></pre></div>\n<p>Finalizers는 ES2021에서 추가된 또 다른 메모리 관련 기능으로 가비지 컬렉션이 될 때 콜백을 호출하도록 하는 기능이다.\n(그러나 이 기능이 항상 제대로 작동한다는 보장은 없다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Finalizer 생성</span>\n<span class=\"token keyword\">const</span> registry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizationRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Finalizer에 obj 변수를 연결</span>\nregistry<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"some value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체가 가비지 콜렉션 된 후에 Finalizer 콜백이 발생할 수 있음</span>\nobj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"stringprototypereplaceall\" style=\"position:relative;\"><a href=\"#stringprototypereplaceall\" aria-label=\"stringprototypereplaceall permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String.prototype.replaceAll</h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-string-replaceall\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">String.prototype.replaceAll 제안</a></p>\n<p>기존 <code class=\"language-text\">String.prototype.replaceAll()</code>의 경우 정규식을 사용하여 지정한 모든 문자열을 변경할 수 있었는데 ES2021에선 정규식을 사용하지 않더라도 모든 문자열을 변경할 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"우리 딸은 귀여워요. 딸을 보면 힘이 납니다.\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이전</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\딸</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"아들\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이전의 다른 방법</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"딸\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아들\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES2021</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"딸\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"아들\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 우리 아들은 귀여워요. 아들을 보면 힘이 납니다.</span></code></pre></div>\n<h1 id=\"논리-할당-연산자-smalllogical-assignmentsmall\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-%ED%95%A0%EB%8B%B9-%EC%97%B0%EC%82%B0%EC%9E%90-smalllogical-assignmentsmall\" aria-label=\"논리 할당 연산자 smalllogical assignmentsmall permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 할당 연산자 <small>Logical assignment</small></h1>\n<p>🔗 <a href=\"https://github.com/tc39/proposal-logical-assignment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Logical assignment 제안</a></p>\n<p>논리 연산자와 할당 표현식을 결합한 논리 할당 연산자 3가지가 추가되었다.</p>\n<h3 id=\"logical-nullish\" style=\"position:relative;\"><a href=\"#logical-nullish\" aria-label=\"logical nullish permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical Nullish</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Nullish</span>\n<span class=\"token keyword\">let</span> n1<span class=\"token punctuation\">;</span>\nn1 <span class=\"token operator\">??=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token keyword\">let</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nn2 <span class=\"token operator\">??=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 풀어 쓰기 1</span>\n<span class=\"token keyword\">let</span> n3<span class=\"token punctuation\">;</span>\nn3 <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span>n3 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 풀어 쓰기 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n3 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> n3 <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  n3 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"logical-or\" style=\"position:relative;\"><a href=\"#logical-or\" aria-label=\"logical or permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical OR</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">let</span> or <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nor <span class=\"token operator\">||=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 풀어 쓰기 1</span>\nor <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>or <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 풀어 쓰기 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>or<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  or <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"logical-and\" style=\"position:relative;\"><a href=\"#logical-and\" aria-label=\"logical and permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical AND</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AND</span>\n<span class=\"token keyword\">let</span> and <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nand <span class=\"token operator\">&amp;&amp;=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// 풀어 쓰기 1</span>\nand <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>and <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 풀어 쓰기 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>and<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  and <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h1>\n<p>올해엔 큰 추가점이나 변경 사항은 없으며 논리 할당 연산자나 정규식이 필요 없는 replaceAll등 편의적인 부분이 향상되었다.\n다음 ECMAScript인 ES2022를 기대하며 이만 글을 줄인다.</p>","frontmatter":{"title":"ES2021에 추가된 새로운 기능","date":"2021-06-27","description":"자바스크립트 ES2021 변경점 살펴보기","tags":["javascript"]}}},"pageContext":{"slug":"/blog/2021/es2021/","previous":{"fields":{"slug":"/blog/2021/building-a-scalable-e-commerce-data-model/"},"frontmatter":{"title":"확장 가능한 이커머스 데이터 모델 구축","tags":["database","translation"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">시작하기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4%EC%BB%A4%EB%A8%B8%EC%8A%A4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8\">이커머스 데이터 모델</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B3%A0%EA%B0%9D%EC%9D%80-%EB%88%84%EA%B5%AC%EC%9E%85%EB%8B%88%EA%B9%8C\">고객은 누구입니까?</a></p>\n<ul>\n<li><a href=\"#%EA%B9%8A%EC%9D%B4-%EC%9E%88%EA%B2%8C-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-addresses\">깊이 있게 들어가기: Addresses</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%9C%ED%92%88%EA%B3%BC-%EC%B9%B4%ED%83%88%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%A9%EB%8B%88%EA%B9%8C\">어떻게 제품과 카탈로그를 구성합니까?</a></p>\n<ul>\n<li><a href=\"#%EA%B9%8A%EC%9D%B4-%EC%9E%88%EA%B2%8C-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-pricing\">깊이 있게 들어가기: Pricing</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A3%BC%EB%AC%B8%EC%9D%84-%EA%B0%84%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EA%B9%8C\">어떻게 주문을 간소화합니까?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EB%A5%B8-%EB%B0%A9%EB%B2%95-fabric\">다른 방법 (Fabric)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></p>\n</li>\n</ul>"},"next":{"fields":{"slug":"/blog/2021/how-we-design-our-apis-at-slack/"},"frontmatter":{"title":"Slack에서 API를 설계하는 방법","tags":["api","translation"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99\">설계 원칙</a></p>\n<ul>\n<li><a href=\"#1-%ED%95%9C-%EA%B0%80%EC%A7%80-%EC%9D%BC%EC%9D%84-%EC%9E%98-%ED%95%B4%EB%82%B4%EB%9D%BC\">1. 한 가지 일을 잘 해내라</a></li>\n<li><a href=\"#2-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%EC%89%BD%EA%B2%8C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%9D%BC\">2. 빠르고 쉽게 시작하라</a></li>\n<li><a href=\"#3-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B8-%EC%9D%BC%EA%B4%80%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%B4-%EB%85%B8%EB%A0%A5%ED%95%98%EB%9D%BC\">3. 직관적인 일관성을 위해 노력하라</a></li>\n<li><a href=\"#4-%EC%9D%98%EB%AF%B8%EC%9E%88%EB%8A%94-%EC%97%90%EB%9F%AC%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%98%EB%9D%BC\">4. 의미있는 에러를 반환하라</a></li>\n<li><a href=\"#5-%EA%B7%9C%EB%AA%A8%EC%99%80-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%84%A4%EA%B3%84%EB%A5%BC-%ED%95%98%EB%9D%BC\">5. 규모와 성능을 위한 설계를 하라</a></li>\n<li><a href=\"#6-%ED%98%B8%ED%99%98%EC%84%B1%EC%9D%84-%EA%B9%A8%EB%8A%94-%EB%B3%80%EA%B2%BD-%EC%82%AC%ED%95%AD-smallbreaking-changessmall%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC\">6. 호환성을 깨는 변경 사항 <small>breaking changes</small>을 피하라</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%84%A4%EA%B3%84-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">설계 프로세스</a></p>\n<ul>\n<li><a href=\"#1-api-%EC%82%AC%EC%96%91-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">1. API 사양 작성하기</a></li>\n<li><a href=\"#2-%EB%82%B4%EB%B6%80-api-%EB%A6%AC%EB%B7%B0\">2. 내부 API 리뷰</a></li>\n<li><a href=\"#3-%EC%B4%88%EA%B8%B0-%ED%8C%8C%ED%8A%B8%EB%84%88-%ED%94%BC%EB%93%9C%EB%B0%B1\">3. 초기 파트너 피드백</a></li>\n<li><a href=\"#4-%EB%B2%A0%ED%83%80-%ED%85%8C%EC%8A%A4%ED%8A%B8\">4. 베타 테스트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1-%EC%9C%A0%EC%A7%80\">유연성 유지</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></p>\n</li>\n</ul>"}}},"staticQueryHashes":["3526770880","3980716358"],"slicesMap":{}}