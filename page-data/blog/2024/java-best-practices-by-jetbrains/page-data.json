{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2024/java-best-practices-by-jetbrains/","result":{"data":{"site":{"siteMetadata":{"title":"lannex"}},"markdownRemark":{"id":"3125c790-9ad0-5971-87b4-f1f1484c7a23","excerpt":"…","html":"<p>좋은 코드는 일정한 규칙을 따르며, 그 규칙을 알수록 성공 가능성은 높아집니다. 이 글에서는 자바로 개발할 때 도움이 되는 몇 가지 베스트 프랙티스를 공유하고자 합니다. 소프트웨어 개발에 관한 전반적인 조언부터 자바 및 프로젝트에 특화된 필수 지식까지 폭넓게 다룰 예정입니다. 지금부터 시작하겠습니다!</p>\n<h2 id=\"일반-원칙\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-%EC%9B%90%EC%B9%99\" aria-label=\"일반 원칙 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 원칙</h2>\n<p>다음은 모던한 코딩에 있어 염두에 둬야 할 일반적인 규칙들입니다.</p>\n<h3 id=\"명확하게-작성할-것-지나치게-영리하게-쓰지-말-것\" style=\"position:relative;\"><a href=\"#%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1%ED%95%A0-%EA%B2%83-%EC%A7%80%EB%82%98%EC%B9%98%EA%B2%8C-%EC%98%81%EB%A6%AC%ED%95%98%EA%B2%8C-%EC%93%B0%EC%A7%80-%EB%A7%90-%EA%B2%83\" aria-label=\"명확하게 작성할 것 지나치게 영리하게 쓰지 말 것 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명확하게 작성할 것, 지나치게 영리하게 쓰지 말 것</h3>\n<p>코드의 가장 중요한 목적은 이해하기 쉽고 유지보수 가능한 상태를 유지하는 것입니다. 기술적인 능력을 뽐내기 위한 장치가 아니라는 의미입니다. 명확하게 작성된 코드는 디버깅이 쉬우며 유지보수와 확장도 원활해집니다. 이는 프로젝트에 참여하는 모든 사람에게 도움이 됩니다. 복잡성은 명예의 훈장이 아닙니니다. 단순함과 가독성이야말로 진정한 명예입니다.</p>\n<p>아래 예시를 보세요.</p>\n<h4 id=\"영리하지만-난해\" style=\"position:relative;\"><a href=\"#%EC%98%81%EB%A6%AC%ED%95%98%EC%A7%80%EB%A7%8C-%EB%82%9C%ED%95%B4\" aria-label=\"영리하지만 난해 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영리하지만 난해</h4>\n<p><img src=\"https://lh7-us.googleusercontent.com/3Iunmb-I7GkBx119gey_37G_ik3T2PLeqLREXtgFcLNpgpHB_uyC9BgIN85kqbRYfrHDEJamv0rAVKINP-cgNg1So6TTiPWsIvS5RyAswNvhMkZY2y_Fj0tK0vQeNHhCqXXyDsLlhTdFLYOEr8K_rL0\" alt=\"01\"></p>\n<p>다음은 변수 a와 b의 값을 교환하는 다소 특이한 방법입니다. 영리하지만 처음 보는 사람이 즉시 이해하기는 어렵습니다.</p>\n<h4 id=\"명확한\" style=\"position:relative;\"><a href=\"#%EB%AA%85%ED%99%95%ED%95%9C\" aria-label=\"명확한 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명확한</h4>\n<p><img src=\"https://lh7-us.googleusercontent.com/Ir3XdLdpAXqzvWGxEv6-9yZcHy39BvtsIV0YpkBPfKU3kpP9oEBqtZlsaPml3gw4csQILE4GYuKYppYfKptJMzXB-0FJsNLv1tMou-lcsud8o_K9kpb01GjqnZBLXCFLsi4iplTj31N28wHB-EX-bEk\" alt=\"02\"></p>\n<p>다음은 보다 일반적이고 흔히 쓰이는 접근 방식입니다. 비록 코드가 한 줄 더 많아질지라도 직관적이고 명확해서 대부분의 프로그래머가 쉽게 이해할 수 있습니다.</p>\n<h3 id=\"짧고-간결하게-유지할-것\" style=\"position:relative;\"><a href=\"#%EC%A7%A7%EA%B3%A0-%EA%B0%84%EA%B2%B0%ED%95%98%EA%B2%8C-%EC%9C%A0%EC%A7%80%ED%95%A0-%EA%B2%83\" aria-label=\"짧고 간결하게 유지할 것 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>짧고 간결하게 유지할 것</h3>\n<p>메서드와 클래스는 너무 길어지지 않도록 주의해야 합니다. 클래스의 길이나 단어 수에 대한 엄격한 규칙은 없지만, 가능한 명확하고 응집력 있는 구조를 유지하는 게 좋습니다.\n메서드는 일반적으로 10~20줄 정도를 권장합니다. 메서드가 이보다 길어진다면, 더 작고 관리 가능한 단위로 나누는 편이 좋습니다.</p>\n<p>이와 관련하여, 긴 메서드를 인지하는 연습을 해보고 싶다면, <a href=\"https://www.youtube.com/watch?v=eqkqDn21OMI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">테크니컬 코치인 Emily Bache가 만든 이 동영상</a>을 보시는 걸 추천합니다.</p>\n<p>또한 IntelliJ IDEA는 다양한 리팩토링 옵션을 제공하여 긴 메서드나 클래스를 간결하게 정리하는 데 도움을 줍니다. 예를 들어, 메서드를 추출(extract method)하여 길어진 메서드를 더 짧고 명확한 단위로 나눌 수 있게 도와줍니다.</p>\n<h3 id=\"이름은-어렵지만-신중하고-직관적으로-짓기\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%A6%84%EC%9D%80-%EC%96%B4%EB%A0%B5%EC%A7%80%EB%A7%8C-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B3%A0-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%A7%93%EA%B8%B0\" aria-label=\"이름은 어렵지만 신중하고 직관적으로 짓기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이름은 어렵지만 신중하고 직관적으로 짓기</h3>\n<p>메서드와 변수의 이름을 잘 짓는 것은 코드를 직관적으로 이해할 수 있게 해주는 중요한 지표이며, 원활한 의사소통에 필수적입니다. 다음은 중요한 네이밍 컨벤션에 대한 가이드라인입니다.</p>\n<ul>\n<li>한 글자짜리 변수는 피하세요.</li>\n<li>메서드 이름은 수행하는 작업을 명확히 나타내야 합니다.</li>\n<li>객체와 필드의 이름은 비즈니스 도메인에 맞춰 명확하게 지으세요.</li>\n</ul>\n<p>예를 들어, 메서드 이름이 calculateTotalPrice()라면 이 메서드의 목적을 한눈에 알 수 있지만, 모호한 이름인 calculate()는 정확한 기능을 파악하기 어렵습니다. 변수의 경우도 customerEmailAddress라고 하면 즉각 이해할 수 있지만, cea처럼 축약하면 의미를 알기 어렵고 혼란을 초래할 수 있습니다.</p>\n<p>또 다른 예로, 변수 이름을 단순히 timeout으로 짓기보다 단위를 명확히 표현한 timeoutInMs 또는 timeoutInMilliseconds를 사용하는 것이 좋습니다.</p>\n<h3 id=\"테스트-테스트-테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 테스트 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트, 테스트, 테스트</h3>\n<p>코드를 테스트하는 것은 애플리케이션이 예상대로 동작하고 향후 변경 사항이 발생해도 올바르게 동작할지 확인하기 위해 필수적입니다. 테스트는 초기에 문제를 발견하게 도와주므로 수정 비용과 난이도를 낮춰줍니다. 또한, 코드가 의도한 바대로 동작하도록 안내해주고, 이후 업데이트 시 코드가 망가지는 것을 최소화합니다.</p>\n<p>좋은 테스트 이름은 각 테스트가 수행하는 작업과 확인 사항을 명확히 나타냅니다. 예를 들어 AlertWhenEmailIsMissing()이라는 테스트는 이메일이 누락되었을 때 알림을 검사한다는 것을 보여주며, 상세히 파고들지 않고도 내용을 이해할 수 있게 합니다.</p>\n<p>테스트에 대한 자세한 정보는 <a href=\"https://maritvandijk.com/use-testing-to-develop-better-software-faster/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Marit van Dijk의 블로그</a>를 참고하세요.</p>\n<h2 id=\"언어-특화된-팁\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%96%B4-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%8C%81\" aria-label=\"언어 특화된 팁 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언어 특화된 팁</h2>\n<p>다음 팁과 트릭을 통해 자바로 개발할 때 흔히 저지르는 실수를 방지하고, 코드의 품질을 한 단계 끌어올릴 수 있습니다.</p>\n<h3 id=\"복잡하고-긴-if문-대신-switch-표현식-사용하기\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%9E%A1%ED%95%98%EA%B3%A0-%EA%B8%B4-if%EB%AC%B8-%EB%8C%80%EC%8B%A0-switch-%ED%91%9C%ED%98%84%EC%8B%9D-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"복잡하고 긴 if문 대신 switch 표현식 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복잡하고 긴 if문 대신 switch 표현식 사용하기</h3>\n<p>switch 표현식을 사용하면 다수의 조건을 하나의 구조로 정리할 수 있어 코드가 더욱 읽기 쉽고 명확해집니다. 이는 유지보수도 더 간단하게 만들어줍니다.</p>\n<p>아래의 아이스크림과 주요 재료에 대한 예시를 살펴보겠습니다.</p>\n<h4 id=\"너무-많은-else-if를-사용한-경우\" style=\"position:relative;\"><a href=\"#%EB%84%88%EB%AC%B4-%EB%A7%8E%EC%9D%80-else-if%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-label=\"너무 많은 else if를 사용한 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>너무 많은 else-if를 사용한 경우</h4>\n<p>이 예시에서는 아이스크림 맛과 재료를 매칭할 때 else-if 문을 연쇄적으로 사용합니다. 아이스크림 맛이 많아질수록 if 문의 수가 급증하여 코드를 읽기 어렵게 만듭니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/O42bfLsz8V-xOKeumhwXKG84Kvy_PJfJNyn_V8g4l3ZN7xAphISTqTpbc23amF4FOHE_ENnu2ogasrPBSWJS_DYgPMLDUQsS0SF4k7hl7VqfArgixZL5DW2Mns_6iHRBKTxkZ_7V4dk87mVF7RwG8gg\" alt=\"03\"></p>\n<h4 id=\"switch를-사용한-경우\" style=\"position:relative;\"><a href=\"#switch%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-label=\"switch를 사용한 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>switch를 사용한 경우</h4>\n<p>다음은 여러 if-else 조건 대신 switch 표현식을 이용한 예시입니다. switch 표현식은 간결하고 깔끔하며, 단일 변수를 여러 상수값과 비교할 때 더욱 이해하기 쉽습니다.</p>\n<p>IntelliJ IDEA는 if문을 단 몇 초만에 switch 표현식으로 바꿔주는 특별한 기능을 제공합니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/mUrqN3V_bwvcaHeZD-Cs3UNLpr9ea9br-OCsRcVE5OSxH00wjEsJotORFeWOKnMJH5yAC7hDFokZKGxDQdXEDX7AyPBTzdAHUyKUJmLeRjh76FuAzZrr7ZBnLrKzH60o0I0Fam3xsBE8VeNGQOmHpg8\" alt=\"04\"></p>\n<p>switch 표현식의 더 훌륭한 예시를 보려면 자바 개발자 애드보케이트인 Mala Gupta가 쓴 <a href=\"https://blog.jetbrains.com/idea/2024/01/evolution-of-the-switch-construct-in-java-why-should-you-care/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">최근 블로그 포스트</a>를 확인해보세요.</p>\n<h3 id=\"빈-catch-블록을-피하기\" style=\"position:relative;\"><a href=\"#%EB%B9%88-catch-%EB%B8%94%EB%A1%9D%EC%9D%84-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-label=\"빈 catch 블록을 피하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빈 catch 블록을 피하기</h3>\n<p>자바에서 빈(empty) catch 블록이란 예외를 처리하는 코드가 없는 catch 절을 의미합니다. 이 경우 예외가 발생해도 아무 일도 일어나지 않아 프로그램이 문제를 무시한 채 계속 실행됩니다. 이는 문제를 발견하거나 디버깅하는 데 어려움을 줍니다.</p>\n<h4 id=\"빈-catch-블록\" style=\"position:relative;\"><a href=\"#%EB%B9%88-catch-%EB%B8%94%EB%A1%9D\" aria-label=\"빈 catch 블록 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빈 catch 블록</h4>\n<p>이 예시에서는 예외를 잡았지만 아무 작업도 하지 않습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/TYmE_ZGuBswQM8uELHewS3uETGX5X5oKnzmCpXSfaTTcQT6rGSRuEHXMfefmvCOPy-2ztGf-X7UYGgg8T_j6McP4TlbhGODH3YQ-he1vLls07TTCdIPz7CgR-u5o9sAOwxk8v8ANLM9i5-lxA0J8M2g\" alt=\"05\"></p>\n<p>IntelliJ IDEA는 이런 문제를 발견하여 강조해주고 다음과 같은 해결책을 제안합니다:</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/ytBSpIZYX4TPJdxB0uThGuMdvZ3K8rqCkY1_DRmGLwTvNcnARAdroSvojByJrXA1UhGdgxWCqPiA1kB6kiJ204TJqJ0zktt-HxB-l_Rue_O_RfSJhuEZRLmoVywYFh1skLf-GK_xQvJeoKnpotMjhZw\" alt=\"06\"></p>\n<h4 id=\"예외를-로그로-기록\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EB%A5%BC-%EB%A1%9C%EA%B7%B8%EB%A1%9C-%EA%B8%B0%EB%A1%9D\" aria-label=\"예외를 로그로 기록 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외를 로그로 기록</h4>\n<p>한 가지 방법은 e.printStackTrace()를 통해 예외를 콘솔에 출력하는 것입니다. 이는 디버깅에 도움을 줍니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/myXLeXZGaTNzVrpj4IYDPdJvJ6PsoZIs8QGymwDOafZpp0IPnPS-5QzVKfkEcask9cpihqN2YkW2Zs17h6DB2I4sJzKpdKz7buvG6ANIC9Wi_ph7Br6bfVqnm4zjsLZTg-3rzedEU6o8f9_IPAv5su0\" alt=\"07\"></p>\n<h4 id=\"예외를-기록한-후-다시-던지기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EB%A5%BC-%EA%B8%B0%EB%A1%9D%ED%95%9C-%ED%9B%84-%EB%8B%A4%EC%8B%9C-%EB%8D%98%EC%A7%80%EA%B8%B0\" aria-label=\"예외를 기록한 후 다시 던지기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외를 기록한 후 다시 던지기</h4>\n<p>이상적인 방식은 IOException을 잡은 뒤, 오류 메시지를 출력하고 예외를 다시 던져서 나중에 더 적절히 처리하는 것입니다. 이렇게 하면 문제의 전체적인 흐름을 명확하게 확인할 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/jN6h0J1bfXeaWoAqdNDyVJmFZvXkqbH4PSCD5BefpNZbeVahEkhvjN1UDj1444hvqV8Ly31rsNYpnujkuBIEznnCHBQuqNI3k2M8tsmhXxiaSfMyn1ngbpryfVB7GbYWkQJtuOL-MD8k-Xgw08xZQn8\" alt=\"08\"></p>\n<h4 id=\"예외를-기록하고-대체값을-반환하기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EB%A5%BC-%EA%B8%B0%EB%A1%9D%ED%95%98%EA%B3%A0-%EB%8C%80%EC%B2%B4%EA%B0%92%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"예외를 기록하고 대체값을 반환하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외를 기록하고 대체값을 반환하기</h4>\n<p>빈 catch 블록 문제를 해결하는 또 다른 방법은 예외를 기록한 후 의미 있는 대체값을 반환하는 것입니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/dbAWL1ZOLxfyOV-eQqkILKgvCGKX1P0ocwmLzJg6NBdlYpxmODP-svgsRt15ra__wGigDKoPRekSu4ie3dZr11n9-42C1UE1PYIUhGtysexNTnwelFiXE6afiiiRnppm5V0HcSDUkoXTDRqW7-lzkPE\" alt=\"09\"></p>\n<h3 id=\"배열array보다는-컬렉션collection을-사용\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4array%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%BB%AC%EB%A0%89%EC%85%98collection%EC%9D%84-%EC%82%AC%EC%9A%A9\" aria-label=\"배열array보다는 컬렉션collection을 사용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열(Array)보다는 컬렉션(Collection)을 사용</h3>\n<p>자바의 배열은 효율적이고 사용하기 쉽지만, 크기가 고정되어 있고 제한적인 연산만을 제공합니다. 따라서 데이터 조작이 다양한 경우에는 유연성이 떨어집니다.</p>\n<p>자바의 컬렉션은 ArrayList나 HashSet과 같은 자료구조를 제공하며, 훨씬 뛰어난 유연성과 다양한 기능을 갖추고 있습니다. 예를 들어 ArrayList는 크기를 동적으로 조정할 수 있고, 다양한 유틸리티 메서드를 제공하며, 특히 제네릭과 함께 사용할 때 다루기가 훨씬 쉽습니다. 다음의 코드 예제를 통해 이를 확인해 봅시다:</p>\n<h4 id=\"배열\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4\" aria-label=\"배열 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열</h4>\n<p>우리는 문자열(String)의 배열을 만들었습니다. 자바의 배열은 크기가 고정되어 있기 때문에, 만약 우리가 열한 번째 요소를 추가하고 싶다면 새로운 배열을 만들어 모든 요소를 복사해야만 합니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/PAeQzfw-tXDRj-Maer1DkTXlfgPe3iBlrlYgCd7yGAKLYgtMDDc4FG1zRea8VHP8RZQyzX2dR1uu04UrIrTfxNKyBUr8S18bd94pA9QI01Wxx5IelfgfDCP8T2Ipr9071TlxjsM8g3_UAzbzVRczI7s\" alt=\"10\"></p>\n<h4 id=\"컬렉션\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98\" aria-label=\"컬렉션 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션</h4>\n<p>앞에서 본 코드의 대안으로 ArrayList라는 컬렉션 클래스를 사용할 수 있습니다. ArrayList와 같은 컬렉션은 프로그램 실행 중에 크기를 자유롭게 늘리고 줄일 수 있어 훨씬 더 유연합니다. 또한 이러한 컬렉션에는 데이터 조작에 강력한 도움을 주는 다양한 메서드(예: .add(), .remove(), .contains(), .size() 등)가 함께 제공됩니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/cSPL0AYbF1BkspUa5unzGol2oR0yToIOq74-61dkzXM50lsP0amzlikMRefVmMYv6xYqEKr0nP2lM8I9mdwly2SjBAL2780Yem4FFyZcs9FplHonrxDNAu_K2DFZk_I9AEngA08ZR_73KYt7sJ2-r7w\" alt=\"11\"></p>\n<h3 id=\"불변성의-활용\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80%EC%84%B1%EC%9D%98-%ED%99%9C%EC%9A%A9\" aria-label=\"불변성의 활용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변성의 활용</h3>\n<p>불변 객체는 한 번 생성된 이후 상태를 변경할 수 없는 객체입니다. 불변성을 활용하면, 가변 상태의 변경을 관리하면서 발생하는 복잡성을 없애줘 코드가 보다 안전하고 명확해집니다. 또한 버그와 예기치 않은 부작용의 위험을 최소화하고, 일관된 동작을 보장하며, 애플리케이션을 유지보수하고 디버깅하는 과정을 간편하게 만들어 줍니다. 자바에서는 final 키워드를 사용해 불변성을 달성할 수 있습니다.</p>\n<h4 id=\"final이-없을-경우\" style=\"position:relative;\"><a href=\"#final%EC%9D%B4-%EC%97%86%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"final이 없을 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>final이 없을 경우</h4>\n<p>이 예제에서는 Car 클래스를 만들고 브랜드와 모델을 출력해보겠습니다. 그 다음 자동차의 모델을 변경한 후 다시 출력해 보겠습니다. 콘솔 출력을 보면 Car 클래스의 상태가 바뀌었음을 알 수 있으며, 이를 통해 가변 객체의 동작을 확인할 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/xYr8bZtYQhJkFhE_G1F_uaJvN2-DJzdw5yari28i4YaMrbut4NbpqU3UwE7tdur2GsUa--5juGyZnaYmy9RgjLNonR81E4Iusfr8TvqwdfFl9MMqYpbnbbbPNjsmA2uitLCdMRQt5V3ZD90veQdi0As\" alt=\"12\"></p>\n<h4 id=\"final을-사용하는-경우\" style=\"position:relative;\"><a href=\"#final%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"final을 사용하는 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>final을 사용하는 경우</h4>\n<p>아래의 개선된 코드에서는 앞의 예제와 같은 작업을 수행하지만, 이번에는 Car 클래스가 final 클래스이며 setter 메서드가 없기 때문에 자동차의 모델이나 브랜드 값을 바꿀 수 없습니다. 콘솔 출력 결과를 보면 Car 클래스의 상태가 변하지 않은 그대로 유지되는 것을 확인할 수 있으며, 이를 통해 불변 객체의 동작을 확인할 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/pckS5OwMP5QiuXq7f3Rn7Di6h2OYuZdYga8-w9zl7B1GdKNP6E8e7bk6y9jpJ1RoXPKGJpLmQ7lSRp3cJtmpcTuG5UT3RK7b-JMkgEO15gjHI_k3Qu3J6PWQVN_uoWoXmgrN3lBx13Es8_vw51hAZcU\" alt=\"13\"></p>\n<h3 id=\"상속보다는-구성을-선호\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D%EB%B3%B4%EB%8B%A4%EB%8A%94-%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%84%A0%ED%98%B8\" aria-label=\"상속보다는 구성을 선호 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속보다는 구성을 선호</h3>\n<p>자바에서는 일반적으로 상속(inheritance, 슈퍼 클래스로부터 서브 클래스를 만들어 확장하는 방식)을 사용하는 것보다는 구성(composition, 다른 클래스의 객체를 필드나 참조로 가지는 방식)을 사용하는 편이 더 좋습니다. 구성을 적용하면 코드가 더욱 유연해지고 테스트하기 쉬워집니다.</p>\n<h4 id=\"상속\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D\" aria-label=\"상속 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속</h4>\n<p>이 예제에서 GamingComputer 클래스는 BasicComputer 클래스로부터 상속을 받습니다. 이에 따른 문제점은, 만약 BasicComputer 클래스의 구현이 변경된다면 GamingComputer 클래스에까지 영향을 미쳐 망가져 버릴 수도 있다는 것입니다. 또한 GamingComputer 클래스는 언제나 BasicComputer 클래스의 일종(type)으로 고정되어버리는 제약이 생기기 때문에 유연성이 제한됩니다.</p>\n<p><img src=\"https://blog.jetbrains.com/wp-content/uploads/2024/02/image6-2.png\" alt=\"14\"></p>\n<h4 id=\"구성\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%84%B1\" aria-label=\"구성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구성</h4>\n<p>두 번째 예제를 보면, Computer 클래스는 별도의 클래스 인스턴스인 Memory 클래스와 Processor 클래스를 필드로 갖고 있습니다. 이 각각의 클래스는 독립적으로 자신만의 메서드와 동작 방식을 정의합니다. 이 방식은 훨씬 더 유연하여, 다양한 Memory 또는 Processor 객체로 교체하거나 런타임에도 그 동작 방식을 바꿀 수 있으며, 이는 Computer 클래스를 변경하지 않아도 가능합니다.</p>\n<p><img src=\"https://blog.jetbrains.com/wp-content/uploads/2024/02/image4-1.png\" alt=\"15\"></p>\n<p>좀 더 많은 예제를 살펴보려면 <a href=\"https://blog.jetbrains.com/idea/2024/01/easy-hacks-how-to-create-inheritance-in-java/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Easy Hacks: 자바에서 상속을 만드는 방법</a>을 참조하시기 바랍니다.</p>\n<h3 id=\"람다를-사용해-함수형-인터페이스를-간결하게-만들기\" style=\"position:relative;\"><a href=\"#%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EA%B0%84%EA%B2%B0%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"람다를 사용해 함수형 인터페이스를 간결하게 만들기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다를 사용해 함수형 인터페이스를 간결하게 만들기</h3>\n<p>자바에서 함수형 인터페이스란 단 하나의 추상 메서드만을 가진 인터페이스를 말합니다. 람다 표현식을 사용하면 익명 클래스를 작성할 때 필수적으로 들어가는 불필요한 코드 없이도 이를 간단하고 명료하게 구현할 수 있습니다.</p>\n<h4 id=\"람다를-사용하지-않음\" style=\"position:relative;\"><a href=\"#%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\" aria-label=\"람다를 사용하지 않음 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다를 사용하지 않음</h4>\n<p>다음 예제는 정렬을 위해 Comparator 인터페이스를 익명 내부 클래스로 구현한 것입니다. 이 방식은 코드가 불필요하게 길어지고 복잡한 인터페이스를 다룰 경우 가독성도 떨어질 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/_t1KRobaEFNj4DeQDGxu3BdYq7A1aCGW-Rhep9fMMhEnwwLTs2FHyya6Q7xu7brzARuMIN0_sEC60tWRAa72KyeJmuxXmJgI0bcR_soCx815RD6Ae34cxm1hrytt3BfuSipKa74k-ZDllr-uV4dX-O4\" alt=\"16\"></p>\n<h4 id=\"람다를-사용\" style=\"position:relative;\"><a href=\"#%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9\" aria-label=\"람다를 사용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다를 사용</h4>\n<p>다음 예제는 위의 코드와 똑같은 일을 수행하지만, 익명 클래스 대신 람다 표현식을 이용합니다. 덕분에 코드가 훨씬 간결해지고 직관적으로 바뀌었습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/UBzRQ3Ff7P5gSIxxeODOPckuIrHH4sUR2p6yX5z-Ifh8WbOjD4PmfoXUCxMLcSbE4eUmzK9gdoOkqSUbnveMWUkif6Vsb55y1ivlXnuRJkOhDN3NyIQce_C76iJesU2xYaKqZXxGANSv5dsJM4OhmXo\" alt=\"17\"></p>\n<h3 id=\"enhanced-for-루프-또는-스트림을-사용\" style=\"position:relative;\"><a href=\"#enhanced-for-%EB%A3%A8%ED%94%84-%EB%98%90%EB%8A%94-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EC%82%AC%EC%9A%A9\" aria-label=\"enhanced for 루프 또는 스트림을 사용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enhanced for 루프 또는 스트림을 사용</h3>\n<p>자바에서는 고전적인 for 루프 보다 enhanced for 루프(for-each 루프)나 스트림을 사용하면 컬렉션 또는 배열을 보다 쉽고 간결하게 순회할 수 있습니다.</p>\n<h4 id=\"고전적-for-루프\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%A0%84%EC%A0%81-for-%EB%A3%A8%ED%94%84\" aria-label=\"고전적 for 루프 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고전적 for 루프</h4>\n<p>아래의 코드는 기존 방식의 for 루프를 이용해 리스트를 순회합니다. 이 방식은 카운터 변수를 정의하고, 요소의 인덱스를 관리하며, 종료 조건도 명시해야 하므로 코드가 복잡해지고 가독성이 저하될 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/WI-GIKvCK4d-oRi0PzDBY6Qp6jBLQH1N5mXRtyXwFnkbRE8tq216avDEwZpu5SMTX9WoMw3Hwegig5QGMvToF8kKA2iWhmEi6D7maJye8zcyjJL6IVDO7QRP3pcDUsJDL1Uzwh4bz_cMcN5SSe8_4qg\" alt=\"18\"></p>\n<h4 id=\"enhanced-for-루프\" style=\"position:relative;\"><a href=\"#enhanced-for-%EB%A3%A8%ED%94%84\" aria-label=\"enhanced for 루프 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enhanced for 루프</h4>\n<p>이 방식의 루프(forEach)는 별도의 카운터 변수가 필요하지 않고, 리스트 내의 모든 요소를 직접 가져다 주기 때문에 코드가 단순해지고 실수할 가능성도 줄어듭니다. IntelliJ IDEA에서는 이 방법을 검사 기능을 활용해 더욱 쉽게 적용할 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/sWUaYw6oRg5VMJkWylh1Mxnutj6HY8kGlmtxZbl2n_IH3DWqUvSBOzRoNrmTqO_lQswN36X5GrmRz-TNRvajN0S1DvsEozVYIAFBSa6ZeAqAkrYf-p0jdiqqorvrXAhS3XH5p9hSPCAdoPDlw_8KUwM\" alt=\"19\"></p>\n<h4 id=\"스트림\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-label=\"스트림 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스트림</h4>\n<p>스트림을 사용하는 경우에도 enhanced for 루프처럼 손쉽게 각 요소를 처리할 수 있습니다. 이뿐만 아니라 필터링, 매핑 등의 보다 복잡한 작업을 간편하게 수행할 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/nxMdkTQc2mF7juvmfX8RbOE8ETRYnLHzXYNvnhhLwYa2gTDRUlPrAacHfi4AD60AGREF6zaFsvvaBnOkkBTesnpeiK_T3UNXWcYdDYgCzcOfcubUnTV-LKsSnAe_LT2Bu6VA1zPovSuFO7EV4XcVn5Q\" alt=\"20\"></p>\n<h3 id=\"try-with-resources-문을-사용해-리소스-보호하기\" style=\"position:relative;\"><a href=\"#try-with-resources-%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EB%B3%B4%ED%98%B8%ED%95%98%EA%B8%B0\" aria-label=\"try with resources 문을 사용해 리소스 보호하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-with-resources 문을 사용해 리소스 보호하기</h3>\n<p>try-with-resources 문을 이용하면 자원을 사용할 때 이를 안전하게 닫아주는 작업을 자동화할 수 있습니다. 기존의 try 블록에서 리소스를 제대로 닫지 않으면 메모리 누수나 애플리케이션 오류 등 성능과 신뢰성에 악영향을 끼치는 문제가 발생할 수 있습니다.</p>\n<h4 id=\"리소스를-수동으로-닫는-경우\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EC%88%98%EB%8F%99%EC%9C%BC%EB%A1%9C-%EB%8B%AB%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"리소스를 수동으로 닫는 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리소스를 수동으로 닫는 경우</h4>\n<p>다음 예제는 시스템 리소스인 FileInputStream을 수동으로 닫는 방법을 보여줍니다. 만일 리소스를 닫는 과정에서 예외가 발생하는 경우, 리소스가 제대로 닫히지 않아 리소스 누수 또는 다른 문제를 유발할 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/x49U3KI5p86ZQbUPY6JpfZC1jYIjKP4Z3uBP07jV_U4YLmAQtjsrdVWnJPXfKP3OpHRHc87qTvfzjaKl6WEEiFmrmHKzwLweYHNYFfCNWXfWyPEQbaUlF5KWlkhGkA-KR4ZFOVgQV4Lky_CQIsKzEUw\" alt=\"21\"></p>\n<h4 id=\"try-with-resources-문을-사용하는-경우\" style=\"position:relative;\"><a href=\"#try-with-resources-%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"try with resources 문을 사용하는 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-with-resources 문을 사용하는 경우</h4>\n<p>개선된 예제에서는 FileInputStream을 try 블록 내에 선언하여 사용합니다. 이렇게 하면 자바가 자동으로 try 블록을 빠져나갈 때 (정상 종료든 예외 발생이든 상관없이) 리소스를 확실하게 닫아줍니다. 따로 코드를 작성하지 않아도 리소스가 보다 안전하게 관리됩니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/HbGUZq71hznydgsQuT2yatcXPy0OtMnYY5-cY5Ca4Kf1qU8223aAEgWMI27nZtEGR-OyOhYSedugGDZnKXFojGsdhDDVFGxaQGxEZeOVNVGxXVoQD_qUjO75wE_bNW82mUoF6v0bNPvDhaklx7NEFe0\" alt=\"22\"></p>\n<h3 id=\"지나치게-중첩된-코드-정리하기\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EB%82%98%EC%B9%98%EA%B2%8C-%EC%A4%91%EC%B2%A9%EB%90%9C-%EC%BD%94%EB%93%9C-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"지나치게 중첩된 코드 정리하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지나치게 중첩된 코드 정리하기</h3>\n<p>지나치게 깊게 중첩된 코드는 얼핏 보면 놓치기 쉬운 논리적 문제점을 드러냅니다. 이러한 복잡성은 주로 조건문이 과도하게 많을 때 나타나지만, 조건문은 기본적으로 코딩에서 자주 사용하는 기능이기 때문에 이를 완전히 제거할 수는 없습니다. 하지만 코드를 보다 간결하게 만드는 방법을 고민해야 합니다.</p>\n<h4 id=\"지나치게-많은-조건문\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EB%82%98%EC%B9%98%EA%B2%8C-%EB%A7%8E%EC%9D%80-%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-label=\"지나치게 많은 조건문 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지나치게 많은 조건문</h4>\n<p>아래 예제에서 지나치게 많은 조건문이 중첩되었을 때 코드가 얼마나 복잡하고 난해해지는지 볼 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/iaeo30p4MAEfEjJ0h6rgNuINiqQ3JqxuSciRhPXOCePdyzBBjHm0OI1l6fFBFGKEL6M_rTvhQMfI_BJyxeuylemzgFNL0byHe1OAYIBDcvaP2THPEyTTenpuMjMTwNYKE197mQA7qKA6iuZGIpxXAIg\" alt=\"23\"></p>\n<h4 id=\"리팩토링-된-코드\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81-%EB%90%9C-%EC%BD%94%EB%93%9C\" aria-label=\"리팩토링 된 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리팩토링 된 코드</h4>\n<p>리팩토링된 코드에서는 ‘가드 절(guard clauses)’ 기법을 사용해 중첩된 조건문을 제거합니다. 이를 통해 특정 조건이 충족되었을 때 함수를 즉시 종료하여, 기존의 논리를 동일하게 유지하면서 간결하고 보다 깨끗한 코드로 만들 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/E2o0prXGO0Fn1eqD8iXlAY6OZ2F5dcACV9mBESHTZ3AViQe7rVCGXPYsfV9wVNYKN8uOEcDgJ7MkpQ1Nx-eeVVhPirARWfK1K1gIkm88EtcXQviXTTYsezLYodgGGd8vHFlIbu7R5dBuI0x55Yw_C_0\" alt=\"24\"></p>\n<h2 id=\"프로젝트별\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%B3%84\" aria-label=\"프로젝트별 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트별</h2>\n<p>다양한 의존성을 가진 프로젝트를 작업할 때 유용한 권장사항과 비권장사항을 소개합니다.</p>\n<h3 id=\"의존성을-최신-상태로-유지하기\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%8B%A0-%EC%83%81%ED%83%9C%EB%A1%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"의존성을 최신 상태로 유지하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성을 최신 상태로 유지하기</h3>\n<p>프로젝트의 의존성을 최신으로 유지하면 보안이 강화되고, 새로운 기능을 사용할 수 있으며, 버그가 수정됩니다. 정기적인 업데이트는 프로젝트가 원활히 운영되고 다른 도구와 호환되도록 합니다.</p>\n<p>IntelliJ IDEA를 사용하면 의존성을 간편하게 최신 상태로 유지할 수 있습니다. 먼저 Preferences/Settings | Plugins 메뉴로 이동하여 JetBrains 마켓플레이스에서 ‘Package Search’ 플러그인을 설치합니다. 그런 다음 Dependencies 툴 창에서 프로젝트에 사용된 모든 의존성을 확인하고 옆에 있는 ‘Upgrade’ 링크를 클릭하여 최신 버전으로 업그레이드할 수 있습니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/v7a_sygKJBUH46YdX72jda6_U82VCtfZ_kAV9_dVvAX96OypLlreOEV72rxX-rcqaItPN_ym94q9zL_XGTc5xGkLpLIhfXE6FQPqlln-Sii76FdyF9kgtFDY9UYnYfNUKgi94hI9TEI5fccmCMhf1VU\" alt=\"25\"></p>\n<h3 id=\"취약한-의존성과-api-찾기\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1%EA%B3%BC-api-%EC%B0%BE%EA%B8%B0\" aria-label=\"취약한 의존성과 api 찾기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약한 의존성과 API 찾기</h3>\n<p>프로젝트의 의존성 및 API에 존재 가능한 보안 취약점을 주기적으로 검사하면, 보안 위협을 최소화하고 프로젝트에 정의된 규칙을 준수하면서 원활하게 운영할 수 있습니다. 발견된 취약성을 빠르게 해결하면 프로젝트와 사용자들을 보안 위협으로부터 보호합니다.</p>\n<p>IntelliJ IDEA에서 취약한 의존성을 찾으려면 메뉴에서 Code | Analyze Code를 선택한 다음 Show Vulnerable Dependencies를 클릭하면 됩니다. 결과는 Problems 툴 창의 Vulnerable Dependencies 탭에 나타납니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/c629wfGRdXWE_RNuEzc3UpRmalBuLps21aQ80EXyztqzCY-Heu96WM7GUHjKoi4MclMul7V1AP2WlWAMcx5kkHpaFrxMlB_-mGhaXTtouAK7_BrAK3J4AJH89mWADU-ZJiUCm3kv_PInMnfYVj9B_ZE\" alt=\"26\"></p>\n<p>또는, 프로젝트 창에서 pom.xml이나 build.gradle 같은 파일이나 폴더를 마우스 오른쪽 버튼으로 클릭한 다음, 컨텍스트 메뉴에서 Analyze Code | Show Vulnerable Dependencies 메뉴를 선택해도 동일한 확인이 가능합니다.</p>\n<p>취약점 검사를 명시적으로 하지 않더라도 IntelliJ IDEA는 pom.xml이나 build.gradle에서 발견된 취약성을 자동으로 강조표시하여 알려줍니다.</p>\n<p><img src=\"https://lh7-us.googleusercontent.com/3gRj9n587wvDfr_pf1q0rB66cNqndiEZtxsmVdEnuCo0qUhhSA5NsvuXCgwAkePqOSW9_dgOUxIEIp2A4n4yKD8a79kuixHfYK1UMshpHPhav5XI0j5OfLHtDkYAivyIbMtzeBUzZfWz2sTjikEN0-s\" alt=\"27\"></p>\n<h3 id=\"순환-의존성-피하기\" style=\"position:relative;\"><a href=\"#%EC%88%9C%ED%99%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-label=\"순환 의존성 피하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순환 의존성 피하기</h3>\n<p>순환 의존성이란 프로젝트 내의 구성 요소들이 서로를 원형으로 의존하는 경우를 말합니다. 예를 들어, 구성 요소 A가 구성 요소 B를 참조하는데, B 역시 다시 A를 참조한다면 순환 의존성이 발생한 것입니다. 이런 상황이 발생하면 프로젝트는 복잡해지고, 경계가 불분명해지며 유지보수가 어려워집니다. 따라서 이런 순환적 구조는 피하는 것이 좋습니다.</p>\n<p>순환 의존성을 피하려면 IntelliJ IDEA의 <a href=\"https://www.jetbrains.com/guide/java/tutorials/dependency-matrix/?_gl=1*1rqvzad*_gcl_au*NDUyMDMyNTE2LjE3NDA3MzA1NDA.*FPAU*NDUyMDMyNTE2LjE3NDA3MzA1NDA.*_ga*MTg2MDEwMDE0OS4xNzQwNzMwNTM0*_ga_9J976DJZ68*MTc0MzA4NTE0Mi44LjAuMTc0MzA4NTE0My41OS4wLjA.\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dependency Matrix 기능</a>을 활용해보세요. 이를 통해 프로젝트 내 구성 요소 간의 의존성을 시각적으로 파악하고 관리할 수 있습니다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>본 가이드가 여러분의 일상 업무를 좀 더 간단하게 만들어 주고, 명확하고 깔끔하며 전문적인 코드를 작성하도록 도와 더 효율적인 개발자가 되는 데 도움이 되었기를 바랍니다.</p>\n<p>IntelliJ IDEA는 이번 글에서 소개된 여러 사항들을 손쉽게 발견하도록 도와주고, 자동 수정을 제공해주기도 합니다. 지금 바로 사용해보시고, 여러분의 경험과 의견을 들려주세요!</p>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<p><a href=\"https://blog.jetbrains.com/idea/2024/02/java-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Best Practices</a></p>","frontmatter":{"title":"JetBrains가 제안하는 자바 모범 사례","date":"2024-03-01","description":"[번역] Java Best Practices","tags":["java","best-practices","translation"]}}},"pageContext":{"slug":"/blog/2024/java-best-practices-by-jetbrains/","previous":{"fields":{"slug":"/blog/2022/ddd-hexagonal-onion-clean-cqrs/"},"frontmatter":{"title":"DDD, Hexagonal, Onion, Clean, CQRS, ... 모두 종합한 방법","tags":["ddd","hexagonal","onion","cqrs","translation"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EA%B8%B0%EC%B4%88-%EB%B8%94%EB%A1%9D\">시스템의 기초 블록</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%84%EA%B5%AC\">도구</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%84%EA%B5%AC-%EB%B0%8F-%EC%A0%84%EB%8B%AC-%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98%EC%9D%84-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BD%94%EC%96%B4%EC%99%80-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\">도구 및 전달 메커니즘을 애플리케이션 코어와 연결하기</a></p>\n<ul>\n<li><a href=\"#%ED%8F%AC%ED%8A%B8ports\">포트(Ports)</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%96%B4%EB%8C%91%ED%84%B0primary-%EB%98%90%EB%8A%94-driving-adapters\">기본 어댑터(Primary 또는 Driving Adapters)</a></li>\n<li><a href=\"#%EB%B3%B4%EC%A1%B0-%EC%96%B4%EB%8C%91%ED%84%B0secondary-%EB%98%90%EB%8A%94-driven-adapters\">보조 어댑터(Secondary 또는 Driven Adapters)</a></li>\n<li><a href=\"#%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84inversion-of-control\">제어의 역전(Inversion of Control)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BD%94%EC%96%B4%EC%9D%98-%EC%A1%B0%EC%A7%81%ED%99%94application-core-organisation\">애플리케이션 코어의 조직화(Application Core Organisation)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EA%B3%84%EC%B8%B5application-layer\">애플리케이션 계층(Application Layer)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B3%84%EC%B8%B5domain-layer\">도메인 계층(Domain Layer)</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%9C%EB%B9%84%EC%8A%A4domain-services\">도메인 서비스(Domain Services)</a></li>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8domain-model\">도메인 모델(Domain Model)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8components\">컴포넌트(Components)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B0%84%EC%9D%98-%EA%B2%B0%ED%95%A9%EB%8F%84-%EB%82%AE%EC%B6%94%EA%B8%B0decoupling-the-components\">컴포넌트 간의 결합도 낮추기(Decoupling the components)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%8B%A4%EB%A5%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0triggering-logic-in-other-components\">다른 컴포넌트의 로직을 실행하기(Triggering logic in other components)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EB%A5%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%96%BB%EA%B8%B0getting-data-from-other-components\">다른 컴포넌트의 데이터 얻기(Getting data from other components)</a></p>\n<ul>\n<li><a href=\"#%EA%B3%B5%EC%9C%A0%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%80%EC%9E%A5%EC%86%8Cdata-storage-shared-between-components\">공유된 데이터 저장소(Data storage shared between components)</a></li>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%B3%84%EB%A1%9C-%EB%B6%84%EB%A6%AC%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%80%EC%9E%A5%EC%86%8Cdata-storage-segregated-per-component\">컴포넌트별로 분리된 데이터 저장소(Data storage segregated per component)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%9C%EC%96%B4-%ED%9D%90%EB%A6%84flow-of-control\">제어 흐름(Flow of control)</a></p>\n<ul>\n<li><a href=\"#%EC%BB%A4%EB%A7%A8%EB%93%9C%EC%BF%BC%EB%A6%AC-%EB%B2%84%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8Cwithout-a-commandquery-bus\">커맨드/쿼리 버스를 사용하지 않을 때(Without a Command/Query Bus)</a></li>\n<li><a href=\"#%EC%BB%A4%EB%A7%A8%EB%93%9C%EC%BF%BC%EB%A6%AC-%EB%B2%84%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8Cwith-a-commandquery-bus\">커맨드/쿼리 버스를 사용할 때(With a Command/Query Bus)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0conclusion\">결론(Conclusion)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B6%9C%EC%B2%98\">출처</a></p>\n</li>\n</ul>"},"next":null}},"staticQueryHashes":["253152893","3980716358"],"slicesMap":{}}