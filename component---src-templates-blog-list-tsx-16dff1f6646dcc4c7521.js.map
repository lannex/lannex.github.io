{"version":3,"sources":["webpack:///./src/components/Post/index.tsx","webpack:///./src/templates/BlogList.tsx"],"names":["StyledPost","styled","div","Post","title","node","className","to","fields","slug","dangerouslySetInnerHTML","__html","frontmatter","description","excerpt","date","BlogList","props","data","location","posts","pageContext","allMarkdownRemark","edges","Layout","SEO","style","maxWidth","map","key","pageQuery"],"mappings":"iKAOMA,E,UAAaC,EAAOC,IAAV,mEAAGD,CAAH,2XAuEDE,EAnBe,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtC,OACE,kBAACL,EAAD,CAAYM,UAAU,SACpB,yBAAKA,UAAU,yBACb,kBAAC,OAAD,CAAMC,GAAIF,EAAKG,OAAOC,MACpB,wBAAIH,UAAU,WAAWF,GACzB,uBACEE,UAAU,eACVI,wBAAyB,CACvBC,OAAQN,EAAKO,YAAYC,aAAeR,EAAKS,WAGjD,uBAAGR,UAAU,gBAAgBD,EAAKO,YAAYG,UCvExD,0CA8FeC,UAnEmB,SAAAC,GAAS,IACjCC,EAAgCD,EAAhCC,KAAMC,EAA0BF,EAA1BE,SACRC,GADkCH,EAAhBI,YACVH,EAAKI,kBAAkBC,OAMrC,OACE,kBAACC,EAAA,EAAD,CAAQL,SAAUA,GAChB,kBAACM,EAAA,EAAD,CAAKrB,MAAM,WACX,yBACEE,UAAU,UACVoB,MAAO,CACLC,SAAU,MAGXP,EAAMQ,KAAI,YAAc,IAAXvB,EAAW,EAAXA,KACND,EAAQC,EAAKO,YAAYR,OAASC,EAAKG,OAAOC,KACpD,OAAO,kBAAC,EAAD,CAAMoB,IAAKxB,EAAKG,OAAOC,KAAML,MAAOA,EAAOC,KAAMA,UAnBlE,IAqEayB,EAAY","file":"component---src-templates-blog-list-tsx-16dff1f6646dcc4c7521.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\n// types\nimport { INode } from '../../types/markdown';\n\nconst StyledPost = styled.div`\n  & {\n    & a {\n      /* position: relative; */\n\n      & h3 {\n        transition: color 0.35s;\n        color: #2d3748;\n      }\n\n      & p {\n        transition: color 0.35s;\n        color: #a0aec0;\n      }\n\n      & ::after {\n        content: '';\n        position: absolute;\n        top: -6px;\n        left: 0;\n        width: 18px;\n        height: 1px;\n        transform: scale(0, 1);\n        transform-origin: 0% 0%;\n        transition: opacity 0.35s, transform 0.35s;\n        border-bottom: 1px solid;\n        opacity: 0;\n      }\n\n      & :hover {\n        & h3 {\n          color: #000;\n        }\n\n        & p {\n          color: #718096;\n        }\n\n        &::after {\n          transform: scale(1);\n          opacity: 1;\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  title: string;\n  node: INode;\n}\n\nconst Post: React.FC<Props> = ({ title, node }) => {\n  return (\n    <StyledPost className=\"mb-12\">\n      <div className=\"inline-block relative\">\n        <Link to={node.fields.slug}>\n          <h3 className=\"text-lg\">{title}</h3>\n          <p\n            className=\"mt-1 text-sm\"\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description || node.excerpt,\n            }}\n          />\n          <p className=\"mt-1 text-xs\">{node.frontmatter.date}</p>\n        </Link>\n      </div>\n    </StyledPost>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { graphql, Link, PageRendererProps } from 'gatsby';\n\n// types\nimport { INode } from '../types/markdown';\n\n// components\nimport SEO from '../components/SEO';\nimport Layout from '../components/Layout';\nimport Post from '../components/Post';\n\ninterface Props {\n  location: PageRendererProps['location'];\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<{\n        node: INode;\n      }>;\n    };\n  };\n}\n\nconst BlogList: React.FC<Props> = props => {\n  const { data, location, pageContext } = props;\n  const posts = data.allMarkdownRemark.edges;\n  // const { currentPage, numPages } = pageContext;\n  // const isFirst = currentPage === 1;\n  // const isLast = currentPage === numPages;\n  // const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  // const nextPage = (currentPage + 1).toString();\n  return (\n    <Layout location={location}>\n      <SEO title=\"lannex\" />\n      <div\n        className=\"mx-auto\"\n        style={{\n          maxWidth: 680,\n        }}\n      >\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug;\n          return <Post key={node.fields.slug} title={title} node={node} />;\n        })}\n      </div>\n      {\n        // <ul\n        //   style={{\n        //     display: 'flex',\n        //     flexWrap: 'wrap',\n        //     justifyContent: 'space-between',\n        //     alignItems: 'center',\n        //     listStyle: 'none',\n        //     padding: 0,\n        //   }}\n        // >\n        //   {!isFirst && (\n        //     <Link to={prevPage} rel=\"prev\">\n        //       ← Previous Page\n        //     </Link>\n        //   )}\n        //   {Array.from({ length: numPages }, (_, i) => (\n        //     <li\n        //       key={`pagination-number${i + 1}`}\n        //       style={{\n        //         margin: 0,\n        //       }}\n        //     >\n        //       <Link\n        //         to={`/${i === 0 ? '' : i + 1}`}\n        //         style={{\n        //           color: i + 1 === currentPage ? '#ffffff' : '',\n        //           background: i + 1 === currentPage ? '#007acc' : '',\n        //         }}\n        //       >\n        //         {i + 1}\n        //       </Link>\n        //     </li>\n        //   ))}\n        //   {!isLast && (\n        //     <Link to={nextPage} rel=\"next\">\n        //       Next Page →\n        //     </Link>\n        //   )}\n        // </ul>\n      }\n    </Layout>\n  );\n};\n\nexport default BlogList;\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}